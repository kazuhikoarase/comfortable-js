{"version":3,"sources":["src/main/ts/core/DefaultCellRendererFactory.ts","src/main/ts/core/EventTarget.ts","src/main/ts/core/DefaultTableModel.ts","src/main/ts/core/i18n.ts","src/main/ts/core/UIEventTarget.ts","src/main/ts/core/InternalTable.ts","src/main/ts/core/List.ts","src/main/ts/core/style.ts","src/main/ts/core/Table.ts","src/main/ts/core/ui.ts","src/main/ts/core/util.ts","src/main/ts/core/_intf.ts","src/main/ts/core/_node.ts","src/main/ts/template-support/DefaultHeaderCellRendererFactory.ts","src/main/ts/template-support/TemplateSupport.ts","src/main/ts/template-support/_intf.ts","src/main/ts/vue-support/VueSupport.ts","src/main/ts/core/i18n/en.ts","src/main/ts/core/i18n/ja.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAwLb,IAAI,oCAAoC,+BAqD9C,CAAC;IAEK,IAAI,gCAAgC,8DA8D1C,CAAC;IAIK,IAAI,4BAA4B;;;KAmCtC,CAAA;CAEF;ACjWD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,KAAK;QACpB,IAAI,EAAG,MAAM,CAAC;QACd,MAAM,CAAC,EAAG,GAAG,CAAC;QACd,aAAa,CAAC,EAAG,GAAG,CAAC;QACrB,cAAc,CAAC,EAAG,MAAM,IAAI,CAAC;QAC7B,KAAK,CAAC,EAAG,MAAM,CAAC;QAChB,gBAAgB,CAAC,EAAG,OAAO,CAAC;QAC5B,KAAK,CAAC,EAAG,MAAM,CAAC;QAChB,KAAK,CAAC,EAAG,MAAM,CAAC;KACjB;IAED,KAAY,aAAa,GAAG,CAAC,KAAK,EAAG,KAAK,EAAE,MAAM,CAAC,EAAG,GAAG,KAAK,IAAI,CAAC;IAEnE,UAAiB,WAAW;QAC1B,OAAO,EAAG,CAAC,IAAI,EAAG,MAAM,EAAE,MAAM,CAAC,EAAG,GAAG,KAAK,WAAW,CAAC;QACxD,EAAE,EAAG,CAAC,IAAI,EAAG,MAAM,EAAE,QAAQ,EAAG,aAAa,KAAK,WAAW,CAAC;QAC9D,GAAG,EAAG,CAAC,IAAI,EAAG,MAAM,EAAE,QAAQ,EAAG,aAAa,KAAK,WAAW,CAAC;KAChE;IAED,MAAa,eAAgB,YAAW,WAAW;QACjD,OAAO,CAAC,GAAG,CAAgD;QAC3D,OAAO,CAAC,SAAS;QAGV,OAAO,CAAC,MAAO,MAAM,EAAE,MAAM,CAAC,EAAG,GAAG;QAOpC,EAAE,CAAC,MAAO,MAAM,EAAE,UAAW,aAAa;QAI1C,GAAG,CAAC,MAAO,MAAM,EAAE,UAAW,aAAa;KAMnD;CAEF;AC1DD;;;;;;;;;GASG;AAIH,kBAAU,WAAW,CAAC;IAIpB,MAAa,iBAAkB,SAAQ,eAAgB,YAAW,UAAU;QACnE,gBAAgB,SAAO;QACvB,iBAAiB,SAAM;QACvB,gBAAgB;;;;UAAiD;QACjE,0BAA0B,2BAAsC;QAChE,UAAU,SAAK;QACf,UAAU,SAAK;QACf,YAAY,SAAK;QACjB,WAAW;QACX,cAAc;QACd,YAAY,CAAC,KAAM,MAAM;QACzB,iBAAiB,CAAC,KAAM,MAAM;QAC9B,UAAU,CAAC,KAAM,MAAM,EAAE,KAAM,MAAM;QACrC,cAAc,CAAC,KAAM,MAAM,EAAE,KAAM,MAAM;QACzC,wBAAwB,CAAC,KAAM,MAAM,EAAE,KAAM,MAAM;QACnD,cAAc,CAAC,KAAM,MAAM;QAC3B,eAAe,CAAC,KAAM,MAAM;QAC5B,SAAS,CAAC,KAAM,MAAM,EAAE,KAAM,MAAM;QAKpC,WAAW,CAAC,KAAM,MAAM,EAAE,KAAM,MAAM;;;;QAetC,mBAAmB,CAAC,KAAM,MAAM;QAChC,mBAAmB,CAAC,KAAM,MAAM;KACxC;CAEF;AC1DD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC,IAAI,CAAC;IAIzB,UAAiB,IAAI;QACnB,QAAQ,EAAG,QAAQ,CAAA;KACpB;IAED,UAAiB,QAAQ;QACvB,YAAY,EAAG,MAAM,CAAC;QACtB,YAAY,EAAG,MAAM,CAAC;QACtB,QAAQ,EAAG,MAAM,CAAC;QAClB,SAAS,EAAG,MAAM,CAAC;QACnB,KAAK,EAAG,MAAM,CAAC;QACf,EAAE,EAAG,MAAM,CAAC;QACZ,MAAM,EAAG,MAAM,CAAC;QAChB,KAAK,EAAG,MAAM,CAAC;QACf,WAAW,EAAG,MAAM,CAAC;QACrB,YAAY,EAAG,MAAM,CAAC;QACtB,UAAU,EAAG,MAAM,CAAC;KACrB;IAEM,IAAI,WAAW,wBAKrB,CAAA;IAEM,IAAI,WAAW,gBAIrB,CAAA;CAEF;AC9CD;;;;;;;;;GASG;AAIH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,aAAc,SAAQ,WAAW;QAChD,UAAU,EAAG,MAAM,IAAI,CAAC;QACxB,MAAM,EAAG,MAAM,IAAI,CAAC;KACrB;IAED,MAAa,iBACb,SAAQ,eAAgB,YAAW,aAAa;QACvC,KAAK,UAAQ;QACb,UAAU;QASV,MAAM;KAEd;CAEF;ACtCD;;;;;;;;;GASG;AAIH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,QAAQ;QACvB,GAAG,EAAG,WAAW,CAAC;QAClB,UAAU,CAAC,EAAG,UAAU,CAAC;QACzB,GAAG,CAAC,EAAG,MAAM,CAAC;QACd,GAAG,CAAC,EAAG,MAAM,CAAC;QACd,QAAQ,CAAC,EAAG,QAAQ,EAAE,CAAC;QACvB,QAAQ,CAAC,EAAG,iBAAiB,CAAC;QAC9B,OAAO,CAAC,EAAG,wBAAwB,CAAC;KACrC;IAED,UAAiB,UAAU;QACzB,IAAI,EAAG,MAAM,CAAC;QACd,GAAG,EAAG,MAAM,CAAC;QACb,KAAK,EAAG,MAAM,CAAC;QACf,MAAM,EAAG,MAAM,CAAC;QAChB,MAAM,EAAG,MAAM,CAAC;QAChB,MAAM,EAAG,MAAM,CAAC;QAChB,MAAM,EAAG,MAAM,CAAC;QAChB,MAAM,EAAG,MAAM,CAAC;QAChB,SAAS,EAAG;YAAE,CAAC,EAAE,EAAG,MAAM,GAAI;gBAAE,OAAO,EAAG,MAAM,CAAC;gBAAC,OAAO,EAAG,MAAM,CAAA;aAAC,CAAA;SAAE,CAAC;KACvE;IAED,UAAiB,WAAW;QAC1B,IAAI,EAAG;YAAE,CAAC,CAAC,EAAG,MAAM,GAAI,MAAM,CAAA;SAAE,CAAC;QACjC,GAAG,EAAG;YAAE,CAAC,CAAC,EAAG,MAAM,GAAI,MAAM,CAAA;SAAE,CAAC;KACjC;IAED,UAAiB,aAAa;QAC5B,GAAG,EAAG,WAAW,CAAC;QAClB,IAAI,EAAG,MAAM,CAAC;QACd,GAAG,EAAG,MAAM,CAAC;QACb,QAAQ,EAAG,QAAQ,CAAC;QACpB,KAAK,EAAG,QAAQ,CAAC;QACjB,GAAG,CAAC,EAAG,MAAM,CAAC;QACd,GAAG,CAAC,EAAG,MAAM,CAAC;QACd,KAAK,EAAG,UAAU,CAAC;QACnB,UAAU,EAAG,UAAU,CAAC;QACxB,2BAA2B,EAAG,aAAa,CAAC;QAC5C,WAAW,EAAG,WAAW,CAAC;QAC1B,gBAAgB,EAAG,CAAC,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK;YAClD,IAAI,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAA;SAAC,CAAC;QAC3D,SAAS,EAAG,MAAM,UAAU,CAAC;QAC7B,MAAM,EAAG,MAAM,IAAI,CAAC;KACrB;IAUD,MAAa,iBAAkB,YAAW,aAAa;QAErD,OAAO,CAAC,SAAS,CAAkC;QACnD,OAAO,CAAC,MAAM,CAA+B;QAE7C,OAAO,CAAC,KAAK,CAKwC;QACrD,OAAO,CAAC,IAAI,CAIO;QAEnB,OAAO,CAAC,QAAQ;QAiBhB,OAAO,CAAC,YAAY;QAgBb,GAAG,cAAa;QAChB,QAAQ,EAAG,QAAQ,CAA4B;QAC/C,KAAK,EAAG,QAAQ,CAAyB;QACzC,IAAI,SAAK;QACT,GAAG,SAAK;QACR,KAAK,EAAG,UAAU,CAAQ;QAC1B,UAAU,aAAsB;QAEhC,WAAW,EAAG,WAAW,CAAQ;QACjC,2BAA2B,EAAG,aAAa,CAAQ;QACnD,gBAAgB,CAAC,MAAO,MAAM,EAAE,KAAM,MAAM;;;;;;QAwF5C,SAAS;QAsDT,MAAM;KA6Ed;CAEF;AC/VD;;;;;;;;;GASG;AAIH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,IAAI,CAAC,CAAC,EAAC,CAAC,SAAS,QAAQ,CAAE,SAAQ,aAAa;QAC/D,GAAG,EAAG,WAAW,CAAC;QAClB,SAAS,EAAG,CAAC,KAAK,EAAG,MAAM,KAAK,CAAC,CAAC;QAClC,YAAY,EAAG,MAAM,MAAM,CAAC;QAC5B,UAAU,EAAG,MAAM,CAAC,CAAC;QACrB,UAAU,EAAG,CAAC,IAAI,EAAG,CAAC,EAAE,IAAI,EAAG,CAAC,KAAK,IAAI,CAAC;QAC1C,UAAU,EAAG,MAAM,CAAC;KACrB;IAED,UAAiB,QAAQ;QACvB,GAAG,EAAG,WAAW,CAAC;QAClB,GAAG,EAAG,MAAM,CAAC;KACd;IAED,MAAa,QAAQ,CAAC,CAAC,EAAC,CAAC,SAAS,QAAQ,CAC1C,SAAQ,iBAAkB,YAAW,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC;QAE5C,OAAO,CAAC,WAAW,CACoB;QACvC,OAAO,CAAC,IAAI,CAE8D;QAE1E,OAAO,CAAC,GAAG,CAC4B;QAEvC,OAAO,CAAC,QAAQ,CAIC;QAEjB,OAAO,CAAC,KAAK,CAQ6B;QAE1C,OAAO,CAAC,KAAK,CAAY;QACzB,OAAO,CAAC,QAAQ;QAUT,GAAG,cAAc;QACjB,SAAS,CAAC,OAAQ,MAAM,GAAI,CAAC;QAC7B,YAAY;QACZ,UAAU,IAAK,CAAC;QAMhB,UAAU,CAAC,MAAO,CAAC,EAAE,MAAO,CAAC;QAG7B,UAAU,SAAM;QAChB,MAAM;KAsDd;CAEF;AC3ID;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAIb,IAAI,eAAe,QAAQ,CAAC;CAEpC;ACjBD;;;;;;;;;GASG;AAIH,kBAAU,WAAW,CAAC;IA+CpB,UAAiB,cAAe,SAAQ,MAAM;QAC5C,IAAI,CAAC,EAAG;YAAE,GAAG,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAA;SAAE,CAAC;QACvC,SAAS,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,EAAE,WAAW,CAAC,EAAG,OAAO,KAAK,IAAI,CAAC;QACzE,OAAO,EAAG,MAAM,IAAI,CAAC;KACtB;IAEM,IAAI,eAAe,UAEY,CAAC;IAEhC,IAAI,WAAW,aAErB,CAAA;IAED,MAAa,SAAU,SAAQ,iBAAkB,YAAW,KAAK;oBAEnD,OAAQ,UAAU;QAK9B,OAAO,CAAC,MAAM,CAmJT;QAEL,OAAO,CAAC,GAAG,CAC8B;QAEzC,OAAO,CAAC,QAAQ,CAGC;QAEjB,OAAO,CAAC,KAAK,CA4BoD;QAEjE,OAAO,CAAC,SAAS,CAAsB;QACvC,OAAO,CAAC,gBAAgB,CAA0B;QAElD,OAAO,CAAC,WAAW;QAcnB,OAAO,CAAC,WAAW;QAoCnB,OAAO,CAAC,aAAa,CAAwB;QAC7C,OAAO,CAAC,2BAA2B,CAAwB;QAC3D,OAAO,CAAC,gBAAgB;QAiExB,OAAO,CAAC,eAAe;QAmBvB,OAAO,CAAC,cAAc;QAMtB,OAAO,CAAC,YAAY;QAGpB,OAAO,CAAC,IAAI;QAoEZ,OAAO,CAAC,0BAA0B;QA+G3B,MAAM,CAAC,WAAW,CAAC,EAAG;YAAE,GAAG,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAA;SAAE;QA4G3D,OAAO,CAAC,oBAAoB;QAmCrB,GAAG,cAAc;QACjB,UAAU;QACV,WAAW;QACX,YAAY,CAAC,UAAW,GAAG;QAS3B,MAAM,iBAA+B;QACrC,KAAK,EAAG,UAAU,CAAQ;KAClC;CAEF;AClvBD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,IAAI;QACnB,OAAO,EAAG,MAAM,IAAI,CAAC;KACtB;IAED,UAAiB,QAAQ;QACvB,KAAK,EAAG,MAAM,CAAC;QACf,MAAM,CAAC,EAAG,CAAC,KAAK,CAAC,EAAG,KAAK,KAAK,IAAI,CAAC;QACnC,QAAQ,CAAC,EAAG,MAAM,QAAQ,EAAE,CAAC;KAC9B;IAEM,IAAI,EAAE;;;;KAyFZ,CAAA;CAEF;ACpHD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,cAAc;QAC7B,KAAK,CAAC,EAAG;YAAE,CAAE,GAAG,EAAG,MAAM,GAAK,MAAM,CAAA;SAAE,CAAC;QACvC,KAAK,CAAC,EAAG;YAAE,CAAE,GAAG,EAAG,MAAM,GAAK,MAAM,CAAA;SAAE,CAAC;QACvC,KAAK,CAAC,EAAG;YAAE,CAAE,GAAG,EAAG,MAAM,GAAK,GAAG,CAAA;SAAE,CAAC;QACpC,EAAE,CAAC,EAAG;YAAE,CAAE,IAAI,EAAG,MAAM,GAAK,CAAC,KAAK,EAAG,GAAG,KAAK,IAAI,CAAA;SAAE,CAAC;KACrD;IAED,UAAiB,aAAa;QAC5B,CAAC,OAAO,EAAG,MAAM,EACb,IAAI,CAAC,EAAG,cAAc,EAAE,QAAQ,CAAC,EAAG,WAAW,EAAE,GAAI,WAAW,CAAC;QACrE,CAAC,OAAO,EAAG,MAAM,EACb,QAAQ,CAAC,EAAG,WAAW,EAAE,EAAE,IAAI,CAAC,EAAG,cAAc,GAAI,WAAW,CAAC;KACtE;IA6BD,MAAa,CAAC;QAEZ,OAAO,CAAC,GAAG,CAAwB;oBAEvB,KAAM,WAAW,GAAC,QAAQ;QAI/B,EAAE,CAAC,MAAO,MAAM,EAAE,UAAW,aAAa;QAI1C,GAAG,CAAC,MAAO,MAAM,EAAE,UAAW,aAAa;QAI3C,QAAQ,CAAC,WAAY,MAAM,EAAE,MAAM,CAAC,EAAG,OAAO;QAgB9C,WAAW,CAAC,WAAY,MAAM;KAGtC;IAEM,IAAI,IAAI;;;;;;;;;;;;;;;;;;;;;;;;KAmMd,CAAA;CAEF;AClSD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,MAAM;QACrB,OAAO,EAAG,MAAM,IAAI,CAAC;KACtB;IAED,UAAiB,KAAM,SAAQ,aAAa;QAC1C,GAAG,EAAG,WAAW,CAAC;QAClB,KAAK,EAAG,UAAU,CAAC;QACnB,MAAM,EAAG,MAAM,CAAC;QAChB,UAAU,EAAG,MAAM,MAAM,CAAC;QAC1B,WAAW,EAAG,MAAM,MAAM,CAAC;QAC3B,YAAY,EAAG,CAAC,QAAQ,EAAG,CAAC,IAAI,EAAG;YACjC,GAAG,EAAG,WAAW,CAAC;YAAC,GAAG,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAA;SAAE,KAAK,IAAI,KAAK,IAAI,CAAC;KACrE;IAED,UAAiB,iBAAiB;QAChC,MAAM,EAAG,CAAC,IAAI,EAAG,GAAG,KAAK,IAAI,CAAC;QAC9B,SAAS,EAAG,CAAC,IAAI,EAAG,GAAG,KAAK;YAC1B,KAAK,IAAK,IAAI,CAAC;YACf,OAAO,EAAG,MAAM,CAAC;gBAAE,QAAQ,EAAG,GAAG,CAAC;gBAAC,QAAQ,CAAC,EAAG,GAAG,CAAC;aAAE,GAAG,IAAI,CAAC,CAAC;SAC/D,CAAC;QACF,OAAO,EAAG,MAAM,IAAI,CAAC;KACtB;IAED,UAAiB,SAAS;QACxB,GAAG,EAAG,WAAW,CAAC;QAClB,UAAU,EAAG,UAAU,CAAC;KACzB;IAED,KAAY,wBAAwB,GAClC,CAAC,EAAE,EAAG,SAAS,KAAK,iBAAiB,CAAC;IAExC,UAAiB,cAAc;QAC7B,OAAO,CAAC,EAAG,MAAM,CAAC;QAClB,OAAO,CAAC,EAAG,MAAM,CAAC;QAClB,QAAQ,CAAC,EAAG,OAAO,CAAC;QACpB,UAAU,CAAC,EAAG,MAAM,CAAC;QACrB,SAAS,CAAC,EAAG,MAAM,CAAC;QACpB,SAAS,CAAC,EAAG,MAAM,CAAC;QACpB,aAAa,CAAC,EAAG,MAAM,CAAC;QACxB,KAAK,CAAC,EAAG,MAAM,CAAC;QAChB,eAAe,CAAC,EAAG,MAAM,CAAC;QAC1B,UAAU,CAAC,EAAG,MAAM,CAAC;QACrB,SAAS,CAAC,EAAG,MAAM,CAAC;QACpB,WAAW,CAAC,EAAG,MAAM,CAAC;QACtB,YAAY,CAAC,EAAG,MAAM,CAAC;KACxB;IAED,UAAiB,UAAW,SAAQ,WAAW;QAC7C,gBAAgB,EAAG,MAAM,CAAC;QAC1B,iBAAiB,EAAG,MAAM,CAAC;QAC3B,gBAAgB,EAAG,cAAc,CAAC;QAClC,0BAA0B,EAAG,wBAAwB,CAAC;QACtD,UAAU,EAAG,MAAM,CAAC;QACpB,UAAU,EAAG,MAAM,CAAC;QACpB,YAAY,EAAG,MAAM,CAAC;QACtB,WAAW,EAAG,MAAM,MAAM,CAAC;QAC3B,cAAc,EAAG,MAAM,MAAM,CAAC;QAC9B,YAAY,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,GAAG,CAAC;QACrC,iBAAiB,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,MAAM,CAAC;QAC7C,UAAU,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK,GAAG,CAAC;QACjD,cAAc,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK,cAAc,CAAC;QAChE,wBAAwB,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK,wBAAwB,CAAC;QACpF,cAAc,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,MAAM,CAAC;QAC1C,eAAe,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,MAAM,CAAC;QAC3C,SAAS,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK,SAAS,CAAC;QACtD,WAAW,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK;YAAE,GAAG,EAAG,MAAM,CAAC;YAAC,GAAG,EAAG,MAAM,CAAA;SAAE,CAAC;QAC7E,mBAAmB,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,OAAO,CAAC;QAChD,mBAAmB,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,OAAO,CAAC;KACjD;IAED,UAAiB,SAAU,SAAQ,cAAc;QAC/C,GAAG,EAAG,MAAM,CAAC;QACb,GAAG,EAAG,MAAM,CAAC;QACb,KAAK,EAAG,GAAG,CAAC;QACZ,aAAa,EAAG,CAAC,KAAK,EAAG,GAAG,KAAK,MAAM,CAAC;KACzC;IAED,UAAiB,iBAAiB;QAChC,QAAQ,EAAG,MAAM,CAAC;QAClB,aAAa,CAAC,EAAG,MAAM,CAAC;KACzB;IACD,UAAiB,cAAe,SAAQ,SAAS;QAC/C,SAAS,CAAC,EAAG,MAAM,CAAC;KACrB;IAED,UAAiB,eAAe;KAC/B;IACD,UAAiB,YAAa,SAAQ,SAAS;QAC7C,aAAa,EAAG,GAAG,EAAE,CAAC;KACvB;IAED,UAAiB,gBAAgB;KAChC;IAED,UAAiB,aAAc,SAAQ,SAAS;QAC9C,UAAU,CAAC,EAAG,MAAM,CAAC;QACrB,UAAU,CAAC,EAAG,MAAM,CAAC;QACrB,OAAO,CAAC,EAAG,GAAG,EAAE,GAAG,CAAE,CAAC,GAAG,EAAG,MAAM,EAAC,GAAG,EAAG,MAAM,KAAK,GAAG,EAAE,CAAC,CAAC;KAC5D;IAED,UAAiB,uBAAuB;QACtC,aAAa,CAAC,EAAG,CAAC,KAAK,EAAG,GAAG,EAAE,IAAI,EAAG,UAAU,KAAK,MAAM,CAAC;QAC5D,YAAY,CAAC,EAAG,MAAM,UAAU,CAAC;QACjC,cAAc,CAAC,EAAG,OAAO,CAAC;QAC1B,QAAQ,CAAC,EAAG,MAAM,CAAC;KACpB;IAED,KAAY,UAAU,GAAG,cAAc,GAAC,YAAY,GAAC,aAAa,CAAC;IAEnE,UAAiB,UAAU;QACzB,GAAG,EAAG,WAAW,CAAC;QAClB,SAAS,EAAG,CAAC,EAAE,EAAG,SAAS,EAAE,IAAI,EAAG,UAAU,KAAK,IAAI,CAAC;QACxD,KAAK,EAAG,MAAM,IAAI,CAAC;QACnB,IAAI,EAAG,MAAM,IAAI,CAAC;QAClB,QAAQ,EAAG,CAAC,KAAK,EAAG,GAAG,KAAK,IAAI,CAAC;QACjC,QAAQ,EAAG,MAAM,GAAG,CAAC;QACrB,OAAO,EAAG,MAAM,OAAO,CAAC;KACzB;CAEF;ACtID;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;CAUrB;ACrBD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAqDb,IAAI,SAAS;;;KAAiC,CAAC;IAqV/C,IAAI,sCAAsC,8DA6FhD,CAAA;CAEF;ACpfD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAgVb,IAAI,YAAY,4CAyWtB,CAAA;CAEF;ACtsBD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IAIpB,UAAiB,sBACjB,SAAQ,cAAc,EAAE,uBAAuB;QAE7C,KAAK,CAAC,EAAG,MAAM,CAAC;QAChB,MAAM,CAAC,EAAG,MAAM,CAAC;QAEjB,eAAe,CAAC,EAAG,OAAO,CAAC;QAC3B,eAAe,CAAC,EAAG,OAAO,CAAC;QAE3B,SAAS,CAAC,EAAG,MAAM,CAAC;QAEpB,kEAAkE;QAClE,QAAQ,CAAC,EAAG,MAAM,CAAC;QAEnB,oCAAoC;QACpC,SAAS,CAAC,EAAG,MAAM,CAAC;QAEpB,0BAA0B;QAC1B,aAAa,CAAC,EAAG,MAAM,CAAC;QAExB;;WAEG;QACH,aAAa,CAAC,EAAG,GAAG,EAAE,CAAC;QAEvB,8BAA8B;QAC9B,OAAO,CAAC,EAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK,GAAG,EAAE,CAAC,CAAE,CAAC;QAC9D,UAAU,CAAC,EAAG,MAAM,CAAC;QACrB,UAAU,CAAC,EAAG,MAAM,CAAC;QAErB,OAAO,CAAC,EAAG,wBAAwB,CAAC;KACrC;IAED,UAAiB,4BACjB,SAAQ,sBAAsB;QAC5B,KAAK,CAAC,EAAG,MAAM,CAAC;QAChB,0BAA0B;QAC1B,UAAU,CAAC,EAAG,CAAC,EAAE,EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,KAAK,MAAM,CAAC;KAC9C;IAED,UAAiB,aAAa;QAC5B,UAAU,CAAC,EAAG,MAAM,CAAC;QACrB,KAAK,CAAC,EAAG,4BAA4B,EAAE,EAAE,CAAC;QAC1C,KAAK,CAAC,EAAG,sBAAsB,EAAE,EAAE,CAAC;KACrC;IAED,UAAiB,SAAS;QACxB,GAAG,EAAG,MAAM,CAAC;QACb,kDAAkD;QAClD,GAAG,EAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;KACzB;IAED,UAAiB,kBAAmB,SAAQ,UAAU;QACpD,aAAa,EAAG,aAAa,CAAC;QAC9B,gCAAgC,EAAG,wBAAwB,CAAC;QAC5D,KAAK,EAAG,GAAG,EAAE,CAAC;QACd,aAAa,EAAG,GAAG,EAAE,CAAC;QACtB,WAAW,EAAG,MAAM,IAAI,CAAC;QACzB,SAAS,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,GAAG,CAAC;QAClC,YAAY,EAAG,MAAM,MAAM,CAAC;QAC5B,cAAc,EAAG,CAAC,GAAG,EAAG,MAAM,EAAE,GAAG,EAAG,MAAM,KAAK,SAAS,CAAC;QAC3D,uBAAuB,EAAG,CAAC,GAAG,EAAG,MAAM,KAAK,MAAM,CAAC;QACnD,oBAAoB,EAAG,MAAM,EAAE,CAAC;QAChC,aAAa,EAAG;YAAE,CAAE,UAAU,EAAG,MAAM,GAAK,OAAO,CAAA;SAAE,CAAC;QACtD,QAAQ,EAAG,MAAM,CAAC;KACnB;IAED,UAAiB,iBAAkB,SAAQ,SAAS;QAClD,SAAS,CAAC,EAAG,MAAM,CAAC;QACpB,UAAU,CAAC,EAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,KAAK,MAAM,CAAC;KAC1C;IAED,KAAY,OAAO,GAAG;QAAE,CAAE,KAAK,EAAG,MAAM,GAAK,OAAO,CAAA;KAAE,CAAC;IAEvD,UAAiB,aAAa;QAC5B,IAAI,CAAC,EAAG;YAAE,SAAS,EAAG,MAAM,CAAC;YAAC,SAAS,EAAG,MAAM,CAAC;SAAE,CAAA;QACnD,OAAO,EAAG;YAAE,CAAE,SAAS,EAAG,MAAM,GAAK,OAAO,CAAA;SAAE,CAAC;KAChD;IAED,UAAiB,aAAc,SAAQ,KAAK;QAC1C,gBAAgB,EAAG,OAAO,CAAC;QAC3B,iBAAiB,EAAG,MAAM,CAAC;QAC3B,WAAW,EAAG,CAAC,QAAQ,EAAG,MAAM,KAAK,IAAI,CAAC;KAC3C;CAEF;ACpGD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC;IA2Fb,IAAI,aAAa;;;;;;;;;;;;;;;;;;;;;;;KAEvB,CAAA;CAEF;AC1GD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC,IAAI,CAAC;IAIlB,IAAI,EAAE,EAAG,IAcf,CAAC;CAEH;AC/BD;;;;;;;;;GASG;AAEH,kBAAU,WAAW,CAAC,IAAI,CAAC;IAIlB,IAAI,EAAE,EAAG,IAcf,CAAC;CAEH","file":"comfortable.d.ts","sourcesContent":["/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  class TextEditor implements CellEditor {\n\n    private opts : TextEditorOptions;\n    private valueType : string;\n\n    constructor(opts : TextEditorOptions) {\n      this.opts = opts;\n    }\n\n    public $el = util.createElement('input', {\n      attrs : { type : 'text', 'class' : '${prefix}-editor' }\n    });\n\n    private _$el = <HTMLInputElement>this.$el;\n\n    public beginEdit(td : TdWrapper, cell : TextEditorCell) {\n      var cs = window.getComputedStyle(td.$el, null);\n      var opts : ElementOptions = {\n          props : {},\n          style : {\n            textAlign : cs.textAlign,\n            verticalAlign : cs.verticalAlign,\n            color : cs.color,\n            backgroundColor : cs.backgroundColor,\n            fontFamily : cs.fontFamily,\n            fontSize : cs.fontSize,\n            fontWeight : cs.fontWeight\n          }\n        };\n      if (typeof cell.maxLength == 'number') {\n        (<any>opts.props).maxLength = cell.maxLength;\n      }\n      util.set(this.$el, opts);\n    }\n    public focus() {\n      this.$el.focus();\n      this._$el.select();\n    }\n    public blur() {\n      this.$el.blur();\n    }\n    public setValue(value : any) {\n      this._$el.value = value;\n      this.valueType = typeof value;\n    }\n    public getValue() {\n      if (this.opts.dataType == 'number') {\n        var value = util.formatNumber(\n            util.toNarrowNumber(this._$el.value),\n            this.opts.decimalDigits, '');\n        return this.valueType == 'number'? +value : value;\n      }\n      return this._$el.value;\n    }\n    public isValid() {\n      if (this.opts.dataType == 'number') {\n        return !!util.toNarrowNumber(\n          <string>this.getValue() ).match(util.numRe);\n      }\n      return true;\n    }\n  }\n\n  class CheckBox implements CellEditor {\n\n    private opts : CheckBoxOptions;\n    private booleanValues : any[] = null;\n\n    constructor(opts : CheckBoxOptions) {\n      this.opts = opts;\n    }\n\n    public $el = util.createElement('input', {\n      attrs : { type : 'checkbox', 'class' : '${prefix}-editor' }\n    });\n\n    private _$el = <HTMLInputElement>this.$el;\n\n    public beginEdit(td : TdWrapper, cell : CheckBoxCell) {\n      var cs = window.getComputedStyle(td.$el, null);\n      util.set(this.$el, {\n        style : {\n        }\n      });\n      this.booleanValues = cell.booleanValues || [false, true];\n    }\n    public focus() {\n      this.$el.focus();\n    }\n    public blur() {\n      this.$el.blur();\n    }\n    public setValue(value : any) {\n      this._$el.checked = (value === this.booleanValues[1]);\n    }\n    public getValue() {\n      return this.booleanValues[this._$el.checked? 1 : 0];\n    }\n    public isValid() {\n      return true;\n    }\n  }\n\n  class SelectBox implements CellEditor {\n\n    private opts : SelectBoxOptions;\n\n    constructor(opts : SelectBoxOptions) {\n      this.opts = opts;\n    }\n\n    public $el = util.createElement('select', {\n      attrs : { 'class' : '${prefix}-editor' }\n    });\n\n    private _$el = <HTMLSelectElement>this.$el;\n\n    public beginEdit(td : TdWrapper, cell : SelectBoxCell) {\n      var cs = window.getComputedStyle(td.$el, null);\n      util.set(this.$el, {\n        style : {\n          textAlign : cs.textAlign,\n          verticalAlign : cs.verticalAlign,\n          color : cs.color,\n          backgroundColor : cs.backgroundColor,\n          fontFamily : cs.fontFamily,\n          fontSize : cs.fontSize,\n          fontWeight : cs.fontWeight\n        }\n      });\n      var options = SelectBox.getOptions(cell);\n      while (this.$el.childNodes.length < options.length) {\n        this.$el.appendChild(util.createElement('option') );\n      }\n      var labelField = cell.labelField || 'label';\n      var valueField = cell.valueField || 'value';\n      var i = 0;\n      for (; i < options.length; i += 1) {\n        var option = options[i];\n        util.set(this.$el.childNodes[i], {\n          style : { display : '' },\n          props : { textContent : option[labelField],\n            value : option[valueField] }\n        });\n      }\n      while (this.$el.childNodes.length > options.length) {\n        this.$el.removeChild(this.$el.lastChild);\n      }\n      // IE9 does not support style.display=none.\n      /*\n      for (;i < select.childNodes.length; i += 1) {\n        select.childNodes[i].style.display = 'none';\n      }\n      */\n    }\n    public focus() {\n      this.$el.focus();\n    }\n    public blur() {\n      this.$el.blur();\n    }\n    public setValue(value : any) {\n      this._$el.value = value;\n    }\n    public getValue() {\n      return this._$el.value;\n    }\n    public isValid() {\n      return true;\n    }\n\n    public static getOptions(cell : SelectBoxCell) : any[] {\n      var options : any = cell.options;\n      if (typeof options == 'function') {\n        options = options(cell.row, cell.col);\n      }\n      return options || [];\n    }\n  }\n\n  export var createDefaultCellRendererFactoryOpts =\n      function() : CellRendererFactoryOpts {\n    return {\n      // value to label\n      labelFunction : function(value, cell) {\n\n        if (typeof cell.labelFunction == 'function') {\n\n          return cell.labelFunction(value);\n\n        } else if (value === null || typeof value == 'undefined') {\n\n          return '';\n\n        } else if (this.dataType == 'number') {\n\n          return util.formatNumber(value, this.decimalDigits);\n\n        } else if (this.dataType == 'select-one') {\n\n          var options = SelectBox.getOptions(cell);\n          if (typeof options.splice != 'function') {\n            // not an Array.\n            return options[value] || '';\n          }\n\n          var labelField = (<SelectBoxCell>cell).labelField || 'label';\n          var valueField = (<SelectBoxCell>cell).valueField || 'value';\n          for (var i = 0; i < options.length; i += 1) {\n            var option = options[i];\n            if (option[valueField] == value) {\n              return option[labelField];\n            }\n          }\n          return '';\n \n        } else {\n\n          // by default, to string.\n          return '' + value;\n\n        }\n      },\n      // create a editor\n      createEditor : function() {\n        if (this.dataType == 'select-one') {\n          return new SelectBox(this);\n        } else if (this.dataType == 'boolean') {\n          return new CheckBox(this);\n        }\n        return new TextEditor(this);\n      }\n    };\n  };\n\n  export var createDefaultCellRendererFactory =\n      function(opts? : CellRendererFactoryOpts) :\n        TableCellRendererFactory {\n\n    opts = util.extend(createDefaultCellRendererFactoryOpts(), opts || {});\n\n    return function(td : TdWrapper) : TableCellRenderer {\n\n      var labelRenderer = createMultiLineLabelRenderer(td.$el);\n      var editor : CellEditor = null;\n      var oldValue : any = null;\n\n      var beginEdit = function(cell : EditorCell) {\n        if (editor == null) {\n          editor = opts.createEditor();\n          td.$el.appendChild(editor.$el);\n        }\n        labelRenderer.setVisible(false);\n        editor.beginEdit(td, cell);\n        editor.$el.style.display = '';\n        editor.setValue(oldValue = cell.value);\n      };\n\n      var renderIsEditor = opts.renderIsEditor;\n      if (typeof renderIsEditor == 'undefined') {\n        renderIsEditor = opts.dataType == 'boolean' ||\n          opts.dataType == 'select-one';\n      }\n\n      return {\n        render : function(cell) {\n          if (!renderIsEditor) {\n            labelRenderer.setLabel(opts.labelFunction(cell.value, cell) );\n            if (opts.dataType == 'number') {\n              td.$el.style.textAlign = 'right';\n            }\n          } else {\n            beginEdit(cell);\n          }\n        },\n        beginEdit : function(cell) {\n          beginEdit(cell);\n          return {\n            focus : function() {\n              editor.focus();\n            },\n            endEdit : function() {\n              if (!renderIsEditor) {\n                labelRenderer.setVisible(true);\n                editor.$el.style.display = 'none';\n              } else {\n                editor.blur();\n              }\n              return { oldValue : oldValue,\n                newValue : editor.isValid()? editor.getValue() : oldValue };\n            }\n          };\n        },\n        dispose : function() {\n        }\n      };\n    };\n  };\n\n  var linesRe = /\\r?\\n/g;\n\n  export var createMultiLineLabelRenderer = function(parent : HTMLElement) {\n    var elms : HTMLElement[] = null;\n    return {\n      setLabel : function(label : string) {\n        if (elms == null) {\n          elms = [ document.createElement('span') ];\n          parent.appendChild(elms[0]);\n        }\n        var lines = label.split(linesRe);\n        elms[0].textContent = lines[0];\n        var elmIndex = 1;\n        for (var i = 1; i < lines.length; i += 1) {\n          if (elmIndex + 1 >= elms.length) {\n            elms.push(document.createElement('br') );\n            elms.push(document.createElement('span') );\n            parent.appendChild(elms[elmIndex]);\n            parent.appendChild(elms[elmIndex + 1]);\n          }\n          elms[elmIndex].style.display = '';\n          elms[elmIndex + 1].style.display = '';\n          elms[elmIndex + 1].textContent = lines[i];\n          elmIndex += 2;\n        }\n        for (; elmIndex < elms.length; elmIndex += 1) {\n          elms[elmIndex].style.display = 'none';\n        }\n      },\n      setVisible : function(visible : boolean) {\n        if (elms != null) {\n          for (var i = 0; i < elms.length; i += 1) {\n            elms[i].style.display = visible? '' : 'none';\n          }\n        }\n      }\n    };\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface Event {\n    type : string;\n    target? : any;\n    currentTarget? : any;\n    preventDefault? : () => void;\n    which? : number;\n    defaultPrevented? : boolean;\n    pageX? : number;\n    pageY? : number;\n  }\n\n  export type EventListener = (event : Event, detail? : any) => void;\n\n  export interface EventTarget {\n    trigger : (type : string, detail? : any) => EventTarget;\n    on : (type : string, listener : EventListener) => EventTarget;\n    off : (type : string, listener : EventListener) => EventTarget;\n  }\n\n  export class EventTargetImpl implements EventTarget {\n    private map : { [ type : string ] : EventListener[] } = {};\n    private listeners(type : string) : EventListener[] {\n       return this.map[type] || (this.map[type] = []);\n    }\n    public trigger(type : string, detail? : any) {\n      var ctx = this;\n      (this.listeners(type)).forEach(function(listener : EventListener) {\n        listener.call(ctx, { type : type }, detail);\n      });\n      return this;\n    }\n    public on(type : string, listener : EventListener) {\n      this.listeners(type).push(listener);\n      return this;\n    }\n    public off(type : string, listener : EventListener) {\n      this.map[type] = this.listeners(type).filter(function(l : EventListener) {\n        return listener != l;\n      });\n      return this;\n    }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"EventTarget.ts\" />\n\nnamespace comfortable {\n\n  'use strict';\n\n  export class DefaultTableModel extends EventTargetImpl implements TableModel {\n    public defaultCellWidth = 100;\n    public defaultCellHeight = 28;\n    public defaultCellStyle = { rowSpan : 1, colSpan : 1, editable : true };\n    public defaultCellRendererFactory = createDefaultCellRendererFactory();\n    public maxRowSpan = 8;\n    public maxColSpan = 8;\n    public minCellWidth = 8;\n    public getRowCount() { return 1E5; }\n    public getColumnCount() { return 1E5; }\n    public getLineRowAt(row : number) { return row; }\n    public getLineRowCountAt(row : number) { return this.getRowCount(); }\n    public getValueAt(row : number, col : number) { return row + ',' + col; }\n    public getCellStyleAt(row : number, col : number) { return {}; }\n    public getCellRendererFactoryAt(row : number, col : number) { return this.defaultCellRendererFactory; }\n    public getCellWidthAt(col : number) { return this.defaultCellWidth; }\n    public getCellHeightAt(row : number) { return this.defaultCellHeight; }\n    public getCellAt(row : number, col : number) {\n      return util.extend({\n          row : row, col : col, value : this.getValueAt(row, col) },\n          this.defaultCellStyle, this.getCellStyleAt(row, col) );\n    }\n    public checkSpaned(row : number, col : number) {\n      var minRow = Math.max(0, row - this.maxRowSpan);\n      var minCol = Math.max(0, col - this.maxColSpan);\n      for (var r = row; r >= minRow; r -= 1) {\n        for (var c = col; c >= minCol; c -= 1) {\n          if (r != row || c != col) {\n            var cell = this.getCellAt(r, c);\n            if (row < r + cell.rowSpan && col < c + cell.colSpan) {\n              return { row : r, col : c };\n            }\n          }\n        }\n      }\n      return null;\n    }\n    public isColumnResizableAt(col : number) { return true; }\n    public isColumnDraggableAt(col : number) { return true; }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.i18n {\n\n  'use strict';\n\n  export interface I18N {\n    messages : Messages\n  }\n\n  export interface Messages {\n    RESET_FILTER : string;\n    EDIT_COLUMNS : string;\n    SORT_ASC : string;\n    SORT_DESC : string;\n    APPLY : string;\n    OK : string;\n    CANCEL : string;\n    RESET : string;\n    LOCK_COLUMN : string;\n    SELECT_BLANK : string;\n    SELECT_ALL : string;\n  }\n\n  export var getInstance = function(lang : string) {\n    lang = lang || navigator.language || (<any>navigator).userLanguage;\n    var _i18n : any = i18n;\n    return <I18N>(util.extend({}, _i18n.en, _i18n[lang] ||\n        _i18n[lang.replace(/\\-\\w+$/, '')] || {}) );\n  }\n\n  export var getMessages = function() : Messages {\n    return util.extend(\n        this.getInstance('en').messages,\n        this.getInstance().messages);\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"EventTarget.ts\" />\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface UIEventTarget extends EventTarget {\n    invalidate : () => void;\n    render : () => void;\n  }\n\n  export class UIEventTargetImpl\n  extends EventTargetImpl implements UIEventTarget {\n    public valid = true;\n    public invalidate() {\n      this.valid = false;\n      util.callLater(function() {\n        if (!this.valid) {\n          this.valid = true;\n          this.render();\n        }\n      }.bind(this) );\n    }\n    public render() {\n    }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"UIEventTarget.ts\" />\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface ElmCache {\n    $el : HTMLElement;\n    tableModel? : TableModel; \n    row? : number;\n    col? : number;\n    children? : ElmCache[];\n    renderer? : TableCellRenderer;\n    factory? : TableCellRendererFactory;\n  }\n\n  export interface TableState {\n    left : number;\n    top : number;\n    width : number;\n    height : number;\n    minRow : number;\n    maxRow : number;\n    minCol : number;\n    maxCol : number;\n    indexById : { [id : string] : { trIndex : number, tdIndex : number} };\n  }\n\n  export interface OffsetCache {\n    left : { [i : number] : number };\n    top : { [i : number] : number };\n  }\n\n  export interface InternalTable {\n    $el : HTMLElement;\n    left : number;\n    top : number;\n    colgroup : ElmCache;\n    tbody : ElmCache;\n    row? : number;\n    col? : number;\n    model : TableModel;\n    tableState : TableState;\n    beforeCellSizeChangeHandler : EventListener;\n    offsetCache : OffsetCache;\n    calcCellPosition : (left : number, top : number) => {\n      left : number, top : number, row : number, col : number};\n    preRender : () => TableState;\n    render : () => void;\n  }\n\n  var createTableState = function() : TableState {\n    return {\n      left : 0, top : 0, width : 0, height : 0,\n      minRow : 0, maxRow : 0, minCol : 0, maxCol : 0,\n      indexById : {}\n    };\n  }\n\n  export class InternalTableImpl implements InternalTable {\n\n    private _colgroup = util.createElement('colgroup');\n    private _tbody = util.createElement('tbody');\n\n    private table = util.createElement('table', {\n        attrs : { cellspacing : '0' },\n        style : {\n          tableLayout : 'fixed', position : 'absolute', lineHeight : '1'\n        }\n      }, <HTMLElement[]>[ this._colgroup, this._tbody ]);\n    private view = util.createElement('div', {\n      style : { overflow : 'hidden', position : 'relative' },\n      on : { scroll : (event) => {\n         this.view.scrollLeft = 0;  this.view.scrollTop = 0; } }\n    }, [ this.table ]);\n\n    private getOrCrt(tagName : string, index : number,\n        parent : ElmCache, init? : (elm : ElmCache) => void ) {\n      if (parent.children && index < parent.children.length) {\n        return parent.children[index];\n      }\n      if (!parent.children) {\n        parent.children = [];\n      }\n      var elm : ElmCache = { $el : document.createElement(tagName) };\n      if (init) {\n        init(elm);\n      }\n      parent.$el.appendChild(elm.$el);\n      parent.children.push(elm);\n      return elm;\n    }\n\n    private getCellStyle(cell : TableCellStyle) : ElementOptions {\n      return {\n        attrs : { 'class' : cell.className },\n        style : {\n          textAlign : cell.textAlign,\n          verticalAlign : cell.verticalAlign,\n          color : cell.color,\n          backgroundColor : cell.backgroundColor,\n          fontWeight : cell.fontWeight,\n          borderLeft : cell.borderLeft,\n          borderRight : cell.borderRight,\n          borderTop : cell.borderTop,\n          borderBottom : cell.borderBottom\n        }\n      };\n    }\n    public $el = this.view;\n    public colgroup : ElmCache = { $el : this._colgroup };\n    public tbody : ElmCache = { $el : this._tbody };\n    public left = 0;\n    public top = 0;\n    public model : TableModel = null;\n    public tableState = createTableState();\n\n    public offsetCache : OffsetCache = null;\n    public beforeCellSizeChangeHandler : EventListener = null;\n    public calcCellPosition(left : number, top : number) {\n\n      var tableModel : TableModel = this.model;\n\n      // offset cache\n      if (this.beforeCellSizeChangeHandler == null) {\n        this.beforeCellSizeChangeHandler = (event : Event, detail : any) => {\n          // note: 'this' bind to inner-table's.\n          this.offsetCache = null;\n        };\n      }\n      tableModel.off('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      tableModel.on('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      this.offsetCache = this.offsetCache || { left : {}, top : {} };\n      var prec = 1000;\n      var offsetLeftCache : {[i : number] : number} = this.offsetCache.left;\n      var offsetTopCache : {[i : number] : number} = this.offsetCache.top;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n\n      var rowCount = tableModel.getRowCount();\n      var columnCount = tableModel.getColumnCount();\n      var cellWidth = 0;\n      var cellHeight = 0;\n      var col = 0;\n      var row = 0;\n\n      var leftCache : { col : number, offset : number } = null;\n      var topCache : { row : number, offset : number } = null;\n      for (var i = 0; typeof offsetLeftCache[i] == 'number'; i += prec) {\n        if (left + offsetLeftCache[i] <= 0) {\n          leftCache = { col : i, offset : offsetLeftCache[i] };\n        }\n      }\n      for (var i = 0; typeof offsetTopCache[i] == 'number'; i += prec) {\n        if (top + offsetTopCache[i] <= 0) {\n          topCache = { row : i, offset : offsetTopCache[i] };\n        }\n      }\n      if (leftCache) {\n        col = leftCache.col;\n        left += leftCache.offset;\n        offsetLeft += leftCache.offset;\n      }\n      if (topCache) {\n        row = topCache.row;\n        top += topCache.offset;\n        offsetTop += topCache.offset;\n      }\n\n      for (; col < columnCount; col += 1,\n          left += cellWidth, offsetLeft += cellWidth) {\n        if (col % prec == 0) {\n          offsetLeftCache[col] = offsetLeft;\n        }\n        cellWidth = tableModel.getCellWidthAt(col);\n        if (left + cellWidth <= 0) {\n          continue;\n        }\n        break;\n      }\n      for (; row < rowCount; row += 1,\n          top += cellHeight, offsetTop += cellHeight) {\n        if (row % prec == 0) {\n          offsetTopCache[row] = offsetTop;\n        }\n        cellHeight = tableModel.getCellHeightAt(row);\n        if (top + cellHeight <= 0) {\n          continue;\n        }\n        break;\n      }\n      if (row < rowCount && col < columnCount) {\n        var spaned = tableModel.checkSpaned(row, col);\n        if (spaned) {\n          while (row > spaned.row) {\n            row -= 1;\n            top -= tableModel.getCellHeightAt(row);\n          }\n          while (col > spaned.col) {\n            col -= 1;\n            left -= tableModel.getCellWidthAt(col);\n          }\n        }\n      }\n      return { left : left, col : col, top : top, row : row };\n    }\n\n    public preRender() {\n\n      var width = this.$el.offsetWidth;\n      var height = this.$el.offsetHeight;\n      var rowCount = this.model.getRowCount();\n      var columnCount = this.model.getColumnCount();\n\n      var cellPos = this.calcCellPosition(this.left, this.top);\n\n      var tableState = createTableState();\n      tableState.top = cellPos.top;\n      tableState.minRow = cellPos.row;\n      tableState.left = cellPos.left;\n      tableState.minCol = cellPos.col;\n\n      var top = cellPos.top;\n      var row = cellPos.row;\n      var trIndex = 0;\n      while (row < rowCount && top < height) {\n        var cellHeight = this.model.getCellHeightAt(row);\n        this.getOrCrt('tr', trIndex, this.tbody).\n          $el.style.height = cellHeight + 'px';\n        tableState.height += cellHeight;\n        top += cellHeight;\n        row += 1;\n        trIndex += 1;\n      }\n      for (;trIndex < this._tbody.childNodes.length; trIndex += 1) {\n        (<HTMLElement>this._tbody.childNodes[trIndex]).style.height = '0px';\n      }\n      tableState.maxRow = Math.min(rowCount, tableState.minRow +\n          (this.tbody.children? this.tbody.children.length : 0) ) - 1;\n\n      var left = cellPos.left;\n      var col = cellPos.col;\n      var colIndex = 0;\n      while (col < columnCount && left < width) {\n        var cellWidth = this.model.getCellWidthAt(col);\n        this.getOrCrt('col', colIndex, this.colgroup).\n          $el.style.width = cellWidth + 'px';\n        tableState.width += cellWidth;\n        left += cellWidth;\n        col += 1;\n        colIndex += 1;\n      }\n      for (;colIndex < this._colgroup.childNodes.length; colIndex += 1) {\n        (<HTMLElement>this._colgroup.childNodes[colIndex]).style.width = '0px';\n      }\n      tableState.maxCol = Math.min(columnCount, tableState.minCol +\n          (this.colgroup.children? this.colgroup.children.length : 0) ) - 1;\n\n      return tableState;\n    }\n\n    public render() {\n\n      var tableState = this.preRender();\n      var spaned : { [id : string] : boolean } = {};\n\n      var setSpaned = function(row : number, col : number,\n          td : HTMLTableDataCellElement, cell : TableCellStyle) {\n        td.rowSpan = cell.rowSpan;\n        td.colSpan = cell.colSpan;\n        if (cell.rowSpan == 1 && cell.colSpan == 1) {\n          return;\n        }\n        for (var r = 0; r < cell.rowSpan; r += 1) {\n          for (var c = 0; c < cell.colSpan; c += 1) {\n            if (r != 0 || c != 0) {\n              var id = util.getCellId(row + r, col + c);\n              spaned[id] = true;\n            }\n          }\n        }\n      };\n\n      var tableModel : TableModel = this.model;\n      var initCell = function(td : ElmCache) {\n        td.renderer = null;\n        td.tableModel = tableModel;\n        td.$el.style.overflow = 'hidden';\n        td.$el.style.whiteSpace = 'nowrap';\n      };\n\n      for (var row = tableState.minRow; row <= tableState.maxRow; row += 1) {\n\n        var trIndex = row - tableState.minRow;\n        var tr = this.tbody.children[trIndex];\n\n        var tdIndex = 0;\n        for (var col = tableState.minCol; col <= tableState.maxCol; col += 1) {\n\n          var id = util.getCellId(row, col);\n          if (spaned[id]) {\n            continue;\n          }\n          tableState.indexById[id] = { trIndex : trIndex, tdIndex : tdIndex };\n\n          var td = this.getOrCrt('td', tdIndex, tr, initCell);\n          td.row = row;\n          td.col = col;\n\n          var cell = tableModel.getCellAt(row, col);\n          setSpaned(row, col, <HTMLTableDataCellElement>td.$el, cell);\n\n          var factory = tableModel.getCellRendererFactoryAt(row, col);\n          if (td.factory != factory) {\n            td.factory = factory;\n            if (td.renderer) {\n              td.renderer.dispose();\n            }\n            td.$el.innerHTML = '';\n            td.renderer = td.factory(<TdWrapper>td);\n          }\n\n          util.set(td.$el, this.getCellStyle(cell) );\n          td.renderer.render(cell);\n\n          tdIndex += 1;\n        }\n      }\n\n      util.extend(this.table.style, {\n        left : tableState.left + 'px',\n        top : tableState.top + 'px',\n        width : tableState.width + 'px',\n        height : tableState.height + 'px'\n      });\n\n      this.tableState = tableState;\n    }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"UIEventTarget.ts\" />\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface List<T,C extends ListCell> extends UIEventTarget {\n    $el : HTMLElement;\n    getItemAt : (index : number) => T;\n    getItemCount : () => number;\n    createCell : () => C;\n    renderCell : (cell : C, item : T) => void;\n    cellHeight : number;\n  }\n\n  export interface ListCell {\n    $el : HTMLElement;\n    row : number;\n  }\n\n  export class ListImpl<T,C extends ListCell>\n  extends UIEventTargetImpl implements List<T,C> {\n\n    private listContent = util.createElement('div', {\n      style : { position : 'absolute' } });\n    private list = { $el :  util.createElement('div', {\n      style : { position : 'absolute',\n        overflow : 'hidden', whiteSpace:'nowrap' } }, [ this.listContent ]) };\n\n    private scr = util.createElement('div', {\n      style : { position : 'absolute' } });\n\n    private viewPane = util.createElement('div', {\n        style : { position : 'absolute',\n          overflowX : 'hidden', overflowY : 'auto' },\n        on : { scroll : (event) => { this.render(); } }\n      }, [this.scr]);\n  \n    private frame = util.createElement('div', {\n        style : { position : 'relative', overflow : 'hidden',\n          width : '100px', height : '100px' },\n        on : {\n          wheel : (event) => {\n            this.viewPane.scrollLeft += event.deltaX;\n            this.viewPane.scrollTop += event.deltaY;\n          }\n        } },[ this.viewPane, this.list.$el ]);\n\n    private cells : C[] = [];\n    private getOrCrt(index : number) {\n      if (index < this.cells.length) {\n        return this.cells[index];\n      }\n      var cell = this.createCell();\n      this.listContent.appendChild(cell.$el);\n      this.cells.push(cell);\n      return cell;\n    };\n\n    public $el = this.frame;\n    public getItemAt(index : number) : T { return <any>'item' + index; }\n    public getItemCount() { return 100000; }\n    public createCell() : C {\n      return <any>{ $el : util.createElement('div', {\n        props : { textContent : 'M' },\n        style : { borderBottom : '1px solid silver' }\n      }), row : -1 };\n    }\n    public renderCell(cell : C, item : T) {\n      cell.$el.textContent = <any>item;\n    }\n    public cellHeight = -1;\n    public render() {\n\n      util.set(this.viewPane, { style : {\n        left : '0px', top : '0px',\n        width : this.$el.offsetWidth + 'px',\n        height : this.$el.offsetHeight + 'px'\n      } });\n\n      if (this.cellHeight == -1) {\n        this.cellHeight = this.getOrCrt(0).$el.offsetHeight;\n      }\n      var viewHeight = this.cellHeight * this.getItemCount();\n      var scrHeight = Math.min(viewHeight, 1E6);\n\n      var listTop = -(scrHeight > this.viewPane.clientHeight?\n          util.translate(this.viewPane.scrollTop,\n          0, scrHeight - this.viewPane.clientHeight,\n          0, viewHeight - this.viewPane.clientHeight,\n          'list.top') : 0);\n\n      var minRow = Math.floor(-listTop / this.cellHeight);\n      var maxRow = Math.min(this.getItemCount() - 1,\n          Math.floor( (-listTop + this.viewPane.clientHeight) / this.cellHeight) );\n      var top = listTop + minRow * this.cellHeight;\n\n      util.set(this.listContent, { style : { left : '0px', top : top + 'px' } });\n\n      var cellIndex = 0;\n      for (var row = minRow; row <= maxRow; row += 1) {\n        var cell = this.getOrCrt(cellIndex);\n        cell.row = row;\n        cell.$el.style.display = '';\n        this.renderCell(cell, this.getItemAt(row) );\n        cellIndex += 1;\n      }\n      for (; cellIndex < this.cells.length; cellIndex += 1) {\n        this.cells[cellIndex].$el.style.display = 'none';\n      }\n\n      util.set(this.scr, { style : {\n        left : '0px', top : '0px',\n        width : this.$el.offsetWidth + 'px',\n        height : scrHeight + 'px'\n      } });\n\n      util.set(this.list.$el, { style : {\n        whiteSpace : 'nowrap',\n        width : this.viewPane.clientWidth + 'px',\n        height : this.viewPane.clientHeight + 'px'\n      } });\n\n      this.trigger('rendered', {\n        listState : { minRow : minRow, maxRow : maxRow } } );\n    }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  export var classNamePrefix = 'ctj';\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"UIEventTarget.ts\" />\n\nnamespace comfortable {\n\n  'use strict';\n\n  interface CellRect {\n    left : number;\n    top : number;\n    width : number;\n    height : number;\n  }\n\n  interface CellSizeCache {\n    viewWidth : number;\n    viewHeight : number;\n    rects : CellRect[];\n    rowCount : number;\n    columnCount :number;\n    lockTop : number;\n    lockLeft : number;\n    width : number;\n    height : number;\n  }\n\n  interface RenderParams {\n    width : number;\n    height : number;\n    rects : CellRect[],\n    viewWidth : number;\n    viewHeight : number;\n    scrWidth : number;\n    scrHeight : number;\n  }\n\n  interface TargetColumn {\n    colFrom : number;\n    colTo : number;\n    i : number;\n    left : number;\n    distance : number;\n  }\n\n  interface ColResizeHandle {\n    $el : HTMLElement;\n    col? : number;\n    left? : number;\n  }\n\n  export interface InternalEditor extends Editor {\n    cell? : { row : number, col : number };\n    beginEdit : (row : number, col : number, makeVisible? : boolean) => void;\n    endEdit : () => void;\n  }\n\n  export var tableEventTypes = [\n    'mousedown', 'mouseover', 'mouseout',\n    'click', 'dblclick', 'contextmenu' ];\n\n  export var createTable = function() : Table {\n    return new TableImpl(new DefaultTableModel() );\n  }\n\n  export class TableImpl extends UIEventTargetImpl implements Table {\n\n    constructor(model : TableModel) {\n      super();\n      this.model = model;\n    }\n\n    private tables = ( () => {\n      var tables : InternalTable[] = [];\n      for (var i = 0; i < 4; i += 1) {\n        tables.push(new InternalTableImpl() );\n      }\n\n      tables.forEach( (table, i) => {\n        table.row = ~~(i / 2);\n        table.col = i % 2;\n        var cellEventHandler = function(handler :\n            (event : Event, td : ElmCache) => void) : EventListener {\n          return function(event) {\n            var col = util.indexOf(util.closest(event.target,\n                { tagName : 'TD', root : table.$el }) );\n            var row = util.indexOf(util.closest(event.target,\n                { tagName : 'TR', root : table.$el }) );\n            if (col != -1 && row != -1) {\n              handler(event, table.tbody.children[row].children[col]);\n            }\n          };\n        };\n        var delegateHandler = cellEventHandler( (event, td) => {\n          this.trigger(event.type,\n              { originalEvent : event, row : td.row, col : td.col }); });\n        var delegates : {[type : string] : EventListener} = {};\n        tableEventTypes.forEach(function(type) {\n          delegates[type] = delegateHandler;\n        });\n        util.set(table.$el, {\n          on : delegates\n        });\n        util.set(table.$el, {\n          style : { position : 'absolute' },\n          on : {\n            mousedown: cellEventHandler( (event, td) => {\n              if (event.which != 1) {\n                return;\n              }\n              if (td.row < this.getLockTop() &&\n                  this.model.isColumnDraggableAt(td.col) &&\n                  !event.defaultPrevented) {\n                event.preventDefault();\n                var mousemoveHandler = (event : Event) => {\n                  updateMarker(event.pageX - dragPoint.x);\n                };\n                var mouseupHandler = (event : Event) => {\n                  util.$(document).off('mousemove', mousemoveHandler).\n                    off('mouseup', mouseupHandler);\n                  this.frame.removeChild(dragProxy);\n                  this.frame.removeChild(marker);\n                  if (targetColumn != null) {\n                    tableModel.trigger('columndragged', {\n                      colFrom : targetColumn.colFrom,\n                      colSpan : cell.colSpan,\n                      colTo : targetColumn.colTo });\n                    this.invalidate();\n                  }\n                };\n                util.$(document).on('mousemove', mousemoveHandler).\n                  on('mouseup', mouseupHandler);\n                var getTargetColumn = (centerX : number) => {\n                  var targetColumn : TargetColumn = null;\n                  tables.forEach( (tbl, i) => {\n                    if (tbl.row == table.row) {\n                      var tableState = tbl.tableState;\n                      var rect = this.getCellSizeCache().rects[i];\n                      var left = rect.left + tableState.left;\n                      for (var col = tableState.minCol; col <= tableState.maxCol; col += 1) {\n                        var distance = Math.abs(left - centerX);\n                        if ( (targetColumn == null ||\n                                distance < targetColumn.distance) &&\n                              !tableModel.checkSpaned(0, col) ) {\n                          targetColumn = { colFrom : colFrom, colTo : col,\n                              i : i, left : left, distance : distance };\n                        }\n                        left += tableModel.getCellWidthAt(col);\n                      }\n                    }\n                  });\n                  return targetColumn;\n                };\n                var updateMarker = function(delta : number) {\n                  var left = getLeft(delta);\n                  targetColumn = getTargetColumn(left + colWidth / 2);\n                  dragProxy.style.left = left + 'px';\n                  marker.style.left = (targetColumn.left - markerStyle.gap - 1) + 'px';\n                };\n                var tableModel = this.model;\n                var tableState = table.tableState;\n                var targetColumn : TargetColumn = null;\n                var rect = this.getCellSizeCache().rects[i];\n                var colFrom = td.col;\n                var spaned = tableModel.checkSpaned(0, colFrom);\n                if (spaned) {\n                  colFrom = spaned.col;\n                }\n                var cell = tableModel.getCellAt(0, colFrom);\n                var colLeft = function() {\n                  var left = 0;\n                  for (var col = tableState.minCol; col < colFrom; col += 1) {\n                    left += tableModel.getCellWidthAt(col);\n                  }\n                  return left;\n                }();\n                var colWidth = function() {\n                  var width = 0;\n                  for (var col = 0; col < cell.colSpan; col += 1) {\n                    width += tableModel.getCellWidthAt(colFrom + col);\n                  }\n                  return width;\n                }();\n                var getLeft = function(delta : number) {\n                  return tableState.left + rect.left + colLeft + delta;\n                };\n                var dragPoint = { x : event.pageX, y : event.pageY };\n                var dragProxy = util.createElement('div', {\n                  attrs : { 'class' : '${prefix}-column-drag-proxy' },\n                  style : { position : 'absolute', top : '0px',\n                    width : colWidth + 'px',\n                    height : rect.height + 'px' }\n                });\n                var markerStyle = { gap : 2 };\n                var marker = util.createElement('div', {\n                  attrs : { 'class' : '${prefix}-column-drag-marker' },\n                  style : { position : 'absolute', top : '0px',\n                    width : (markerStyle.gap * 2 + 1) + 'px',\n                    height : rect.height + 'px' }\n                });\n                updateMarker(0);\n                this.frame.appendChild(dragProxy);\n                this.frame.appendChild(marker);\n                return;\n              }\n              // begin edit by logical row and col\n              if (this.editor.cell != null &&\n                  this.editor.cell.row == td.row &&\n                  this.editor.cell.col == td.col) {\n              } else if (this.isEditableAt(td.row, td.col) ) {\n                event.preventDefault();\n                this.editor.beginEdit(td.row, td.col, true);\n              }\n            })\n          }\n        } );\n      });\n\n      return tables;\n    })();\n\n    private scr = util.createElement('div', {\n        style : { position : 'absolute' } });\n\n    private viewPane = util.createElement('div', {\n        style : { position : 'absolute', overflow : 'auto' },\n        on : { scroll : (event) => { this.render(); } }\n      }, [this.scr]);\n\n    private frame = util.createElement('div', {\n        style : { position : 'relative', overflow : 'hidden',\n          width : '400px', height : '200px' },\n        on : {\n          mousedown : (event) => {\n            if (util.closest(event.target, { $el : this.viewPane, root : this.frame }) ) {\n              this.editor.endEdit();\n              this.render();\n            }\n          },\n          keydown : (event) => {\n            switch(event.keyCode) {\n            case 9 : // Tab\n              event.preventDefault();\n              this.move({ row : 0, col : event.shiftKey? -1 : 1 });\n              break;\n            case 13 : // Enter\n              event.preventDefault();\n              this.move({ row : event.shiftKey? -1 : 1, col : 0 });\n              break;\n            }\n          },\n          wheel : (event) => {\n            this.viewPane.scrollLeft += event.deltaX;\n            this.viewPane.scrollTop += event.deltaY;\n          }\n        }\n      }, [this.viewPane].concat(\n          this.tables.map(function(table) { return table.$el; }) ) );\n\n    private lockLines : HTMLElement[] = [];\n    private colResizeHandles : ColResizeHandle[] = [];\n\n    private getCellRect(row : number, col : number) {\n      var tableModel = this.tables[3].model;\n      var left = 0;\n      var top = 0;\n      for (var r = 0; r < row; r += 1) {\n        top += tableModel.getCellHeightAt(r);\n      }\n      for (var c = 0; c < col; c += 1) {\n        left += tableModel.getCellWidthAt(c);\n      }\n      return { left : left, top : top,\n        width : tableModel.getCellWidthAt(col),\n        height : tableModel.getCellHeightAt(row) };\n    }\n    private makeVisible(renderParams : RenderParams, row : number, col : number) {\n      var cornerRect = renderParams.rects[0];\n      var scrollRect = renderParams.rects[3];\n      var delta = { left : 0, top : 0 };\n      var cellRect = this.getCellRect(row, col);\n      var left = cellRect.left + this.tables[3].left;\n      var top = cellRect.top + this.tables[3].top;\n      if (left < 0) {\n        delta.left = left;\n      } else if (left + cellRect.width > scrollRect.width) {\n        delta.left = left + cellRect.width - scrollRect.width;\n      }\n      if (top < 0) {\n        delta.top = top;\n      } else if (top + cellRect.height > scrollRect.height) {\n        delta.top = top + cellRect.height - scrollRect.height;\n      }\n      var scroll = {\n        left : renderParams.viewWidth > this.viewPane.clientWidth?\n            util.translate(-this.tables[3].left + delta.left,\n            cornerRect.width,\n            cornerRect.width + renderParams.viewWidth - this.viewPane.clientWidth,\n            0, renderParams.scrWidth - this.viewPane.clientWidth, 'scroll.left') : 0,\n        top : renderParams.viewHeight > this.viewPane.clientHeight?\n            util.translate(-this.tables[3].top + delta.top,\n            cornerRect.height,\n            cornerRect.height + renderParams.viewHeight - this.viewPane.clientHeight,\n            0, renderParams.scrHeight - this.viewPane.clientHeight, 'scroll.top') : 0\n      };\n      if (row >= this.getLockTop() ) {\n        this.viewPane.scrollTop = scroll.top;\n      }\n      if (col >= this.getLockLeft() ) {\n        this.viewPane.scrollLeft = scroll.left;\n      }\n    }\n    private cellSizeCache : CellSizeCache = null;\n    private beforeCellSizeChangeHandler : EventListener = null;\n    private getCellSizeCache() : CellSizeCache {\n      var width = this.$el.clientWidth;\n      var height = this.$el.clientHeight;\n      var tableModel = this.model;\n      if (this.beforeCellSizeChangeHandler == null) {\n        this.beforeCellSizeChangeHandler = (event : Event, detail : any) => {\n          // note: 'this' bind to table's.\n          this.cellSizeCache = null;\n        };\n      }\n      // observe cache size.\n      tableModel.off('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      tableModel.on('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      //\n      var rowCount = tableModel.getRowCount();\n      var columnCount = tableModel.getColumnCount();\n      var lockTop = this.getLockTop();\n      var lockLeft = this.getLockLeft();\n      if (!this.cellSizeCache ||\n          this.cellSizeCache.rowCount != rowCount ||\n          this.cellSizeCache.columnCount != columnCount ||\n          this.cellSizeCache.lockTop != lockTop ||\n          this.cellSizeCache.lockLeft != lockLeft ||\n          this.cellSizeCache.width != width ||\n          this.cellSizeCache.height != height) {\n        var rowPos = [ 0, lockTop, rowCount ];\n        var colPos = [ 0, lockLeft, columnCount ];\n        var cw = colPos.slice(1).map(function() { return 0; });\n        var ch = rowPos.slice(1).map(function() { return 0; });;\n        var idx : number, count : number;\n        idx = colPos.shift();\n        cw.forEach(function(_, i) {\n          for (count = colPos.shift(); idx < count; idx += 1) {\n            cw[i] += tableModel.getCellWidthAt(idx);\n          }\n        });\n        idx = rowPos.shift();\n        ch.forEach(function(_, i) {\n          for (count = rowPos.shift(); idx < count; idx += 1) {\n            ch[i] += tableModel.getCellHeightAt(idx);\n          }\n        });\n        var rects = this.tables.map(function(table) {\n          var rect = { left : 0, top : 0, width : 0, height : 0 };\n          for (var row = 0; row <= table.row; row += 1) {\n            (<any>rect)[row < table.row ? 'top' : 'height'] += ch[row];\n          }\n          for (var col = 0; col <= table.col; col += 1) {\n            (<any>rect)[col < table.col? 'left' : 'width'] += cw[col];\n          }\n          rect.width = Math.max(0, Math.min(rect.width, width - rect.left) );\n          rect.height = Math.max(0, Math.min(rect.height, height - rect.top) );\n          return rect;\n        });\n        this.cellSizeCache = {\n          viewWidth : cw[cw.length - 1],\n          viewHeight : ch[ch.length - 1],\n          rects : rects,\n          rowCount : rowCount, columnCount : columnCount,\n          lockTop : lockTop, lockLeft : lockLeft,\n          width : width, height : height\n        };\n      }\n      return this.cellSizeCache;\n    }\n    private getRenderParams() {\n      var width = this.$el.clientWidth;\n      var height = this.$el.clientHeight;\n      var cellSizeCache = this.getCellSizeCache();\n      var viewWidth = cellSizeCache.viewWidth;\n      var viewHeight = cellSizeCache.viewHeight;\n      var maxScr = 1E6;\n      var scrWidth = Math.min(viewWidth, maxScr);\n      var scrHeight = Math.min(viewHeight, maxScr);\n      return {\n        width : width,\n        height : height,\n        rects : cellSizeCache.rects,\n        viewWidth : viewWidth,\n        viewHeight : viewHeight,\n        scrWidth : scrWidth,\n        scrHeight : scrHeight\n      };\n    }\n    private getTargetTable(row : number, col : number) {\n      return this.tables.filter( (table) => {\n        return table.row == (row < this.getLockTop()? 0 : 1) &&\n          table.col == (col < this.getLockLeft()? 0 : 1);\n      })[0];\n    }\n    private isEditableAt(row : number, col : number) {\n      return this.model.getCellAt(row, col).editable;\n    }\n    private move(offset : { row : number, col : number }) {\n\n      if (this.editor.cell == null) {\n        return;\n      }\n      var row = this.editor.cell.row;\n      var col = this.editor.cell.col;\n      var tableModel = this.model;\n\n      var beginEditIfEditable = () => {\n        if (this.isEditableAt(row, col) ) {\n          this.editor.beginEdit(row, col, true);\n          return true;\n        }\n        return false;\n      };\n\n      var rowCount = tableModel.getRowCount();\n      var columnCount = tableModel.getColumnCount();\n\n      if (offset.row == -1 || offset.row == 1) {\n\n        do {\n          do {\n            var lineRowCount = tableModel.getLineRowCountAt(row);\n            var lineRow = tableModel.getLineRowAt(row);\n            var rowOffset = row - lineRow;\n            lineRow += offset.row;\n            if (lineRow < 0) {\n              lineRow = lineRowCount - 1;\n              col -= 1;\n              if (col < 0) {\n                lineRow = -1;\n                col = columnCount - 1;\n              }\n            } else if (lineRow >= lineRowCount) {\n              lineRow = 0;\n              col += 1;\n              if (col >= columnCount) {\n                lineRow = lineRowCount;\n                col = 0;\n              }\n            }\n            row = rowOffset + lineRow;\n            if (row < 0) {\n              row = rowCount - 1;\n            } else if (row >= rowCount) {\n              row = 0;\n            }\n          } while (tableModel.checkSpaned(row, col) );\n        } while (!beginEditIfEditable() );\n\n      } else if (offset.col == -1 || offset.col == 1) {\n\n        do {\n          do {\n            col += offset.col;\n            if (col < 0) {\n              col = columnCount - 1;\n              row = (row - 1 + rowCount) % rowCount;\n            } else if (col >= columnCount) {\n              col = 0;\n              row = (row + 1) % rowCount;\n            }\n          } while (tableModel.checkSpaned(row, col) );\n        } while (!beginEditIfEditable() );\n      }\n    }\n    private renderColumnResizeHandlers(renderParams : RenderParams) {\n      var mousedownHandler = (event : Event) => {\n        var mouseupHandler = (event : Event) => {\n          util.$(document).off('mousemove', mousemoveHandler).\n            off('mouseup', mouseupHandler);\n          this.frame.removeChild(block);\n          util.set(handle.$el.childNodes[0],\n              { style : { display : 'none' } });\n          var deltaX = event.pageX - dragPoint.x;\n          var cellWidth = tableModel.getCellWidthAt(handle.col);\n          tableModel.trigger('beforecellsizechange');\n          tableModel.trigger('cellsizechange', {\n            col : handle.col,\n            cellWidth : Math.max(tableModel.minCellWidth, cellWidth + deltaX) });\n          this.invalidate();\n        };\n        var mousemoveHandler = function(event : Event) {\n          var deltaX = event.pageX - dragPoint.x;\n          var cellWidth = tableModel.getCellWidthAt(handle.col);\n          deltaX = Math.max(tableModel.minCellWidth, cellWidth + deltaX) - cellWidth;\n          handle.$el.style.left = (handle.left + deltaX) + 'px';\n        };\n        if (event.which != 1) {\n          return;\n        }\n        event.preventDefault();\n        this.editor.endEdit();\n        var handleIndex = this.colResizeHandles.map(function(handle) {\n          return handle.$el; } ).indexOf(event.currentTarget);\n        var handle = this.colResizeHandles[handleIndex];\n        var dragPoint = { x : event.pageX, y : event.pageY };\n        util.set(handle.$el.childNodes[0], { style : { display : '' } });\n        var block = util.createElement('div', {\n          style : {\n            position : 'absolute', left : '0px', top : '0px',\n            backgroundColor : handleStyle.backgroundColor,\n            cursor : handleStyle.cursor,\n            width : (scrollRect.left + scrollRect.width) + 'px',\n            height : (scrollRect.top + scrollRect.height) + 'px'\n          }\n        });\n        this.frame.appendChild(block);\n        util.$(document).on('mousemove', mousemoveHandler).\n          on('mouseup', mouseupHandler);\n      };\n      var getOrCrt = () : ColResizeHandle => {\n        if (handleIndex < this.colResizeHandles.length) {\n          return this.colResizeHandles[handleIndex];\n        }\n        var handle = { $el : util.createElement('div', {\n          style : {\n            position : 'absolute',\n            backgroundColor : handleStyle.backgroundColor,\n            overflow : 'visible', top : '0px',\n            width : (handleStyle.offset * 2 + handleStyle.lineWidth) + 'px',\n            cursor : handleStyle.cursor\n          },\n          on : { mousedown : mousedownHandler }\n        }, [util.createElement('div',{\n          attrs : { 'class' : '${prefix}-v-resize-line' },\n          style : {\n            position : 'absolute',\n            left : handleStyle.offset + 'px', top : '0px', width : '0px',\n            borderLeftWidth : handleStyle.lineWidth + 'px' }\n        })]) };\n        this.frame.appendChild(handle.$el);\n        this.colResizeHandles.push(handle);\n        return handle;\n      };\n      var handleStyle = {\n        offset : 3,\n        lineWidth : 1,\n        cursor : 'ew-resize',\n        backgroundColor : 'rgba(0,0,0,0)'\n      };\n      var handleIndex = 0;\n      var tableModel = this.model;\n      var scrollRect = renderParams.rects[3];\n      this.tables.forEach( (table, i) => {\n        if (table.row == 0) {\n          var rect = renderParams.rects[i];\n          var tableState = table.tableState;\n          var left = tableState.left + rect.left -\n            handleStyle.offset - handleStyle.lineWidth;\n          var height = rect.height;\n          var clientWidth = scrollRect.left + scrollRect.width;\n          var clientHeight = scrollRect.top + scrollRect.height;\n          for (var col = tableState.minCol; col <= tableState.maxCol;\n              col += 1, handleIndex += 1) {\n            var handle = getOrCrt();\n            left += tableModel.getCellWidthAt(col);\n            if (left > clientWidth) {\n              break;\n            }\n            if (!this.model.isColumnResizableAt(col) ) {\n              continue;\n            }\n            util.set(handle.$el, { style : { display : '',\n              left : left + 'px', height : height + 'px' } });\n            util.set(handle.$el.childNodes[0], {\n              style : { display : 'none', height : clientHeight + 'px' } });\n            handle.col = col;\n            handle.left = left;\n          }\n        }\n      });\n      for (; handleIndex < this.colResizeHandles.length; handleIndex += 1) {\n        util.set(this.colResizeHandles[handleIndex].$el, {\n          style : { display : 'none', left : '0px', height : '0px' } });\n      }\n    }\n    public render(visibleCell? : { row : number, col : number }) {\n\n      var renderParams = this.getRenderParams();\n      var cornerRect = renderParams.rects[0];\n\n      util.extend(this.scr.style, {\n        width : renderParams.scrWidth + 'px',\n        height : renderParams.scrHeight + 'px' });\n      util.extend(this.viewPane.style, {\n        left : cornerRect.width + 'px', top : cornerRect.height + 'px',\n        width : (renderParams.width - cornerRect.width) + 'px',\n        height : (renderParams.height - cornerRect.height) + 'px' });\n\n      var viewPane = this.viewPane;\n      var barWidth = viewPane.offsetWidth - viewPane.clientWidth;\n      var barHeight = viewPane.offsetHeight - viewPane.clientHeight;\n\n      this.tables.forEach( (table, i) => {\n        var rect = renderParams.rects[i];\n        if (table.col == 1 &&\n            rect.width + barWidth > renderParams.width - rect.left) {\n          rect.width = renderParams.width - rect.left - barWidth;\n        }\n        if (table.row == 1 &&\n            rect.height + barHeight > renderParams.height - rect.top) {\n          rect.height = renderParams.height - rect.top - barHeight;\n        }\n      });\n\n      if (visibleCell) {\n        this.makeVisible(renderParams, visibleCell.row, visibleCell.col);\n      }\n\n      this.tables.forEach( (table, i) => {\n        var rect = renderParams.rects[i];\n        if (table.col == 1) {\n          table.left = -(renderParams.scrWidth > viewPane.clientWidth?\n                util.translate(viewPane.scrollLeft,\n                0, renderParams.scrWidth - viewPane.clientWidth,\n                cornerRect.width,\n                cornerRect.width +\n                  renderParams.viewWidth - viewPane.clientWidth,\n                'table.left') : cornerRect.width);\n        }\n        if (table.row == 1) {\n          table.top = -(renderParams.scrHeight > viewPane.clientHeight?\n                util.translate(viewPane.scrollTop,\n                0, renderParams.scrHeight - viewPane.clientHeight,\n                cornerRect.height,\n                cornerRect.height +\n                  renderParams.viewHeight - viewPane.clientHeight,\n                'table.top') : cornerRect.height);\n        }\n        table.model = this.model;\n        util.extend(table.$el.style, {\n          left : rect.left + 'px', top : rect.top + 'px',\n          width : rect.width + 'px', height : rect.height + 'px' });\n        table.render();\n\n      });\n\n      if (this.editor.cell != null) {\n        this.editor.beginEdit(this.editor.cell.row, this.editor.cell.col);\n      }\n\n      // lock lines.\n      ( () => {\n        while (this.lockLines.length < 2) {\n          var line = util.createElement('div', {\n            style : { position : 'absolute' } });\n          this.frame.appendChild(line);\n          this.lockLines.push(line);\n        }\n        var width = 0;\n        var height = 0;\n        this.tables.forEach(function(table, i) {\n          var rect = renderParams.rects[i];\n          if (table.row == 0) { width += rect.width; }\n          if (table.col == 0) { height += rect.height; }\n        });\n        // horizontal\n        util.set(this.lockLines[0], {\n          attrs :{ 'class' : '${prefix}-h-lock-line' },\n          style : {\n            display : this.getLockTop() == 0? 'none' : '', left : '0px',\n            top : (cornerRect.height - 1) + 'px', width : width + 'px'\n          } });\n        // vertical\n        util.set(this.lockLines[1], {\n          attrs :{ 'class' : '${prefix}-v-lock-line' },\n          style : {\n            display : this.getLockLeft() == 0? 'none' : '', top : '0px',\n            left : (cornerRect.width - 1) + 'px', height : height + 'px'\n          } });\n      } )();\n\n      // resize handles.\n      if (this.getLockTop() > 0) {\n        this.renderColumnResizeHandlers(renderParams);\n      }\n\n      this.trigger('rendered', {\n        tableStates : this.tables.map(function(table) {\n          return table.tableState;\n        })\n      } );\n    }\n\n    private createInternalEditor() : InternalEditor {\n      var table = this;\n      return {\n        beginEdit : function(row, col, makeVisible) {\n          this.endEdit();\n          if (makeVisible) {\n            table.render({ row : row, col : col });\n          }\n          this.cell = { row : row, col : col };\n          var target = table.getTargetTable(row, col);\n          var index = target.tableState.indexById[util.getCellId(row, col)];\n          if (index) {\n            var td = target.tbody.children[index.trIndex].children[index.tdIndex];\n            this.impl = td.renderer.beginEdit(table.model.getCellAt(row, col) );\n            this.impl.focus();\n          }\n        },\n        endEdit : function() {\n          if (this.impl != null) {\n            var endState = this.impl.endEdit();\n            if (endState) {\n              table.model.trigger('valuechange', {\n                row : this.cell.row,\n                col : this.cell.col,\n                oldValue : endState.oldValue,\n                newValue : endState.newValue\n              });\n            }\n            this.impl = null;\n          }\n          this.cell = null;\n        }\n      };\n    }\n\n    public $el = this.frame;\n    public getLockTop() { return 0; }\n    public getLockLeft() { return 0; }\n    public forEachCells(callback : any) {\n      this.tables.forEach(function(table) {\n        (table.tbody.children || []).forEach(function(tr) {\n          (tr.children || []).forEach(function(cell) {\n            callback(<any>cell);\n          });\n        });\n      });\n    }\n    public editor = this.createInternalEditor();\n    public model : TableModel = null;\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface Menu {\n    dispose : () => void;\n  }\n\n  export interface MenuItem {\n    label : string;\n    action? : (event? : Event) => void;\n    children? : () => MenuItem[];\n  }\n\n  export var ui = {\n\n    createButton : function(\n        label : string, action : (event : Event) => void) {\n      return util.createElement('button',{\n        props : { textContent : label },\n        attrs : { 'class' : '${prefix}-button' },\n        on : { mousedown : function(event : Event) {\n          event.preventDefault();\n        }, click : function(event : Event) { action(event); } } });\n    },\n  \n    createDialog : function(children : HTMLElement[]) {\n      var dialog = util.extend(new EventTargetImpl(), {\n        $el : util.createElement('div', {\n            attrs : { 'class' : '${prefix}-dialog' },\n            style : { position : 'absolute' }\n        }, children),\n        show : function() {\n          document.body.appendChild(this.$el);\n          this.trigger('beforeshow');\n          util.callLater(function() {\n            util.$(document).on('mousedown', mousedownHandler);\n          });\n        },\n        dispose : function() {\n          if (this.$el) {\n            util.$(document).off('mousedown', mousedownHandler);\n            document.body.removeChild(this.$el);\n            this.$el = null;\n            this.trigger('dispose');\n          }\n        }\n      } );\n      var mousedownHandler = function(event : Event) {\n        if (!util.closest(event.target,\n            { $el : dialog.$el, root : document.body }) ) {\n          dialog.dispose();\n        }\n      };\n      return dialog;\n    },\n\n    showMenu : function(\n        left : number, top : number, menuItems : MenuItem[]) : Menu {\n      var subMenu : Menu = null;\n      var menu = util.createElement('div', {\n        attrs : { 'class' : '${prefix}-contextmenu' },\n        style : { position : 'absolute', left : left + 'px', top : top + 'px' } },\n        <HTMLElement[]>menuItems.map(function(menuItem) {\n          return util.createElement('div', {\n              attrs : { 'class' : '${prefix}-menuitem ${prefix}-clickable' },\n              props : { textContent : menuItem.label },\n              style : { position : 'relative', whiteSpace : 'nowrap' },\n              on : {\n                mouseover : function(event : Event) {\n                  if (subMenu != null) {\n                    subMenu.dispose();\n                    subMenu = null;\n                  }\n                  if (subMenu == null && menuItem.children) {\n                    subMenu = ui.showMenu(\n                        left + event.target.offsetWidth,\n                        top + event.target.offsetTop,\n                        menuItem.children() );\n                  }\n                },\n                mousedown : function(event : Event) {\n                  if (menuItem.action) {\n                    menuItem.action(event);\n                  }\n                }\n              }\n            } );\n          }) );\n      var dispose = function() {\n        if (menu != null) {\n          document.body.removeChild(menu);\n          menu = null;\n        }\n      };\n      var mousedownHandler = function(event : Event) {\n        util.$(document).off('mousedown', mousedownHandler);\n        dispose();\n      };\n      util.$(document).on('mousedown', mousedownHandler);\n      document.body.appendChild(menu);\n      return { dispose : dispose };\n    }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface ElementOptions {\n    attrs? : { [ key : string ] : string };\n    style? : { [ key : string ] : string };\n    props? : { [ key : string ] : any };\n    on? : { [ type : string ] : (event : any) => void };\n  }\n\n  export interface CreateElement {\n    (tagName : string,\n        opts? : ElementOptions, children? : HTMLElement[]) : HTMLElement;\n    (tagName : string,\n        children? : HTMLElement[], opts? : ElementOptions) : HTMLElement;\n  }\n\n  var parseArguments = function(args : IArguments) {\n    var children : any[] = [];\n    var opts = {};\n    for (var i = 1; i < args.length; i += 1) {\n      var a = args[i];\n      if (typeof a == 'object') {\n        if (typeof a.splice == 'function') {\n          children = a;\n        } else {\n          opts = a;\n        }\n      }\n    }\n    return { children : children, opts : opts };\n  }\n\n  var classNamePrefixRe = /\\$\\{prefix\\}/g;\n  var replaceClassNamePrefix = function(className : string) {\n    return className.replace(classNamePrefixRe, classNamePrefix);\n  }\n\n  var wideNumChars = '０１２３４５６７８９＋－．，';\n  var narrowNumChars = '0123456789+-.,';\n  if (wideNumChars.length != narrowNumChars.length) {\n    throw wideNumChars + ',' + narrowNumChars;\n  }\n\n  export class $ {\n\n    private elm : HTMLElement|Document;\n\n    constructor(elm : HTMLElement|Document) {\n      this.elm = elm;\n    }\n\n    public on(type : string, listener : EventListener) {\n      this.elm.addEventListener(type, listener);\n      return this;\n    }\n    public off(type : string, listener : EventListener) {\n      this.elm.removeEventListener(type, listener);\n      return this;\n    }\n    public addClass(className : string, remove? : boolean) {\n      className = replaceClassNamePrefix(className);\n      var classes = '';\n      ((<HTMLElement>this.elm).getAttribute('class') || '').split(/\\s+/g).\n          forEach(function(c : string) {\n        if (c != className) {\n          classes += ' ' + c;\n          return;\n        }\n      } );\n      if (!remove) {\n        classes += ' ' + className;\n      }\n      (<HTMLElement>this.elm).setAttribute('class', classes);\n      return this;\n    }\n    public removeClass(className : string) {\n      return this.addClass(className, true);\n    }\n  }\n\n  export var util = {\n\n    extend : function(arg : any, ...args : any[]) : any {\n      var o = arguments[0];\n      for (var i = 1; i < arguments.length; i += 1) {\n        var a = arguments[i];\n        for (var k in a) {\n          o[k] = a[k];\n        };\n      }\n      return o;\n    },\n\n    callLater : function(cb : () => void) {\n      window.setTimeout(cb, 0);\n    },\n\n    set : function(\n        elm : Node, opts : ElementOptions) {\n      if (opts.attrs) {\n        for (var k in opts.attrs) {\n          var v = opts.attrs[k];\n          var t = typeof v;\n          if (t == 'number' || t == 'boolean') {\n            v = '' + v;\n          } else if (t == 'undefined') {\n            v = '';\n          }\n          if (typeof v != 'string') {\n            throw 'bad attr type for ' + k + ':' + (typeof v);\n          }\n          if (k == 'class') {\n            v = replaceClassNamePrefix(v);\n          }\n          (<any>elm).setAttribute(k, v);\n        }\n      }\n      if (opts.props) {\n        for (var k in opts.props) {\n          (<any>elm)[k] = opts.props[k];\n        }\n      }\n      if (opts.style) {\n        for (var k in opts.style) {\n          (<any>elm).style[k] = opts.style[k] || '';\n        }\n      }\n      if (opts.on) {\n        for (var k in opts.on) {\n          elm.addEventListener(k, opts.on[k]);\n        }\n      }\n      return elm;\n    },\n\n    createElement : function(tagName : string) {\n      var args = parseArguments(arguments);\n      var elm = document.createElement(tagName);\n      args.children.forEach(function(child) { elm.appendChild(child); });\n      return this.set(elm, args.opts);\n    } as CreateElement,\n\n    createSVGElement : function(tagName : string) {\n      var args = parseArguments(arguments);\n      var elm = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n      args.children.forEach(function(child) { elm.appendChild(child); });\n      return this.set(elm, args.opts);\n    } as CreateElement,\n\n    $ : function(elm : HTMLElement|Document) { return new $(elm); },\n\n    closest : function(elm : HTMLElement,\n        opts : { className? : string,\n          tagName? : string, root? : HTMLElement, $el? : HTMLElement} ) {\n      if (typeof opts.className == 'string') {\n        opts.className = replaceClassNamePrefix(opts.className);\n      }\n      while (elm != null && elm.nodeType == 1 && elm != opts.root) {\n        if (typeof opts.tagName == 'string' && elm.tagName == opts.tagName) {\n          return elm;\n        } else if (typeof opts.$el == 'object' && elm == opts.$el) {\n          return elm;\n        } else if (typeof opts.className == 'string' &&\n            (elm.getAttribute('class') || '').split(/\\s+/g).indexOf(opts.className)!= -1) {\n          return elm;\n        }\n        elm = <HTMLElement>elm.parentNode;\n      }\n      return null;\n    },\n\n    indexOf : function(elm : Node) {\n      if (elm == null) {\n        return -1;\n      }\n      return Array.prototype.indexOf.call(elm.parentNode.childNodes, elm);\n    },\n\n    offset : function(elm : HTMLElement) {\n      var off = { left : 0, top : 0 };\n      var e : HTMLElement;\n      var base : HTMLElement = null;\n      for (e = elm; e.parentNode != null; e = <HTMLElement>e.parentNode) {\n        if (e.offsetParent != null) {\n          base = e;\n          break;\n        }\n      }\n      if (base != null) {\n        for (e = base; e.offsetParent != null; e = <HTMLElement>e.offsetParent) {\n          off.left += e.offsetLeft;\n          off.top += e.offsetTop;\n        }\n      }\n      for (e = elm; e.parentNode != null &&\n            e != document.body; e = <HTMLElement>e.parentNode) {\n        off.left -= e.scrollLeft;\n        off.top -= e.scrollTop;\n      }\n      return off;\n    },\n\n    moveSublist : function(list : any[],\n        from : number, length : number, to : number) {\n      var i1 = list.slice(from, from + length);\n      var i2 = list.slice(0, from).concat(list.slice(from + length) );\n      to = from < to? to - length : to;\n      return i2.slice(0, to).concat(i1).concat(i2.slice(to) );\n    },\n\n    getCellId : function(row : number, col : number) {\n      return row + ':' + col;\n    },\n\n    translate : function(\n        val1 : number,\n        min1 : number, max1 : number,\n        min2 : number, max2 : number,\n        log? : string) {\n      var val2 = (val1 - min1) * (max2 - min2) / (max1 - min1) + min2;\n      return Math.max(min2, Math.min(Math.round(val2), max2) );\n    },\n\n    // num utils\n\n    numRe : /^([\\+\\-]?)([0-9]*)(\\.[0-9]*)?$/,\n\n    formatNumber : function(value : string,\n        digits? : number, s1? : string, s2? : string) {\n      digits = digits || 0;\n      s1 = typeof s1 == 'string'? s1 : ',';\n      s2 = typeof s2 == 'string'? s2 : '.';\n      if (typeof value == 'number') {\n        value = '' + value;\n      }\n      if (typeof value != 'string') {\n        return '';\n      }\n      var mat = value.match(util.numRe);\n      if (mat) {\n        if (mat[2].length == 0 && (!mat[3] || mat[3].length == 1) ) {\n          return '';\n        }\n        var iPart = mat[2].length > 0? mat[2] : '0';\n        while (iPart.length > 1 && iPart.charAt(0) == '0') {\n          iPart = iPart.substring(1);\n        }\n        var neg = mat[1] == '-';\n        var s = '';\n        while (iPart.length > 3) {\n          s = s1 + iPart.substring(iPart.length - 3) + s;\n          iPart = iPart.substring(0, iPart.length - 3);\n        }\n        s = iPart + s;\n        if (digits > 0) {\n          var fPart = mat[3] || s2;\n          s += s2;\n          for (var i = 0; i < digits; i += 1) {\n            s += (i + 1 < fPart.length)? fPart[i + 1] : '0';\n          }\n        }\n        return (neg && s != '0')? '-' + s : s;\n      }\n      return value;\n    },\n\n    toNarrowNumber : function(value : string) {\n      var s = '';\n      for (var i = 0; i < value.length; i += 1) {\n        var c = value.charAt(i);\n        var index = wideNumChars.indexOf(c);\n        s += (index != -1)? narrowNumChars.charAt(index) : c;\n      }\n      return s;\n    }\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface Editor {\n    endEdit : () => void;\n  }\n\n  export interface Table extends UIEventTarget {\n    $el : HTMLElement;\n    model : TableModel;\n    editor : Editor;\n    getLockTop : () => number;\n    getLockLeft : () => number;\n    forEachCells : (callback : (cell : {\n      $el : HTMLElement, row : number, col : number }) => void) => void;\n  }\n\n  export interface TableCellRenderer {\n    render : (cell : any) => void;\n    beginEdit : (cell : any) => {\n      focus() : void;\n      endEdit : () => ({ newValue : any; oldValue? : any; } | void);\n    };\n    dispose : () => void;\n  }\n\n  export interface TdWrapper {\n    $el : HTMLElement;\n    tableModel : TableModel; \n  }\n\n  export type TableCellRendererFactory =\n    (td : TdWrapper) => TableCellRenderer;\n\n  export interface TableCellStyle {\n    rowSpan? : number;\n    colSpan? : number;\n    editable? : boolean;\n    fontWeight? : string;\n    className? : string;\n    textAlign? : string;\n    verticalAlign? : string;\n    color? : string;\n    backgroundColor? : string;\n    borderLeft? : string;\n    borderTop? : string;\n    borderRight? : string;\n    borderBottom? : string;\n  }\n\n  export interface TableModel extends EventTarget {\n    defaultCellWidth : number;\n    defaultCellHeight : number;\n    defaultCellStyle : TableCellStyle;\n    defaultCellRendererFactory : TableCellRendererFactory;\n    maxRowSpan : number;\n    maxColSpan : number;\n    minCellWidth : number;\n    getRowCount : () => number;\n    getColumnCount : () => number;\n    getLineRowAt : (row : number) => any;\n    getLineRowCountAt : (row : number) => number;\n    getValueAt : (row : number, col : number) => any;\n    getCellStyleAt : (row : number, col : number) => TableCellStyle;\n    getCellRendererFactoryAt : (row : number, col : number) => TableCellRendererFactory;\n    getCellWidthAt : (col : number) => number;\n    getCellHeightAt : (row : number) => number;\n    getCellAt : (row : number, col : number) => TableCell;\n    checkSpaned : (row : number, col : number) => { row : number, col : number };\n    isColumnResizableAt : (col : number) => boolean;\n    isColumnDraggableAt : (col : number) => boolean;\n  }\n\n  export interface TableCell extends TableCellStyle {\n    row : number;\n    col : number;\n    value : any;\n    labelFunction : (value : any) => string;\n  }\n\n  export interface TextEditorOptions {\n    dataType : string;\n    decimalDigits? : number;\n  }\n  export interface TextEditorCell extends TableCell {\n    maxLength? : number;\n  }\n\n  export interface CheckBoxOptions {\n  }\n  export interface CheckBoxCell extends TableCell {\n    booleanValues : any[];\n  }\n\n  export interface SelectBoxOptions {\n  }\n\n  export interface SelectBoxCell extends TableCell {\n    valueField? : string;\n    labelField? : string;\n    options? : any[] | ( (row : number,col : number) => any[]);\n  }\n\n  export interface CellRendererFactoryOpts {\n    labelFunction? : (value : any, cell : EditorCell) => string;\n    createEditor? : () => CellEditor;\n    renderIsEditor? : boolean;\n    dataType? : string;\n  }\n\n  export type EditorCell = TextEditorCell|CheckBoxCell|SelectBoxCell;\n\n  export interface CellEditor {\n    $el : HTMLElement;\n    beginEdit : (td : TdWrapper, cell : EditorCell) => void;\n    focus : () => void;\n    blur : () => void;\n    setValue : (value : any) => void;\n    getValue : () => any;\n    isValid : () => boolean;\n  }\n\n}","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  // export\n  declare var exports : any, module : any;\n  if (typeof exports === 'object') {\n    module.exports = comfortable;\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  interface Selector {\n    $el : HTMLElement,\n    selected : boolean,\n    setSelected : (selected : boolean) => void;\n    isSelected : () => boolean;\n  }\n\n  interface CheckBox {\n    $el : HTMLElement;\n    checked : boolean;\n    setIncomplete : (incomplete : boolean) => void;\n    setChecked : (checked : boolean) => void;\n    isChecked : () => boolean;\n  }\n\n  interface FilterButton {\n    $el : HTMLElement;\n    cell : TemplateTableCell;\n    filtered : boolean;\n    sortOrder : string;\n    setFiltered : (filtered : boolean) => void;\n    setSortOrder : (sortOrder : string) => void;\n    update : () => void;\n  }\n\n  interface FilterDialogOptions extends CellRendererFactoryOpts {\n    sortOrder : string;\n    filterValues : any[];\n    rejects : Rejects;\n  }\n\n  interface FilterDialog extends EventTarget {\n    render : (cell : TableCell) => void;\n    beginEdit : (cell : TableCell) => {\n      focus : () => void;\n      endEdit : () => void;\n    };\n    dispose : () => void;\n  }\n\n  interface FilterItem {\n    index: number;\n    label: any;\n    value: string;\n    checked: boolean;\n    color: boolean;\n    incomplete? : boolean;\n  }\n\n  export var SortOrder = { ASC : 'asc', DESC : 'desc' };\n\n  // selector of sort order\n  var createSelector = function() : Selector {\n    var rect = util.createElement('span', {\n      attrs : { 'class' : '${prefix}-selector-body' }, \n      style : { display:'inline-block', width:'12px', height : '12px' }\n    });\n    return {\n      $el : rect,\n      selected : false,\n      setSelected : function(selected) {\n        this.selected = selected;\n        util.$(rect).addClass('${prefix}-selected', !selected);\n      },\n      isSelected : function() {\n        return this.selected;\n      }\n    };\n  };\n\n  // filter checkbox\n  var createCheckbox = function() : CheckBox {\n\n    // fix for layout collapse by bootstrap.\n    var antiBsGlobals : { [k : string] : string } = {\n        verticalAlign :'baseline',\n        boxSizing : 'content-box',\n        lineHeight : '1' };\n\n    var path = util.createSVGElement('path', { attrs : {\n        'class' : '${prefix}-checkbox-check',\n        d : 'M 2 5 L 5 9 L 10 3'\n      },\n      style : antiBsGlobals });\n    return {\n      $el : util.createElement('span', {\n        attrs : { 'class' : '${prefix}-checkbox-body' }, \n        style : util.extend(antiBsGlobals, { display : 'inline-block',\n          width : '12px', height : '12px' }\n        )}, [\n          util.createSVGElement('svg', {\n            attrs : { width : '12', height : '12' },\n            style : antiBsGlobals }, [ path ])\n        ] ),\n      checked : true,\n      setIncomplete : function(incomplete) {\n        util.$(path).addClass(\n            '${prefix}-checkbox-incomplete-check', !incomplete);\n      },\n      setChecked : function(checked) {\n        this.checked = checked;\n        path.style.display = this.checked? '' : 'none';\n      },\n      isChecked : function() {\n        return this.checked;\n      }\n    };\n  };\n\n  var createFilterDialog = function(opts : FilterDialogOptions, cell : TemplateTableCell) {\n\n    var messages = i18n.getMessages();\n    var labelStyle : { [ k : string ] : string } =\n      { marginLeft : '4px', verticalAlign : 'middle' };\n\n    var createSortButton = function(label : string) {\n      var selector = createSelector();\n      selector.$el.style.verticalAlign = 'middle';\n      return {\n        selector : selector,\n        $el : util.createElement('div', [\n          selector.$el,\n          util.createElement('span', {\n            style : labelStyle, props : { textContent : label } })\n        ], { attrs : { 'class' : '${prefix}-clickable-op' }, on : {\n          mousedown : function(event) { event.preventDefault(); },\n          click : function() { dialog.trigger('sortclick',\n              { label : label }); }\n        } })\n      };\n    };\n\n    var sortAscButton = createSortButton(messages.SORT_ASC);\n    var sortDescButton = createSortButton(messages.SORT_DESC);\n\n    var filterItems : FilterItem[] = [ messages.SELECT_ALL ]\n      .concat(opts.filterValues)\n      .map(function(value, i) {\n        return {\n          index : i,\n          label : (i > 0)? opts.labelFunction(value, cell) : value,\n          value : value,\n          checked : (i > 0)? !opts.rejects[value] : true,\n          color : false\n        };\n      });\n\n    class FilterItemCell implements ListCell {\n      public checkbox = (() => {\n        var checkbox = createCheckbox();\n        checkbox.$el.style.verticalAlign = 'middle';\n        return checkbox;\n      })();\n      private label = util.createElement('span', { style : labelStyle,\n        props : { textContent : 'M' } });\n      public index = 0;\n      public row = 0;\n      public setLabel(text : string) {\n        this.label.textContent = text || messages.SELECT_BLANK;\n        this.$el.setAttribute('title', this.label.textContent);\n      }\n      public $el = util.createElement('div', {\n          attrs : { 'class' : '${prefix}-clickable-op' },\n          on : {\n            mousedown : (event) => { event.preventDefault(); },\n            click : () => {\n              dialog.trigger('filterclick', { index : this.index });\n            }\n          }\n        }, [ this.checkbox.$el, this.label ])\n    }\n\n    class FilterItemList extends ListImpl<FilterItem,FilterItemCell> {\n      public items = filterItems;\n      public getItemAt(row : number) { return this.items[row]; }\n      public getItemCount() { return this.items.length; }\n      public createCell() {\n        return new FilterItemCell();\n      }\n      public renderCell(cell : FilterItemCell, item : FilterItem) {\n        cell.index = item.index;\n        cell.setLabel(item.label);\n        cell.checkbox.setChecked(item.checked);\n        cell.checkbox.setIncomplete(item.incomplete);\n      }\n      public height = 0;\n      public maxHeight = 150;\n    }\n\n    var filterItemList = new FilterItemList();\n    filterItemList.on('rendered', function(event : Event, detail : any) {\n      var height = Math.min(this.maxHeight,\n          this.cellHeight * this.getItemCount() );\n      if (this.height != height) {\n        this.height = height;\n        this.$el.style.height = height + 'px';\n        this.invalidate();\n      }\n    })\n    filterItemList.$el.style.width = '150px';\n    filterItemList.$el.style.height = '0px';\n    filterItemList.invalidate();\n\n    var dialog = util.extend(ui.createDialog([\n      // sort\n      sortAscButton.$el,\n      sortDescButton.$el,\n      // search box\n      util.createElement('input', { attrs : { type : 'text' },\n        style : { width : '150px', margin : '4px 0px' },\n        on : { keyup : function(event) {\n          var value = event.currentTarget.value;\n          filterItemList.items = filterItems.filter(function(filterItem) {\n            return !(value && filterItem.label.indexOf(value) == -1);\n          });\n          filterItemList.invalidate();\n        }} }),\n      // filter items\n        filterItemList.$el,\n      // buttons\n      util.createElement('div', { style :\n          { marginTop : '4px', display : 'inline-block', float : 'right' } },\n        [\n          ui.createButton(messages.OK, function() {\n            dialog.dispose();\n            dialog.trigger('applyfilter');\n          }),\n          ui.createButton(messages.CANCEL, function() {\n            dialog.dispose();\n          })\n        ])\n    ]), {\n      sortOrder : opts.sortOrder, rejects : opts.rejects\n    } ).on('sortclick', function(event : Event, detail : any) {\n\n      if (detail.label == messages.SORT_ASC) {\n        this.sortOrder = this.sortOrder == SortOrder.ASC? null : SortOrder.ASC;\n      }\n      if (detail.label == messages.SORT_DESC) {\n        this.sortOrder = this.sortOrder == SortOrder.DESC? null : SortOrder.DESC;\n      }\n\n      this.trigger('sortchange');\n\n      this.dispose();\n      this.trigger('applysort');\n\n    }).on('sortchange', function() {\n\n      sortAscButton.selector.setSelected(this.sortOrder == SortOrder.ASC);\n      sortDescButton.selector.setSelected(this.sortOrder == SortOrder.DESC);\n\n    } ).on('filterclick', function(event : Event, detail : any) {\n\n      if (detail.index == 0) {\n        // select all\n        var selectCount = 0;\n        filterItems.forEach(function(filterItem, i) {\n          if (i > 0 && filterItem.checked) {\n            selectCount += 1;\n          }\n        });\n        var selectAll = selectCount != filterItems.length - 1;\n        filterItems.forEach(function(filterItem, i) {\n          if (i > 0) {\n            filterItem.checked = selectAll;\n          }\n        });\n      } else {\n        var filterItem = filterItems[detail.index];\n        filterItem.checked = !filterItem.checked;\n      }\n\n      var rejects : Rejects = {};\n      filterItems.forEach(function(filterItem, i) {\n        if (i > 0 && !filterItem.checked) {\n          rejects[filterItem.value] = true;\n        }\n      });\n\n      this.rejects = rejects;\n      this.trigger('filterchange');\n\n    }).on('filterchange', function() {\n\n      var rejectCount = 0;\n      for (var value in this.rejects) {\n        rejectCount += 1;\n      }\n\n      // update 'select all' checkbox\n      filterItems[0].checked = rejectCount != filterItems.length - 1;\n      filterItems[0].incomplete = rejectCount != 0;\n\n      filterItemList.invalidate();\n\n    }).trigger('sortchange').trigger('filterchange');\n\n    return dialog;\n  };\n\n  var createFilterButton = function() : FilterButton {\n    return {\n      $el : util.createSVGElement('svg',\n          { style : { position : 'absolute' },\n            attrs : { width : '15', height : '15',\n            'class' : '${prefix}-filter-button ${prefix}-clickable-op' } }),\n      filtered : false,\n      sortOrder : null,\n      setFiltered : function(filtered : boolean) {\n        this.filtered = filtered;\n        this.update();\n      },\n      setSortOrder : function(sortOrder : string) {\n        this.sortOrder = sortOrder;\n        this.update();\n      },\n      update : function() {\n        // remove all children\n        while (this.$el.firstChild) {\n          this.$el.removeChild(this.$el.firstChild);\n        }\n        // outer rect\n        this.$el.appendChild(util.createSVGElement('rect', {\n          attrs : { 'class' : '${prefix}-filter-body',\n            x : '0', y : '0', width: '15', height : '15',\n            rx: '3', ry : '3' } }) );\n        // and others.\n        var fillClass = '${prefix}-filter-fill';\n        var strokeClass = '${prefix}-filter-stroke';\n        if (this.filtered) {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : fillClass,\n              d : 'M 5 4 L 8 7 L 8 12 L 11 12 L 11 7 L 14 4 Z' } }) );\n          if (this.sortOrder == null) {\n            this.$el.appendChild(util.createSVGElement('path', {\n              attrs : { 'class' : fillClass, d: 'M 0 8 L 3 12 L 6 8 Z' } }) );\n          }\n        } else if (this.sortOrder == null) {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : fillClass, d: 'M 1 4 L 7 11 L 13 4 Z' } }) );\n        } else {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : fillClass, d: 'M 4 5 L 9 11 L 14 5 Z' } }) );\n        }\n        if (this.sortOrder != null) {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : strokeClass, d: 'M 3 2 L 3 12'} } ) );\n          if (this.sortOrder == SortOrder.ASC) {\n            this.$el.appendChild(util.createSVGElement('path', {\n              attrs : { 'class' : strokeClass, d: 'M 1 5 L 3 2 L 5 5'} }) );\n          } else {\n            this.$el.appendChild(util.createSVGElement('path', {\n              attrs : { 'class' : strokeClass, d : 'M 1 9 L 3 12 L 5 9' } }) );\n          }\n        }\n        return this;\n      }\n    }.update();\n  };\n\n  var getFilterValues = function(tableModel : TemplateTableModel,\n      dataField : string, comparator : (a: any, b: any) => number) {\n    var exists : { [ value : string ] : boolean } = {};\n    var filterValues : any[] = [];\n    var items = tableModel.items;\n    for (var i = 0; i < items.length; i += 1) {\n      var value = items[i][dataField];\n      if (typeof value == 'undefined') {\n        continue;\n      }\n      if (!exists[value]) {\n        if (value !== '') {\n          filterValues.push(value);\n        }\n        exists[value] = true;\n      }\n    }\n    if (comparator) {\n      filterValues.sort(comparator);\n    } else {\n      filterValues.sort();\n    }\n    // blank is always last.\n    if (exists['']) {\n      filterValues.push('');\n    }\n    return filterValues;\n  };\n\n  export var createDefaultHeaderCellRendererFactory =\n      function(opts? : CellRendererFactoryOpts) :\n        TableCellRendererFactory {\n\n    opts = util.extend(createDefaultCellRendererFactoryOpts(), opts || {});\n\n    return function(td) : TableCellRenderer {\n\n      var labelRenderer = createMultiLineLabelRenderer(td.$el);\n\n      var tableModel : TemplateTableModel = <any>td.tableModel;\n      var filterButton : FilterButton = null;\n      var dialog : FilterDialog = null;\n\n      var showFilterDialog = function() : FilterDialog {\n        var filterContext = tableModel.filterContext;\n        var dataField = filterButton.cell.dataField;\n        var filterValues = getFilterValues(tableModel, dataField,\n            filterButton.cell.comparator);\n        var dialog = createFilterDialog(util.extend({\n          sortOrder : filterContext.sort &&\n            filterContext.sort.dataField == dataField?\n            filterContext.sort.sortOrder : null,\n          rejects : filterContext.filters[dataField] || {},\n          filterValues : filterValues\n        }, opts), filterButton.cell).on('applysort', function() {\n          (<any>filterContext)['.comparator'] = filterButton.cell.comparator;\n          filterContext.sort = this.sortOrder?\n              { dataField : dataField, sortOrder : this.sortOrder } :null;\n          tableModel.trigger('filterchange');\n        }).on('applyfilter', function() {\n          (<any>filterContext)['.comparator'] = filterButton.cell.comparator;\n          filterContext.filters[dataField] = this.rejects;\n          tableModel.trigger('filterchange');\n        });\n        var off = util.offset(td.$el);\n        dialog.$el.style.left = off.left + 'px',\n        dialog.$el.style.top = (off.top + td.$el.offsetHeight) + 'px';\n        dialog.show();\n        return dialog;\n      };\n\n      return {\n        render : function(cell) {\n\n          labelRenderer.setLabel(cell.value || '\\u00a0');\n\n          if (cell.dataField) {\n\n            if (!filterButton) {\n              filterButton = createFilterButton();\n              util.set(filterButton.$el, {\n                on : { mousedown : function(event) {\n                    event.preventDefault();\n                    if (dialog == null) {\n                      // wait for end edit then show dialog.\n                      util.callLater(function() {\n                        dialog = showFilterDialog();\n                        dialog.on('dispose', function() {\n                          dialog = null;\n                        });\n                      });\n                    } else {\n                      dialog.dispose();\n                    }\n                  }\n                }\n              });\n              td.$el.style.position = 'relative';\n              td.$el.appendChild(filterButton.$el);\n            }\n\n            filterButton.cell = cell;\n            var filterContext = tableModel.filterContext;\n            filterButton.setSortOrder(filterContext.sort &&\n                filterContext.sort.dataField == cell.dataField?\n                    filterContext.sort.sortOrder : null);\n            var rejects = filterContext.filters[cell.dataField] || {};\n            var filtered = false;\n            for (var value in rejects) { filtered = true; break; }\n            filterButton.setFiltered(filtered);\n          }\n          if (filterButton) {\n            filterButton.$el.style.display = cell.dataField? '' : 'none';\n          }\n        },\n        beginEdit : function(cell) {\n          return { focus : function() {}, endEdit : function() {} };\n        },\n        dispose : function() {\n        }\n      };\n    };\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  var createFilterContext = function() : FilterContext {\n    return { sort : null, filters : {} };\n  };\n\n  var createDefaultOrderedColumnIndices = function(tableModel : TableModel) {\n    var orderedColumnIndices : number[] = [];\n    var columnCount = tableModel.getColumnCount();\n    for (var i = 0; i < columnCount; i += 1) {\n      orderedColumnIndices.push(i);\n    }\n    return orderedColumnIndices;\n  };\n\n  var showColumnEditDialog = function(table : TemplateTable) {\n\n    var messages = i18n.getMessages();\n    var tableModel = <TemplateTableModel>table.model;\n    var lockLeft : number = (<any>table).lockLeft;\n\n    var ColumnType = { LOCK_COLUMN : 'lockColumn', COLUMN : 'column' };\n    \n    interface ColumnItem {\n      type : string;\n      label : string;\n      hidden : boolean;\n      col? : number;\n      colSpan? : number;\n    }\n\n    var columns = function() {\n      var columns : ColumnItem[] = [];\n      var columnCount = tableModel.getColumnCount();\n      for (var col = 0; col <= columnCount;) {\n        if (col == lockLeft) {\n          columns.push({ type : ColumnType.LOCK_COLUMN,\n            label : messages.LOCK_COLUMN,\n            hidden : !table.enableLockColumn });\n        }\n        if (col < columnCount) {\n          var cell = tableModel.getCellAt(0, col);\n          var orderedCol = tableModel.getOrderedColumnIndexAt(col);\n          columns.push({ type : ColumnType.COLUMN,\n            label : tableModel.getValueAt(0, col),\n            hidden : !!tableModel.hiddenColumns[orderedCol],\n            col : orderedCol, colSpan : cell.colSpan });\n          col += cell.colSpan;\n        } else {\n          col += 1;\n        }\n      }\n      return columns;\n    }();\n\n    var columnItems = columns.map(function(column) {\n      return util.createElement('div', {\n          attrs : { 'class' : '${prefix}-listitem ${prefix}-clickable' +\n            (column.type == ColumnType.LOCK_COLUMN?\n                ' ${prefix}-column-edit-lock-column' : '') },\n          on : { mousedown : function(event) {\n            event.preventDefault();\n            columnItems.forEach(function(elm) {\n              util.$(elm).removeClass('${prefix}-clickable');\n            });\n            var mousemoveHandler = function(event : Event) {\n              if (!started && Math.abs(event.pageY - dragPoint.y) > 4) {\n                started = true;\n              }\n              if (!started) {\n                return;\n              }\n              var listitem = util.closest(event.target,\n                  { className : '${prefix}-listitem', root : dialog.$el });\n              if (!listitem) {\n                return;\n              }\n              indexTo = columnItems.indexOf(listitem);\n              var off = util.offset(listitem);\n              var top = listitem.offsetTop - 2 - (<HTMLElement>listitem.parentNode).scrollTop;\n              if (off.top + listitem.offsetHeight / 2 < event.pageY) {\n                indexTo += 1;\n                top += listitem.offsetHeight;\n              }\n              bar.style.display = '';\n              bar.style.top = top + 'px';\n            };\n            var mouseupHandler = function(event : Event) {\n              util.$(document).off('mousemove', mousemoveHandler).\n                off('mouseup', mouseupHandler);\n              columnItems.forEach(function(elm) {\n                util.$(elm).addClass('${prefix}-clickable');\n              });\n              lastTarget = target;\n              dialog.$el.removeChild(bar);\n              if (indexTo != -1 && indexFrom != indexTo) {\n                var parent = target.parentNode;\n                var ref = columnItems[indexTo];\n                columns = util.moveSublist(columns, indexFrom, 1, indexTo);\n                columnItems = util.moveSublist(columnItems, indexFrom, 1, indexTo);\n                parent.removeChild(target);\n                if (ref) {\n                  parent.insertBefore(target, ref);\n                } else {\n                  parent.appendChild(target);\n                }\n              }\n            };\n            util.$(document).on('mousemove', mousemoveHandler).\n              on('mouseup', mouseupHandler);\n            var target = event.currentTarget;\n            var bar = util.createElement('div', {\n              attrs : { 'class' : '${prefix}-column-edit-bar' },\n              style : { position : 'absolute', left : '0px',\n                display : 'none', width : target.offsetWidth + 'px' }\n            });\n            var indexFrom = columnItems.indexOf(target);\n            var indexTo = -1;\n            var started = false;\n            var dragPoint = { x : event.pageX, y : event.pageY };\n            dialog.$el.appendChild(bar);\n            if (lastTarget != null) {\n              util.$(lastTarget).removeClass('${prefix}-selected');\n            }\n            util.$(target).addClass('${prefix}-selected');\n          }}\n        },[\n        util.createElement('input', {\n          attrs : { type : 'checkbox' },\n          props : { checked : !column.hidden },\n          style : { verticalAlign : 'middle' },\n          on:{ click : function(event) {\n            var target = event.currentTarget;\n            var index = util.indexOf(target.parentNode);\n            columns[index].hidden = !target.checked;\n          }}\n        }),\n        util.createElement('span', {\n          style : { verticalAlign : 'middle' },\n          props : { textContent : column.label }\n        }) ]);\n    });\n\n    var lastTarget : HTMLElement = null;\n\n    var dialog =  util.extend(ui.createDialog([\n      // columns\n      util.createElement('div',\n        { style : { overflow : 'auto',  height : '200px' } }, columnItems),\n      // buttons\n      util.createElement('div', { style : { float : 'right'} }, [\n        ui.createButton(messages.RESET, function() {\n          dialog.dispose();\n          tableModel.orderedColumnIndices = null;\n          tableModel.hiddenColumns = {};\n          tableModel.trigger('beforecellsizechange');\n          table.setLockLeft(table.defaultLockColumn);\n          table.enableLockColumn = true;\n          table.invalidate();\n        }),\n        ui.createButton(messages.APPLY, function() {\n          dialog.dispose();\n          var orderedColumnIndices : number[] = [];\n          var hiddenColumns : { [ orderedCol : number ] : boolean } = {};\n          var lockColumn = 0;\n          var enableLockColumn = true;\n          columns.forEach(function(column, col) {\n            if (column.type == 'column') {\n              for (var i = 0; i < column.colSpan; i += 1) {\n                orderedColumnIndices.push(i + column.col);\n              }\n              if (column.hidden) {\n                hiddenColumns[tableModel.getOrderedColumnIndexAt(column.col)] = true;\n              }\n            } else if (column.type == ColumnType.LOCK_COLUMN) {\n              lockColumn = col < columns.length - 1? col : 0;\n              enableLockColumn = !column.hidden;\n            }\n          });\n          tableModel.orderedColumnIndices = orderedColumnIndices;\n          tableModel.hiddenColumns = hiddenColumns;\n          tableModel.trigger('beforecellsizechange');\n          table.setLockLeft(lockColumn);\n          table.enableLockColumn = enableLockColumn;\n          table.invalidate();\n        }),\n        ui.createButton(messages.CANCEL, function() {\n          dialog.dispose();\n        })\n      ])\n    ])).on('beforeshow', function() {\n      var left = document.documentElement.scrollLeft +\n        ( (window.innerWidth - this.$el.offsetWidth) / 2 );\n      var top = document.documentElement.scrollTop +\n        ( (window.innerHeight - this.$el.offsetHeight) / 2 );\n      this.$el.style.left = left + 'px';\n      this.$el.style.top = top + 'px';\n    });\n    dialog.show();\n  };\n\n  var enableHover = function(table : Table) {\n    var tableModel = <TemplateTableModel>table.model;\n    var setHoverRowImpl = function(row : number, hover : boolean) {\n      table.forEachCells(function(td) {\n        var itemIndex = tableModel.getItemIndexAt(td.row, td.col);\n        if (itemIndex.row != row) {\n          // skip\n          return;\n        }\n        util.$(td.$el).addClass('${prefix}-item-hover', !hover);\n        //var cs = null;\n        for (var i = 0; i < td.$el.childNodes.length; i += 1) {\n          var child = td.$el.childNodes[i];\n          /*\n          if (child.tagName == 'INPUT' || child.tagName == 'SELECT') {\n            if (cs == null) {\n              cs = window.getComputedStyle(td.$el, null);\n            }\n            child.style.backgroundColor = cs.backgroundColor;\n          }\n          */\n        }\n      });\n    };\n\n    var setHoverRow = function(hoverRow : number) {\n      if (tableModel.hoverRow != hoverRow) {\n        if (tableModel.hoverRow != -1) {\n          setHoverRowImpl(tableModel.hoverRow, false);\n        }\n        tableModel.hoverRow = hoverRow;\n        if (tableModel.hoverRow != -1) {\n          setHoverRowImpl(tableModel.hoverRow, true);\n        }\n      }\n    };\n\n    return table.on('mouseover', function(event, detail) {\n        setHoverRow(detail.itemIndex.row);\n      }).\n      on('mouseout', function(event, detail) {\n        setHoverRow(-1);\n      });\n  };\n\n  var enableRowSelect = function(table : Table) {\n    return table.on('click', function(event, detail) {\n      if (detail.itemIndex.row != -1) {\n        var lastSelectedRows : { [row : string] : boolean } = {};\n        for (var k in this.model.selectedRows) {\n          lastSelectedRows[k] = true;\n        }\n        if (this.model.multipleRowsSelectable && detail.originalEvent.ctrlKey) {\n          // ctrl + click : toggle selection\n          if (!this.model.selectedRows[detail.itemIndex.row]) {\n            this.model.selectedRows[detail.itemIndex.row] = true;\n          } else {\n            delete this.model.selectedRows[detail.itemIndex.row];\n          }\n        } else {\n          this.model.selectedRows = {};\n          this.model.selectedRows[detail.itemIndex.row] = true;\n        }\n\n        // check changed.\n        var changed = false;\n        for (var k in this.model.selectedRows) {\n          if (lastSelectedRows[k]) {\n            delete lastSelectedRows[k];\n          } else {\n            changed = true;\n            break;\n          }\n        }\n        for (var k in lastSelectedRows) {\n          changed = true;\n          break;\n        }\n\n        if (changed) {\n          this.invalidate();\n          this.model.trigger('rowselectionchange',\n              { selectedRows : this.model.selectedRows });\n        }\n      }\n    });\n  };\n\n  var setupDefaults = function(template : TableTemplate) {\n\n    // body => head\n    var inheritFromBody = [ 'dataType',\n      'options', 'labelField', 'valueField' ];\n    var bodyDataCells : any = {};\n    template.tbody.forEach(function(tr) {\n      tr.forEach(function(cell) {\n        if (typeof cell.dataField == 'string') {\n          bodyDataCells[cell.dataField] = cell;\n        }\n      });\n    });\n    template.thead.forEach(function(tr) {\n      tr.forEach(function(cell) {\n        if (typeof cell.dataField == 'string') {\n          var bodyDataCell = bodyDataCells[cell.dataField];\n          if (bodyDataCell) {\n            inheritFromBody.forEach(function(prop) {\n              if (bodyDataCell[prop] &&\n                  typeof (<any>cell)[prop] == 'undefined') {\n                (<any>cell)[prop] = bodyDataCell[prop];\n              }\n            });\n          }\n        }\n      });\n    });\n\n    template.thead.forEach(function(row) {\n      row.forEach(function(cell) {\n        if (!cell.factory && cell.dataType) {\n          cell.factory = createDefaultHeaderCellRendererFactory(cell);\n        }\n      });\n    });\n    template.tbody.forEach(function(row) {\n      row.forEach(function(cell) {\n        if (!cell.factory && cell.dataType) {\n          cell.factory = createDefaultCellRendererFactory(cell);\n        }\n      });\n    });\n  };\n\n  export var fromTemplate =\n      function(template : TableTemplate) : TemplateTable {\n\n    if (template.thead && !template.tbody) {\n      // set default tbody if not exists.\n      var cloneIfExists = function(src : any, props : string[]) {\n        var dst : any = {};\n        props.forEach(function(prop) {\n          !src[prop] || (dst[prop] = src[prop]);\n        });\n        return dst;\n      };\n      var props = [ 'colSpan', 'rowSpan', 'dataField' ];\n      template.tbody = template.thead.map(function(tr) {\n        return tr.map(function(headCell) {\n          return cloneIfExists(headCell, props);\n        });\n      });\n    }\n\n    template.thead = template.thead || [[]];\n    template.tbody = template.tbody || [[]];\n\n    // setup defaults.\n    setupDefaults(template);\n\n    var columnCount = 0;\n    var cellWidth : { [k : number] : number } = {};\n    var cellHeight : { [k : number] : number } = {};\n    var columnDraggable : { [k : number] : boolean } = {};\n    var columnResizable : { [k : number] : boolean } = {};\n\n    var styles = function() {\n      var spaned : { [ id : string ] : boolean } = {};\n      var setSpaned = function(row : number, col : number, cell : TableCell) {\n        for (var r = 0; r < cell.rowSpan; r += 1) {\n          for (var c = 0; c < cell.colSpan; c += 1) {\n            spaned[util.getCellId(row + r, col + c)] = true;\n          }\n        }\n      };\n      return template.thead.concat(template.tbody).map(function(tr, row) {\n        var style : { [ col : number ] : TableTemplateHeaderCellStyle } = {};\n        var col = 0;\n        var c = 0;\n        while (c < tr.length) {\n          var id = util.getCellId(row, col);\n          if (spaned[id]) {\n            col += 1;\n            continue;\n          }\n          var td = tr[c];\n          var cell = util.extend({ rowSpan : 1, colSpan : 1 }, td);\n          setSpaned(row, col, cell);\n          if (typeof cell.width == 'number') {\n            cellWidth[col] = cell.width;\n          }\n          if (typeof cell.height == 'number') {\n            cellHeight[row] = cell.height;\n          }\n          if (typeof cell.columnDraggable == 'boolean') {\n            columnDraggable[col] = cell.columnDraggable;\n          }\n          if (typeof cell.columnResizable == 'boolean') {\n            columnResizable[col] = cell.columnResizable;\n          }\n          style[col] = td;\n          col += cell.colSpan;\n          c += 1;\n        }\n        columnCount = Math.max(columnCount, col);\n        return style;\n      });\n    }();\n\n    var getCellStyleAt = function(row : number, col : number) {\n      if (row < headLength) {\n        return styles[row][col] || {};\n      } else {\n        return styles[headLength + (row - headLength) % bodyLength][col] || {};\n      }\n    };\n\n    var headLength = template.thead.length;\n    var bodyLength = template.tbody.length;\n\n    class TemplateTableImpl extends TableImpl implements TemplateTable {\n      public lockLeft = template.lockColumn || 0;\n      public enableLockColumn = true;\n      // keep default value for restore.\n      public defaultLockColumn = this.lockLeft;\n      public setLockLeft(lockLeft : number) {\n        this.lockLeft = lockLeft;\n      }\n      public getLockLeft() {\n        return !this.enableLockColumn? 0 : this.lockLeft;\n      }\n      public getLockTop() { return headLength; }\n      public getContextMenuItems() {\n        var messages = i18n.getMessages();\n        var tableModel = table.model as TemplateTableModel;\n        return [\n          {\n            label : messages.RESET_FILTER,\n            action : function() {\n              tableModel.resetFilter();\n            }\n          },\n          {\n            label : messages.EDIT_COLUMNS,\n            action : function() {\n              showColumnEditDialog(table);\n            }\n          }\n        ];\n      }\n    }\n\n    class TemplateTableModelImpl\n    extends DefaultTableModel implements TemplateTableModel {\n      // user defines\n      public defaultHeaderCellRendererFactory =\n        createDefaultHeaderCellRendererFactory();\n      public cellWidth = cellWidth;\n      public cellHeight = cellHeight;\n      public columnDraggable = columnDraggable;\n      public columnResizable = columnResizable;\n      public orderedColumnIndices : number[] = null;\n      public filterContext = createFilterContext();\n      public hiddenColumns : { [ orderedCol : number ] : boolean } = {};\n      public items : any[] = [];\n      public filteredItems : any[] = null;\n      public hoverRow = -1;\n      public multipleRowsSelectable = false;\n      public selectedRows : { [ row : number ] : boolean } = {};\n      public resetFilter() {\n        this.filterContext = createFilterContext();\n        this.filteredItems = null;\n        table.invalidate();\n      }\n      public getItemCount() {\n        return (this.filteredItems || this.items).length;\n      }\n      public getItemAt(row : number) {\n        return (this.filteredItems || this.items)[row];\n      }\n      public getOrderedColumnIndexAt(col : number) {\n        if (this.orderedColumnIndices == null) {\n          this.orderedColumnIndices = createDefaultOrderedColumnIndices(this);\n        }\n        return this.orderedColumnIndices[col];\n      }\n      public getItemIndexAt(row : number, col : number) {\n        if (row < headLength) {\n          return { row : -1, col : -1 };\n        } else {\n          var orderedCol = this.getOrderedColumnIndexAt(col);\n          var style = getCellStyleAt(row, orderedCol);\n          row -= headLength;\n          return {\n            row : ~~(row / bodyLength),\n            col : style.dataField ||\n              ( (row % bodyLength) * this.getColumnCount() + orderedCol)\n          };\n        }\n      }\n      public setValueAt(row : number, col : number, value : any) {\n        if (row < headLength) {\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          var item = this.getItemAt(itemIndex.row);\n          if (item) {\n            item[itemIndex.col] = value;\n          }\n        }\n      }\n      // overrides\n      public getRowCount() { return headLength +\n        bodyLength * this.getItemCount(); }\n      public getColumnCount() { return columnCount; }\n      public getLineRowCountAt(row : number) {\n        return row < headLength? headLength : bodyLength; }\n      public getLineRowAt(row : number) {\n        return row < headLength? row : (row - headLength) % bodyLength; }\n      public getCellWidthAt(col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        if (this.hiddenColumns[orderedCol]) {\n          return 0;\n        }\n        var v = this.cellWidth[orderedCol];\n        return typeof v == 'number'? v : this.defaultCellWidth;\n      }\n      public getCellHeightAt(row : number) {\n        var v = this.cellHeight[row];\n        return typeof v == 'number'? v : this.defaultCellHeight;\n      }\n      public isColumnDraggableAt(col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        var v = this.columnDraggable[orderedCol];\n        return typeof v == 'boolean'? v : true;\n      }\n      public isColumnResizableAt(col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        var v = this.columnResizable[orderedCol];\n        return typeof v == 'boolean'? v : true;\n      }\n      public getCellRendererFactoryAt(row : number, col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        return getCellStyleAt(row, orderedCol).factory || (row < headLength?\n            this.defaultHeaderCellRendererFactory :\n            this.defaultCellRendererFactory);\n      }\n      public getCellStyleAt(row : number, col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        var style = util.extend({}, getCellStyleAt(row, orderedCol) );\n        style.className = style.className || '';\n        if (row < headLength) {\n          style.className += ' ${prefix}-header';\n          style.editable = false;\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          row -= headLength;\n          style.className += ' ${prefix}-' +\n            (itemIndex.row % 2 == 0? 'even' : 'odd');\n          if (this.selectedRows[itemIndex.row]) {\n            style.className += ' ${prefix}-item-selected';\n          }\n        }\n        if (style.editable === false) {\n          style.className += ' ${prefix}-readonly';\n        }\n        return style;\n      }\n      public getValueAt(row : number, col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        if (row < headLength) {\n          return getCellStyleAt(row, orderedCol).label || '';\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          var value = this.getItemAt(itemIndex.row)[itemIndex.col];\n          return typeof value != 'undefined'? value : '';\n        }\n      }\n    }\n\n    var table = new TemplateTableImpl(\n        new TemplateTableModelImpl() );\n\n    table.on('mousedown', function(event : Event, detail : any) {\n      if (detail.row < this.getLockTop() ) {\n        // on header.\n        this.editor.endEdit();\n        this.invalidate();\n      }\n    }).on('contextmenu', function(event : Event, detail : any) {\n\n      if (!(detail.row < table.getLockTop() ) ) {\n        return;\n      }\n\n      var menuItems = this.getContextMenuItems();\n      if (!menuItems || menuItems.length == 0) {\n        return;\n      }\n\n      detail.originalEvent.preventDefault();\n      util.callLater(function() {\n        ui.showMenu(\n            detail.originalEvent.pageX,\n            detail.originalEvent.pageY,\n            menuItems);\n      });\n    });\n\n    table.model.on('valuechange', function(event : Event, detail : any) {\n      this.setValueAt(detail.row, detail.col, detail.newValue);\n    }).on('cellsizechange', function(event : Event, detail : any) {\n      if (typeof detail.col == 'number') {\n        var orderedCol = this.getOrderedColumnIndexAt(detail.col);\n        this.cellWidth[orderedCol] = detail.cellWidth;\n      }\n    }).on('columndragged', function(event : Event, detail : any) {\n      this.orderedColumnIndices = util.moveSublist(\n          this.orderedColumnIndices, detail.colFrom, detail.colSpan, detail.colTo);\n      if (detail.colFrom < table.lockLeft && table.lockLeft <= detail.colTo) {\n        table.lockLeft -= detail.colSpan;\n      } else if (detail.colTo < table.lockLeft && table.lockLeft <= detail.colFrom) {\n        table.lockLeft += detail.colSpan;\n      }\n    }).on('filterchange', function() {\n\n      // apply filter\n\n      var filters = this.filterContext.filters;\n      var filteredItems : any[] = this.items.filter(function(item : any) {\n        var filtered = false;\n        for (var dataField in filters) {\n          if (filters[dataField][item[dataField]]) {\n            filtered = true;\n            break;\n          }\n        }\n        return !filtered;\n      } );\n\n      var sort = this.filterContext.sort;\n      if (sort) {\n        var order = sort.sortOrder == SortOrder.ASC? 1 : -1;\n        var dataField = sort.dataField;\n        var indexField = '.index';\n        var sortKeyField = '.sortKey';\n        var comparator = this.filterContext['.comparator'];\n        filteredItems.forEach(function(item, i) {\n          item[indexField] = i;\n          item[sortKeyField] = (item[dataField] === null ||\n              typeof item[dataField] == 'undefined')? '' : item[dataField];\n        });\n        if (comparator) {\n          // sort by custom comparator.\n          delete this.filterContext['.comparator'];\n          filteredItems.sort(function(item1, item2) {\n            var result = comparator(item1[sortKeyField], item2[sortKeyField]);\n            if (result != 0) {\n              return order * result;\n            }\n            return order * (item1[indexField] < item2[indexField]? -1 : 1);\n          });\n        } else {\n          filteredItems.sort(function(item1, item2) {\n            if (item1[sortKeyField] != item2[sortKeyField]) {\n              return order * (item1[sortKeyField] < item2[sortKeyField]? -1 : 1);\n            }\n            return order * (item1[indexField] < item2[indexField]? -1 : 1);\n          });\n        }\n        filteredItems.forEach(function(item) {\n          delete item[indexField];\n          delete item[sortKeyField];\n        });\n      }\n      this.filteredItems = filteredItems;\n      table.invalidate();\n    });\n\n    // append itemIndex to events.\n    [ 'valuechange' ].\n    forEach(function(type) {\n      table.model.on(type, function(event : Event, detail : any) {\n        detail.itemIndex = this.getItemIndexAt(detail.row, detail.col);\n      });\n    });\n    tableEventTypes.forEach(function(type) {\n      table.on(type, function(event : Event, detail : any) {\n        detail.itemIndex = this.model.getItemIndexAt(detail.row, detail.col);\n      });\n    });\n\n    enableHover(table);\n    enableRowSelect(table);\n\n    return table;\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  export interface TableTemplateCellStyle\n  extends TableCellStyle, CellRendererFactoryOpts {\n\n    width? : number;\n    height? : number;\n\n    columnDraggable? : boolean;\n    columnResizable? : boolean;\n\n    dataField? : string;\n\n    /** one of 'string(default)', 'number', 'boolean', 'select-one' */\n    dataType? : string;\n\n    /** dataType : 'string', 'number' */\n    maxLength? : number;\n\n    /** dataType : 'number' */\n    decimalDigits? : number;\n\n    /** dataType : 'boolean',\n      2 elements array like [falseValue, trueValue].\n     */\n    booleanValues? : any[];\n\n    /** dataType : 'select-one' */\n    options? : (any[] | ((row : number, col : number) => any[]) );\n    labelField? : string;\n    valueField? : string;\n\n    factory? : TableCellRendererFactory;\n  }\n\n  export interface TableTemplateHeaderCellStyle\n  extends TableTemplateCellStyle {\n    label? : string;\n    /** dataType : 'number' */\n    comparator? : (v1 : any, v2 : any) => number;\n  }\n\n  export interface TableTemplate {\n    lockColumn? : number;\n    thead? : TableTemplateHeaderCellStyle[][];\n    tbody? : TableTemplateCellStyle[][];\n  }\n\n  export interface ItemIndex {\n    row : number;\n    /** col will be string if dataField is defined. */\n    col : (number | string);\n  }\n\n  export interface TemplateTableModel extends TableModel {\n    filterContext : FilterContext;\n    defaultHeaderCellRendererFactory : TableCellRendererFactory;\n    items : any[];\n    filteredItems : any[];\n    resetFilter : () => void;\n    getItemAt : (row : number) => any;\n    getItemCount : () => number;\n    getItemIndexAt : (row : number, col : number) => ItemIndex;\n    getOrderedColumnIndexAt : (col : number) => number;\n    orderedColumnIndices : number[];\n    hiddenColumns : { [ orderedCol : number ] : boolean };\n    hoverRow : number;\n  }\n\n  export interface TemplateTableCell extends TableCell {\n    dataField? : string;\n    comparator? : (a: any, b: any) => number;\n  }\n\n  export type Rejects = { [ value : string ] : boolean };\n\n  export interface FilterContext {\n    sort? : { dataField : string; sortOrder : string; }\n    filters : { [ dataField : string ] : Rejects };\n  }\n\n  export interface TemplateTable extends Table {\n    enableLockColumn : boolean;\n    defaultLockColumn : number;\n    setLockLeft : (lockLeft : number) => void;\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  'use strict';\n\n  var table = {\n    template: '<div class=\"comfortable\"></div>',\n    props : {\n      template : { 'default' : function() {\n          return {\n            thead : [[ { label : 'col1' },{ label : 'col2' },{ label : 'col3' }]]\n          };\n        } },\n    },\n    methods: {\n      invalidate : function() {\n        this.$options.table.invalidate();\n        return this;\n      },\n      setItems : function(items : any[]) {\n        this.$options.table.model.items = items;\n        this.invalidate();\n        return this;\n      },\n      getItems : function() {\n        return this.$options.table.model.items;\n      },\n      getModel : function() {\n        return this.$options.table.model;\n      },\n      getLockTop : function() {\n        return this.$options.table.getLockTop();\n      },\n      getLockLeft : function() {\n        return this.$options.table.getLockLeft();\n      }\n    },\n    mounted : function() {\n\n      var table = fromTemplate(this.template);\n\n      // set default values.\n      table.$el.style.width = '100%';\n      table.$el.style.height = '100%';\n      this.$el.style.width = this.$el.style.width || '400px';\n      this.$el.style.height = this.$el.style.height || '200px';\n\n      // emit events.\n      var emitEventHandler = function(event : Event, detail : any) {\n        this.$emit(event.type, event, detail);\n      }.bind(this);\n      [\n       'mousedown', 'mouseover', 'mouseout',\n       'click', 'dblclick', 'contextmenu' ].forEach(function(type) {\n         table.on(type, emitEventHandler);\n       });\n      table.model.on('valuechange', emitEventHandler);\n\n      // as a non-reactive property, set to $options.\n      this.$options.table = table;\n      this.$el.appendChild(table.$el);\n\n      var items : string = this.items;\n      this.setItems(items? JSON.parse(items) : []);\n\n      // observe the size of table.\n      util.extend(this.$options, {\n        observeInterval : 20, // ms(50fps)\n        alive : true, lastSize : { width : 0, height : 0 }\n      });\n      var observeSize = function() {\n        var size = {\n          width : this.$el.offsetWidth,\n          height : this.$el.offsetHeight\n        };\n        if (size.width != this.$options.lastSize.width ||\n            size.height != this.$options.lastSize.height) {\n          this.$options.lastSize = size;\n          this.invalidate();\n        }\n        if (this.$options.alive) {\n          window.setTimeout(observeSize, this.$options.observeInterval);\n        }\n      }.bind(this);\n      window.setTimeout(observeSize, this.$options.observeInterval);\n    },\n    beforeDestroy : function() {\n      // stop observing\n      this.$options.alive = false;\n    }\n  }\n\n  export var vueComponents = {\n    table : table\n  }\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.i18n {\n\n  'use strict';\n\n  export var en : I18N = {\n    messages : {\n      RESET_FILTER : 'Clear Sort and Filters',\n      EDIT_COLUMNS : 'Column Visibility and Order',\n      SORT_ASC : 'Sort Ascending',\n      SORT_DESC : 'Sort Descending',\n      APPLY : 'Apply',\n      OK : 'OK',\n      CANCEL : 'Cancel',\n      RESET : 'Reset',\n      LOCK_COLUMN : '< Lock Column >',\n      SELECT_BLANK : '(Space)',\n      SELECT_ALL : '(Select All)'\n    }\n  };\n\n}\n","/*!\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.i18n {\n\n  'use strict';\n\n  export var ja : I18N = {\n    messages : {\n      RESET_FILTER : '並び替えとフィルタをクリア',\n      EDIT_COLUMNS : '列の表示と順序',\n      SORT_ASC : '昇順',\n      SORT_DESC : '降順',\n      APPLY : '適用',\n      OK : 'OK',\n      CANCEL : 'キャンセル',\n      RESET : '初期値に戻す',\n      LOCK_COLUMN : '< 列固定位置 >',\n      SELECT_BLANK : '(空白)',\n      SELECT_ALL : '(全て選択)'\n    }\n  };\n\n}\n"]}