{"version":3,"sources":["src/main/ts/core/_intf.ts","src/main/ts/core/_node.ts","src/main/ts/core/DefaultCellRendererFactory.ts","src/main/ts/core/EventTarget.ts","src/main/ts/core/DefaultTableModel.ts","src/main/ts/core/i18n.ts","src/main/ts/core/i18n/en.ts","src/main/ts/core/i18n/ja.ts","src/main/ts/core/UIEventTarget.ts","src/main/ts/core/InternalTable.ts","src/main/ts/core/List.ts","src/main/ts/core/renderer/CheckBox.ts","src/main/ts/core/renderer/SelectBox.ts","src/main/ts/core/renderer/TextEditor_DateField.ts","src/main/ts/core/renderer/TextEditor_SelectBox.ts","src/main/ts/core/renderer/TextEditor.ts","src/main/ts/core/renderer/Tooltip.ts","src/main/ts/core/style.ts","src/main/ts/core/Table.ts","src/main/ts/core/ui.ts","src/main/ts/core/util.ts","src/main/ts/template-support/_intf.ts","src/main/ts/template-support/DefaultFilter.ts","src/main/ts/template-support/DefaultHeaderCellRendererFactory.ts","src/main/ts/template-support/TemplateSupport.ts","src/main/ts/vue-support/VueSupport.ts"],"names":[],"mappings":"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","file":"comfortable.d.ts","sourcesContent":["/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  export interface Editor {\n    endEdit : (reason : string) => void;\n  }\n\n  export interface Table extends UIEventTarget {\n    $el : HTMLElement;\n    model : TableModel;\n    editor : Editor;\n    forEachCells : (callback : (\n      cell : {\n        $el : HTMLElement, row : number, col : number \n      }) => boolean) => void;\n    findNextEditable : (\n        row : number, col : number,\n        offset : { row : number, col : number },\n        found : (row : number, col : number) => void\n      ) => void;\n    dispose : () => void;\n  }\n\n  export interface TableCellRenderer {\n    getCellStyle? : (cell : any) => ElementOptions;\n    render : (cell : any) => void;\n    beginEdit : (cell : any) => {\n      focus() : void;\n      endEdit : () => ({ newValue : any; oldValue? : any; } | void);\n    };\n    dispose : () => void;\n  }\n\n  export interface TdWrapper {\n    $el : HTMLElement;\n    tableModel : TableModel; \n  }\n\n  export type TableCellRendererFactory =\n    (td : TdWrapper) => TableCellRenderer;\n\n  export interface TableCellStyle {\n    rowSpan? : number;\n    colSpan? : number;\n    editable? : boolean;\n    fontWeight? : string;\n    className? : string;\n    textAlign? : string;\n    verticalAlign? : string;\n    color? : string;\n    backgroundColor? : string;\n    borderLeft? : string;\n    borderTop? : string;\n    borderRight? : string;\n    borderBottom? : string;\n    labelFunction? : (value : any, cell : EditorCell) => string;\n  }\n\n  export interface TableCell extends TableCellStyle {\n    row : number;\n    col : number;\n    value : any;\n    tooltip? : string;\n  }\n\n  export interface TableModel extends EventTarget {\n    defaultCellWidth : number;\n    defaultCellHeight : number;\n    defaultCellStyle : TableCellStyle;\n    defaultCellRendererFactory : TableCellRendererFactory;\n    maxRowSpan : number;\n    maxColSpan : number;\n    minCellWidth : number;\n    getLockTop : () => number;\n    getLockLeft : () => number;\n    getLockBottom : () => number;\n    getLockRight : () => number;\n    getRowCount : () => number;\n    getColumnCount : () => number;\n    getLineRowAt : (row : number) => any;\n    getLineRowCountAt : (row : number) => number;\n    getValueAt : (row : number, col : number) => any;\n    getTooltipAt : (row : number, col : number) => string;\n    getCellStyleAt : (row : number, col : number) => TableCellStyle;\n    getCellRendererFactoryAt : (row : number, col : number) => TableCellRendererFactory;\n    getCellWidthAt : (col : number) => number;\n    getCellHeightAt : (row : number) => number;\n    getCellAt : (row : number, col : number) => TableCell;\n    checkSpaned : (row : number, col : number) => { row : number, col : number };\n    isColumnResizableAt : (col : number) => boolean;\n    isColumnDraggable : () => boolean;\n    isColumnHiddenAt : (col : number) => boolean;\n  }\n\n  export interface TextEditorOptions {\n    decimalDigits? : number;\n    maxLength? : number;\n    imeMode? : string;\n  }\n  export interface TextEditorCell extends TableCell {\n    maxLength? : number;\n    imeMode? : string;\n    decimalDigits? : number;\n  }\n\n  export interface CheckBoxOptions {\n  }\n  export interface CheckBoxCell extends TableCell {\n    booleanValues : any[];\n  }\n\n  export interface SelectBoxOptions {\n  }\n\n  export interface SelectBoxCell extends TableCell {\n    valueField? : string;\n    labelField? : string;\n    selectableField? : string;\n    disabledField? : string;\n    options? : any[] | ( (row : number,col : number) => any[]);\n  }\n\n  export interface CellRendererFactoryOpts {\n    dataType? : string;\n    renderIsEditor? : boolean;\n    labelFunction? : (value : any, cell : EditorCell) => string;\n    editorPool? : EditorPool;\n  }\n\n  export interface EditorPool {\n    getEditor(dataType : string) : CellEditor<any>;\n    releaseEditor(dataType : string, editor : CellEditor<any>) : void;\n  }\n\n  export type EditorCell = TextEditorCell|CheckBoxCell|SelectBoxCell;\n\n  export interface CellEditor<E> {\n    $el : E;\n    beginEdit : (td : TdWrapper, cell : EditorCell) => void;\n    focus : () => void;\n    blur : () => void;\n    setValue : (value : any) => void;\n    getValue : () => any;\n    isValid : () => boolean;\n    setVisible : (visible : boolean) => void;\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  // export\n  declare var exports : any, module : any;\n  if (typeof exports === 'object') {\n    module.exports = comfortable;\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  export var createDefaultCellRendererFactoryOpts =\n      function() : CellRendererFactoryOpts {\n    return {\n      // value to label\n      labelFunction : function(value, cell) {\n\n        if (typeof cell.labelFunction == 'function') {\n\n          return cell.labelFunction(value, cell);\n\n        } else if (value === null || typeof value == 'undefined') {\n\n          return '';\n\n        } else if (this.dataType == 'number') {\n\n          return util.formatNumber(value, this.decimalDigits);\n\n        } else if (this.dataType == 'date') {\n\n          return util.formatDate(value);\n\n        } else if (this.dataType == 'select-one') {\n\n          var options = renderer.SelectBox.getOptions(cell);\n          if (typeof options.splice != 'function') {\n            // not an Array.\n            return options[value] || '';\n          }\n\n          var labelField = (<SelectBoxCell>cell).labelField || 'label';\n          var valueField = (<SelectBoxCell>cell).valueField || 'value';\n          for (var i = 0; i < options.length; i += 1) {\n            var option = options[i];\n            if (option[valueField] == value) {\n              return option[labelField];\n            }\n          }\n          return '';\n \n        } else {\n\n          // by default, to string.\n          return '' + value;\n\n        }\n      },\n      editorPool : createEditorPool()\n    };\n  };\n\n  var createEditorPool = function() : EditorPool {\n    var pool : { [ dataType : string ] : CellEditor<any>[] } = {}\n    var getPool = function(dataType :  string) : CellEditor<any>[] {\n      return pool[dataType] || (pool[dataType] = []);\n    };\n    return {\n      /**\n       * create or get an editor.\n       */\n      getEditor : function(dataType : string) : CellEditor<any> {\n        var pool = getPool(dataType);\n        if (pool.length > 0) {\n          return pool.shift();\n        }\n        if (this.dataType == 'select-one') {\n          //return new renderer.SelectBox(this);\n        } else if (dataType == 'boolean') {\n          return new renderer.CheckBox();\n        }\n        return new renderer.TextEditor(dataType);\n      },\n      releaseEditor : function(dataType : string, editor : CellEditor<any>) {\n        getPool(dataType).push(editor);\n      }\n    };\n  };\n\n  export var createDefaultCellRendererFactory =\n      function(opts? : CellRendererFactoryOpts) :\n        TableCellRendererFactory {\n\n    opts = util.extend(createDefaultCellRendererFactoryOpts(), opts || {});\n\n    return function(td : TdWrapper) : TableCellRenderer {\n\n      var labelRenderer = createMultiLineLabelRenderer(td.$el);\n      var editor : CellEditor<any> = null;\n      var oldValue : any = null;\n\n      var beginEdit = function(cell : EditorCell) {\n        if (editor == null) {\n          editor = opts.editorPool.getEditor(opts.dataType);\n          td.$el.appendChild(editor.$el);\n        }\n        labelRenderer.setVisible(false);\n        editor.beginEdit(td, cell);\n        editor.setVisible(true);\n        editor.setValue(oldValue = cell.value);\n      };\n\n      var renderIsEditor = opts.renderIsEditor;\n      if (typeof renderIsEditor == 'undefined') {\n        renderIsEditor = opts.dataType == 'boolean' ||\n          opts.dataType == 'select-one' ||\n          opts.dataType == 'date' ||\n          opts.dataType == 'multi-line-string';\n      }\n\n      var editing = false;\n\n      return {\n        getCellStyle : function(cell) : ElementOptions {\n          if (!renderIsEditor) {\n            if (!cell.textAlign && opts.dataType == 'number') {\n              return { style : { textAlign : 'right' } };\n            }\n          }\n          return {};\n        },\n        render : function(cell) {\n          if (!renderIsEditor) {\n            labelRenderer.setLabel(opts.labelFunction(cell.value, cell) );\n          } else {\n            // render is editor.\n            if (!editing) {\n              beginEdit(cell);\n            }\n          }\n        },\n        beginEdit : function(cell) {\n          editing = true;\n          beginEdit(cell);\n          return {\n            focus : function() {\n              editor.focus();\n            },\n            endEdit : function() {\n              if (!editor) {\n                // disposed.\n                return null;\n              }\n              editing = false;\n              if (!renderIsEditor) {\n                labelRenderer.setVisible(true);\n                editor.setVisible(false);\n              } else {\n                editor.blur();\n              }\n              return { oldValue : oldValue,\n                newValue : editor.isValid()? editor.getValue() : oldValue };\n            }\n          };\n        },\n        dispose : function() {\n          if (editor != null) {\n            td.$el.removeChild(editor.$el);\n            opts.editorPool.releaseEditor(opts.dataType, editor);\n            editor = null;\n          }\n        }\n      };\n    };\n  };\n\n  var linesRe = /\\r?\\n/g;\n\n  export var createMultiLineLabelRenderer = function(parent : HTMLElement) {\n    var elms : HTMLElement[] = null;\n    var lastLabel : string = null;\n    return {\n      setLabel : function(label : string) {\n        if (lastLabel === label) {\n          return;\n        }\n        lastLabel = label;\n        if (elms == null) {\n          elms = [ document.createElement('span') ];\n          parent.appendChild(elms[0]);\n        }\n        var lines = label.split(linesRe);\n        elms[0].textContent = lines[0];\n        var elmIndex = 1;\n        for (var i = 1; i < lines.length; i += 1) {\n          if (elmIndex + 1 >= elms.length) {\n            elms.push(document.createElement('br') );\n            elms.push(document.createElement('span') );\n            parent.appendChild(elms[elmIndex]);\n            parent.appendChild(elms[elmIndex + 1]);\n          }\n          elms[elmIndex].style.display = '';\n          elms[elmIndex + 1].style.display = '';\n          elms[elmIndex + 1].textContent = lines[i];\n          elmIndex += 2;\n        }\n        for (; elmIndex < elms.length; elmIndex += 1) {\n          elms[elmIndex].style.display = 'none';\n        }\n      },\n      setVisible : function(visible : boolean) {\n        if (elms != null) {\n          for (var i = 0; i < elms.length; i += 1) {\n            elms[i].style.display = visible? '' : 'none';\n          }\n        }\n      }\n    };\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  export interface Event {\n    type : string;\n    preventDefault : () => void;\n    defaultPrevented : boolean;\n    target? : any;\n    currentTarget? : any;\n    which? : number;\n    pageX? : number;\n    pageY? : number;\n  }\n\n  export type EventListener = (event : Event, detail? : any) => void;\n\n  export interface EventTarget {\n    trigger : (type : string, detail? : any) => EventTarget;\n    on : (type : string, listener : EventListener) => EventTarget;\n    off : (type : string, listener : EventListener) => EventTarget;\n    once : (type : string, listener : EventListener) => EventTarget;\n  }\n\n  /**\n   * @internal\n   */\n  export class EventTargetImpl implements EventTarget {\n    private map : { [ type : string ] : EventListener[] } = {};\n    private listeners(type : string) : EventListener[] {\n       return this.map[type] || (this.map[type] = []);\n    }\n    public trigger(type : string, detail? : any) {\n      var ctx = this;\n      var event = new EventImpl(type);\n      this.listeners(type).forEach(function(listener : EventListener) {\n        listener.call(ctx, event, detail);\n      });\n      return this;\n    }\n    public on(type : string, listener : EventListener) {\n      this.listeners(type).push(listener);\n      return this;\n    }\n    public off(type : string, listener : EventListener) {\n      this.map[type] = this.listeners(type).filter(function(l : EventListener) {\n        return listener != l;\n      });\n      return this;\n    }\n    public once(type : string, listener : EventListener) {\n      var wrapper = function(event : Event, detail? : any) {\n        listener.apply(this, arguments);\n        this.off(type, wrapper);\n      };\n      this.on(type,  wrapper);\n      return this;\n    }\n  }\n\n  class EventImpl implements Event {\n    public type : string;\n    public defaultPrevented = false;\n    constructor(type : string) {\n      this.type = type;\n    }\n    public preventDefault() {\n      this.defaultPrevented = true;\n    }\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"EventTarget.ts\" />\n\nnamespace comfortable {\n\n  /**\n   * @internal\n   */\n  export class DefaultTableModel extends EventTargetImpl implements TableModel {\n    public defaultCellWidth = 100;\n    public defaultCellHeight = 28;\n    public defaultCellStyle = { rowSpan : 1, colSpan : 1, editable : true };\n    public defaultCellRendererFactory = createDefaultCellRendererFactory();\n    public maxRowSpan = 8;\n    public maxColSpan = 8;\n    public minCellWidth = 8;\n    public getLockTop() { return 0; }\n    public getLockLeft() { return 0; }\n    public getLockBottom() { return 0; }\n    public getLockRight() { return 0; }\n    public getRowCount() { return 1E5; }\n    public getColumnCount() { return 1E5; }\n    public getLineRowAt(row : number) { return row; }\n    public getLineRowCountAt(row : number) { return this.getRowCount(); }\n    public getValueAt(row : number, col : number) { return row + ',' + col; }\n    public getTooltipAt(row : number, col : number) { return ''; }\n    public getCellStyleAt(row : number, col : number) { return {}; }\n    public getCellRendererFactoryAt(row : number, col : number) { return this.defaultCellRendererFactory; }\n    public getCellWidthAt(col : number) { return this.defaultCellWidth; }\n    public getCellHeightAt(row : number) { return this.defaultCellHeight; }\n    public getCellAt(row : number, col : number) {\n      return util.extend({\n          row : row, col : col,\n          value : this.getValueAt(row, col),\n          tooltip : this.getTooltipAt(row, col)\n        }, this.defaultCellStyle, this.getCellStyleAt(row, col) );\n    }\n    public checkSpaned(row : number, col : number) {\n      var minRow = Math.max(0, row - this.maxRowSpan);\n      var minCol = Math.max(0, col - this.maxColSpan);\n      for (var r = row; r >= minRow; r -= 1) {\n        for (var c = col; c >= minCol; c -= 1) {\n          if (r != row || c != col) {\n            var cell = this.getCellAt(r, c);\n            if (row < r + cell.rowSpan && col < c + cell.colSpan) {\n              return { row : r, col : c };\n            }\n          }\n        }\n      }\n      return null;\n    }\n    public isColumnResizableAt(col : number) { return true; }\n    public isColumnDraggable() { return true; }\n    public isColumnHiddenAt(col : number) { return false; }\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.i18n {\n\n  export interface I18N {\n    messages : Messages\n  }\n\n  export interface Messages {\n    RESET_FILTER : string;\n    EDIT_COLUMNS : string;\n    SORT_ASC : string;\n    SORT_DESC : string;\n    APPLY : string;\n    OK : string;\n    CANCEL : string;\n    RESET : string;\n    LOCK_COLUMN : string;\n    SELECT_BLANK : string;\n    SELECT_ALL : string;\n    SEARCH : string;\n    CLEAR_FILTER_FROM : string;\n    TEXT_FILTERS : string;\n    NUMBER_FILTERS : string;\n    DATE_FILTERS : string;\n    OP_LAYOUT : string;\n    AND : string;\n    OR : string;\n    EQUALS : string;\n    NOT_EQUALS : string;\n    GREATER_THAN : string;\n    GREATER_THAN_OR_EQUALS : string;\n    LESS_THAN : string;\n    LESS_THAN_OR_EQUALS : string;\n    STARTS_WITH : string;\n    NOT_STARTS_WITH : string;\n    ENDS_WITH : string;\n    NOT_ENDS_WITH : string;\n    CONTAINS : string;\n    NOT_CONTAINS : string;\n    WEEKDAYS : string;\n  }\n\n  export var getInstance = function(lang : string) {\n    lang = lang || navigator.language || (<any>navigator).userLanguage;\n    var _i18n : any = i18n;\n    return <I18N>(util.extend({}, _i18n.en, _i18n[lang] ||\n        _i18n[lang.replace(/\\-\\w+$/, '')] || {}) );\n  }\n\n  export var getMessages = function() : Messages {\n    return util.extend(\n        this.getInstance('en').messages,\n        this.getInstance().messages);\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.i18n {\n\n  /**\n   * @internal\n   */\n  export var en : I18N = {\n    messages : {\n      RESET_FILTER : 'Clear Sort and Filters',\n      EDIT_COLUMNS : 'Column Visibility and Order',\n      SORT_ASC : 'Sort Ascending',\n      SORT_DESC : 'Sort Descending',\n      APPLY : 'Apply',\n      OK : 'OK',\n      CANCEL : 'Cancel',\n      RESET : 'Reset',\n      LOCK_COLUMN : '< Lock Column >',\n      SELECT_BLANK : '(Space)',\n      SELECT_ALL : '(Select All)',\n      SEARCH : 'Search',\n      CLEAR_FILTER_FROM : 'Clear Filter From \"{0}\"',\n      TEXT_FILTERS : 'Text Filters',\n      NUMBER_FILTERS : 'Number Filters',\n      DATE_FILTERS : 'Date Filters',\n      OP_LAYOUT : 'L',\n      AND : 'AND',\n      OR : 'OR',\n      EQUALS : 'Equals',\n      NOT_EQUALS : 'Not Equals',\n      GREATER_THAN : 'Greater Than',\n      GREATER_THAN_OR_EQUALS : 'Greater Than or Equals',\n      LESS_THAN : 'Less Than',\n      LESS_THAN_OR_EQUALS : 'Less Than or Equals',\n      STARTS_WITH : 'Starts With',\n      NOT_STARTS_WITH : 'Not Starts With',\n      ENDS_WITH : 'Ends With',\n      NOT_ENDS_WITH : 'Not Ends With',\n      CONTAINS : 'Contains',\n      NOT_CONTAINS : 'Not Contains',\n      WEEKDAYS : 'Su,Mo,Tu,We,Th,Fr,Sa'\n    }\n  };\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.i18n {\n\n  /**\n   * @internal\n   */\n  export var ja : I18N = {\n    messages : {\n      RESET_FILTER : '並び替えとフィルタをクリア',\n      EDIT_COLUMNS : '列の表示と順序',\n      SORT_ASC : '昇順',\n      SORT_DESC : '降順',\n      APPLY : '適用',\n      OK : 'OK',\n      CANCEL : 'キャンセル',\n      RESET : '初期値に戻す',\n      LOCK_COLUMN : '< 列固定位置 >',\n      SELECT_BLANK : '(空白)',\n      SELECT_ALL : '(全て選択)',\n      TEXT_FILTERS : 'テキストフィルタ',\n      NUMBER_FILTERS : '数値フィルタ',\n      DATE_FILTERS : '日付フィルタ',\n      SEARCH : '検索',\n      CLEAR_FILTER_FROM : '\"{0}\" からフィルタをクリア',\n      OP_LAYOUT : 'R',\n      AND : 'AND',\n      OR : 'OR',\n      EQUALS : 'と等しい',\n      NOT_EQUALS : 'と等しくない',\n      GREATER_THAN : 'より大きい',\n      GREATER_THAN_OR_EQUALS : '以上',\n      LESS_THAN : 'より小さい',\n      LESS_THAN_OR_EQUALS : '以下',\n      STARTS_WITH : 'で始まる',\n      NOT_STARTS_WITH : 'で始まらない',\n      ENDS_WITH : 'で終わる',\n      NOT_ENDS_WITH : 'で終わらない',\n      CONTAINS : 'を含む',\n      NOT_CONTAINS : 'を含まない',\n      WEEKDAYS : '日,月,火,水,木,金,土'\n    }\n  };\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"EventTarget.ts\" />\n\nnamespace comfortable {\n\n  export interface UIEventTarget extends EventTarget {\n    invalidate : () => void;\n    render : () => void;\n  }\n\n  /**\n   * @internal\n   */\n  export class UIEventTargetImpl\n  extends EventTargetImpl implements UIEventTarget {\n    public valid = true;\n    public invalidate() {\n      this.valid = false;\n      util.callLater(function() {\n        if (!this.valid) {\n          this.valid = true;\n          this.render();\n        }\n      }.bind(this) );\n    }\n    public render() {\n    }\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"UIEventTarget.ts\" />\n\nnamespace comfortable {\n\n  /**\n   * @internal\n   */\n  export interface ElmCache {\n    $el : HTMLElement;\n    opts? : ElementOptions;\n    tableModel? : TableModel; \n    row? : number;\n    col? : number;\n    children? : ElmCache[];\n    renderer? : TableCellRenderer;\n    factory? : TableCellRendererFactory;\n  }\n\n  /**\n   * @internal\n   */\n  export interface TableState {\n    left : number;\n    top : number;\n    width : number;\n    height : number;\n    minRow : number;\n    maxRow : number;\n    minCol : number;\n    maxCol : number;\n    indexById : { [id : string] : { trIndex : number, tdIndex : number} };\n  }\n\n  /**\n   * @internal\n   */\n  export interface OffsetCache {\n    left : { [i : number] : number };\n    top : { [i : number] : number };\n  }\n\n  /**\n   * @internal\n   */\n  export interface InternalTable {\n    $el : HTMLElement;\n    left : number;\n    top : number;\n    colgroup : ElmCache;\n    tbody : ElmCache;\n    row? : number;\n    col? : number;\n    model : TableModel;\n    tableState : TableState;\n    beforeCellSizeChangeHandler : EventListener;\n    offsetCache : OffsetCache;\n    calcCellPosition : (left : number, top : number) => {\n      left : number, top : number, row : number, col : number};\n    setBounds : (rect : Rect) => void;\n    render : (cellStyleOnly : boolean) => void;\n  }\n\n  var createTableState = function() : TableState {\n    return {\n      left : 0, top : 0, width : 0, height : 0,\n      minRow : 0, maxRow : 0, minCol : 0, maxCol : 0,\n      indexById : {}\n    };\n  }\n\n  var applyCellStyle = function(elm : ElmCache, opts : ElementOptions) {\n    var diffOpts : ElementOptions = { attrs : {}, style : {}, props : {} };\n    applyCellStyleProps(elm, opts, 'attrs', diffOpts);\n    applyCellStyleProps(elm, opts, 'style', diffOpts);\n    applyCellStyleProps(elm, opts, 'props', diffOpts);\n    util.set(elm.$el, diffOpts);\n  }\n  var applyCellStyleProps = function(elm : any, opts : any,\n      propsName : string, diffOpts : any) {\n    var props = opts[propsName];\n    if (props) {\n      for (var k in props) {\n        var v = props[k];\n        if (elm.opts[propsName][k] !== v) {\n          diffOpts[propsName][k] = elm.opts[propsName][k] = v;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  export class InternalTableImpl implements InternalTable {\n\n    private _colgroup = util.createElement('colgroup');\n    private _tbody = util.createElement('tbody');\n\n    private table = util.createElement('table', {\n        attrs : { cellspacing : '0' },\n        style : {\n          tableLayout : 'fixed', position : 'absolute', lineHeight : '1'\n        }\n      }, <HTMLElement[]>[ this._colgroup, this._tbody ]);\n    private view = util.createElement('div', {\n      style : { overflow : 'hidden', position : 'relative' },\n      on : { scroll : (event) => {\n         this.view.scrollLeft = 0;  this.view.scrollTop = 0; } }\n    }, [ this.table ]);\n\n    private getOrCrt(tagName : string, index : number,\n        parent : ElmCache, init? : (elm : ElmCache) => void ) {\n      if (parent.children && index < parent.children.length) {\n        return parent.children[index];\n      }\n      if (!parent.children) {\n        parent.children = [];\n      }\n      var elm : ElmCache = { $el : document.createElement(tagName) };\n      if (init) {\n        init(elm);\n      }\n      parent.$el.appendChild(elm.$el);\n      parent.children.push(elm);\n      return elm;\n    }\n\n    private getCellStyle(cell : TableCellStyle) : ElementOptions {\n      return {\n        attrs : { 'class' : cell.className },\n        style : {\n          textAlign : cell.textAlign,\n          verticalAlign : cell.verticalAlign,\n          color : cell.color,\n          backgroundColor : cell.backgroundColor,\n          fontWeight : cell.fontWeight,\n          borderLeft : cell.borderLeft,\n          borderRight : cell.borderRight,\n          borderTop : cell.borderTop,\n          borderBottom : cell.borderBottom\n        }\n      };\n    }\n    public $el = this.view;\n    public colgroup : ElmCache = { $el : this._colgroup };\n    public tbody : ElmCache = { $el : this._tbody };\n    public left = 0;\n    public top = 0;\n    public model : TableModel = null;\n    public tableState = createTableState();\n\n    public offsetCache : OffsetCache = null;\n    public beforeCellSizeChangeHandler : EventListener = null;\n    public calcCellPosition(left : number, top : number) {\n\n      var tableModel : TableModel = this.model;\n\n      // offset cache\n      if (this.beforeCellSizeChangeHandler == null) {\n        this.beforeCellSizeChangeHandler = (event : Event, detail : any) => {\n          // note: 'this' bind to inner-table's.\n          this.offsetCache = null;\n        };\n      }\n      tableModel.off('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      tableModel.on('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      this.offsetCache = this.offsetCache || { left : {}, top : {} };\n      var prec = 1000;\n      var offsetLeftCache : {[i : number] : number} = this.offsetCache.left;\n      var offsetTopCache : {[i : number] : number} = this.offsetCache.top;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n\n      var rowCount = tableModel.getRowCount();\n      var columnCount = tableModel.getColumnCount();\n      var cellWidth = 0;\n      var cellHeight = 0;\n      var col = 0;\n      var row = 0;\n\n      var leftCache : { col : number, offset : number } = null;\n      var topCache : { row : number, offset : number } = null;\n      for (var i = 0; typeof offsetLeftCache[i] == 'number'; i += prec) {\n        if (left + offsetLeftCache[i] <= 0) {\n          leftCache = { col : i, offset : offsetLeftCache[i] };\n        }\n      }\n      for (var i = 0; typeof offsetTopCache[i] == 'number'; i += prec) {\n        if (top + offsetTopCache[i] <= 0) {\n          topCache = { row : i, offset : offsetTopCache[i] };\n        }\n      }\n      if (leftCache) {\n        col = leftCache.col;\n        left += leftCache.offset;\n        offsetLeft += leftCache.offset;\n      }\n      if (topCache) {\n        row = topCache.row;\n        top += topCache.offset;\n        offsetTop += topCache.offset;\n      }\n\n      for (; col < columnCount; col += 1,\n          left += cellWidth, offsetLeft += cellWidth) {\n        if (col % prec == 0) {\n          offsetLeftCache[col] = offsetLeft;\n        }\n        cellWidth = tableModel.getCellWidthAt(col);\n        if (left + cellWidth <= 0) {\n          continue;\n        }\n        break;\n      }\n      for (; row < rowCount; row += 1,\n          top += cellHeight, offsetTop += cellHeight) {\n        if (row % prec == 0) {\n          offsetTopCache[row] = offsetTop;\n        }\n        cellHeight = tableModel.getCellHeightAt(row);\n        if (top + cellHeight <= 0) {\n          continue;\n        }\n        break;\n      }\n      if (row < rowCount && col < columnCount) {\n        var spaned = tableModel.checkSpaned(row, col);\n        if (spaned) {\n          while (row > spaned.row) {\n            row -= 1;\n            top -= tableModel.getCellHeightAt(row);\n          }\n          while (col > spaned.col) {\n            col -= 1;\n            left -= tableModel.getCellWidthAt(col);\n          }\n        }\n      }\n      return { left : left, col : col, top : top, row : row };\n    }\n\n    private preRender() {\n\n      var width = this.rect.width;\n      var height = this.rect.height;\n      var rowCount = this.model.getRowCount();\n      var columnCount = this.model.getColumnCount();\n\n      var cellPos = this.calcCellPosition(this.left, this.top);\n\n      var tableState = createTableState();\n      tableState.top = cellPos.top;\n      tableState.minRow = cellPos.row;\n      tableState.left = cellPos.left;\n      tableState.minCol = cellPos.col;\n\n      var top = cellPos.top;\n      var row = cellPos.row;\n      var trIndex = 0;\n      while (row < rowCount && top < height) {\n        var cellHeight = this.model.getCellHeightAt(row);\n        var tr = this.getOrCrt('tr', trIndex, this.tbody);\n        tr.$el.style.height = cellHeight + 'px';\n        tr.$el.style.display = '';\n        tableState.height += cellHeight;\n        top += cellHeight;\n        row += 1;\n        trIndex += 1;\n      }\n      for (;trIndex < this._tbody.childNodes.length; trIndex += 1) {\n        (<HTMLElement>this._tbody.childNodes[trIndex]).style.display = 'none';\n      }\n      tableState.maxRow = Math.min(rowCount, tableState.minRow +\n          (this.tbody.children? this.tbody.children.length : 0) ) - 1;\n\n      var left = cellPos.left;\n      var col = cellPos.col;\n      var colIndex = 0;\n      while (col < columnCount && left < width) {\n        var cellWidth = this.model.getCellWidthAt(col);\n        this.getOrCrt('col', colIndex, this.colgroup).\n          $el.style.width = cellWidth + 'px';\n        tableState.width += cellWidth;\n        left += cellWidth;\n        col += 1;\n        colIndex += 1;\n      }\n      for (;colIndex < this._colgroup.childNodes.length; colIndex += 1) {\n        (<HTMLElement>this._colgroup.childNodes[colIndex]).style.width = '0px';\n      }\n      tableState.maxCol = Math.min(columnCount, tableState.minCol +\n          (this.colgroup.children? this.colgroup.children.length : 0) ) - 1;\n\n      return tableState;\n    }\n    private rect : Rect;\n    public setBounds(rect : Rect) {\n      this.rect = rect;\n      util.extend(this.$el.style, {\n        left : rect.left + 'px', top : rect.top + 'px',\n        width : rect.width + 'px', height : rect.height + 'px' });\n    }\n    public render(cellStyleOnly : boolean) {\n\n      var tableState = this.preRender();\n      var spaned : { [id : string] : boolean } = {};\n\n      var setSpaned = function(row : number, col : number,\n          td : HTMLTableDataCellElement, cell : TableCellStyle) {\n        td.rowSpan = cell.rowSpan;\n        td.colSpan = cell.colSpan;\n        if (cell.rowSpan == 1 && cell.colSpan == 1) {\n          return;\n        }\n        for (var r = 0; r < cell.rowSpan; r += 1) {\n          for (var c = 0; c < cell.colSpan; c += 1) {\n            if (r != 0 || c != 0) {\n              var id = util.getCellId(row + r, col + c);\n              spaned[id] = true;\n            }\n          }\n        }\n      };\n\n      var tableModel : TableModel = this.model;\n      var initCell = function(td : ElmCache) {\n        td.opts = { attrs : {}, style : {}, props : {} };\n        td.renderer = null;\n        td.tableModel = tableModel;\n        td.$el.style.overflow = 'hidden';\n        td.$el.style.whiteSpace = 'nowrap';\n        td.$el.style.position = 'relative';\n      };\n\n      for (var row = tableState.minRow; row <= tableState.maxRow; row += 1) {\n\n        var trIndex = row - tableState.minRow;\n        var tr = this.tbody.children[trIndex];\n\n        var tdIndex = 0;\n        for (var col = tableState.minCol; col <= tableState.maxCol; col += 1) {\n\n          var id = util.getCellId(row, col);\n          if (spaned[id]) {\n            continue;\n          }\n          tableState.indexById[id] = { trIndex : trIndex, tdIndex : tdIndex };\n\n          var td = this.getOrCrt('td', tdIndex, tr, initCell);\n          td.row = row;\n          td.col = col;\n\n          var cell = tableModel.getCellAt(row, col);\n          setSpaned(row, col, <HTMLTableDataCellElement>td.$el, cell);\n\n          var factory = tableModel.getCellRendererFactoryAt(row, col);\n          if (td.factory != factory) {\n            td.factory = factory;\n            if (td.renderer) {\n              td.renderer.dispose();\n            }\n\n            while (td.$el.firstChild) {\n              td.$el.removeChild(td.$el.firstChild);\n            }\n\n            td.renderer = renderer.attachTooltipFeature(\n              <TdWrapper>td, td.factory(<TdWrapper>td) );\n          }\n\n          applyCellStyle(td, this.getCellStyle(cell) );\n          if (td.renderer.getCellStyle) {\n            applyCellStyle(td, td.renderer.getCellStyle(cell) );\n          }\n\n          if (!cellStyleOnly) {\n            td.renderer.render(cell);\n          }\n\n          tdIndex += 1;\n        }\n      }\n\n      util.extend(this.table.style, {\n        left : tableState.left + 'px',\n        top : tableState.top + 'px',\n        width : tableState.width + 'px',\n        height : tableState.height + 'px'\n      });\n\n      this.tableState = tableState;\n    }\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"UIEventTarget.ts\" />\n\nnamespace comfortable {\n\n  export interface List<T,C extends ListCell> extends UIEventTarget {\n    $el : HTMLElement;\n    getItemAt : (index : number) => T;\n    getItemCount : () => number;\n    createCell : () => C;\n    renderCell : (cell : C, item : T) => void;\n    cellHeight : number;\n  }\n\n  export interface ListCell {\n    $el : HTMLElement;\n    row : number;\n  }\n\n  /**\n   * @internal\n   */\n  export class ListImpl<T,C extends ListCell>\n  extends UIEventTargetImpl implements List<T,C> {\n\n    private listContent = util.createElement('div', {\n      style : { position : 'absolute' } });\n    private list = { $el :  util.createElement('div', {\n      style : { position : 'absolute',\n        overflow : 'hidden', whiteSpace:'nowrap' } }, [ this.listContent ]) };\n\n    private scr = util.createElement('div', {\n      style : { position : 'absolute' } });\n\n    private viewPane = util.createElement('div', {\n        style : { position : 'absolute',\n          overflowX : 'hidden', overflowY : 'auto' },\n        on : { scroll : (event) => { this.render(); } }\n      }, [this.scr]);\n  \n    private frame = util.createElement('div', {\n        style : { position : 'relative', overflow : 'hidden',\n          width : '100px', height : '100px' },\n        on : {\n          wheel : (event) => {\n            this.viewPane.scrollLeft += event.deltaX;\n            this.viewPane.scrollTop += event.deltaY;\n          }\n        } },[ this.viewPane, this.list.$el ]);\n\n    private cells : C[] = [];\n    private getOrCrt(index : number) {\n      if (index < this.cells.length) {\n        return this.cells[index];\n      }\n      var cell = this.createCell();\n      this.listContent.appendChild(cell.$el);\n      this.cells.push(cell);\n      return cell;\n    };\n\n    public $el = this.frame;\n    public getItemAt(index : number) : T { return <any>'item' + index; }\n    public getItemCount() { return 100000; }\n    public createCell() : C {\n      return <any>{ $el : util.createElement('div', {\n        props : { textContent : 'M' },\n        style : { borderBottom : '1px solid silver' }\n      }), row : -1 };\n    }\n    public renderCell(cell : C, item : T) {\n      cell.$el.textContent = <any>item;\n    }\n    public cellHeight = -1;\n    public render() {\n\n      util.set(this.viewPane, { style : {\n        left : '0px', top : '0px',\n        width : this.$el.offsetWidth + 'px',\n        height : this.$el.offsetHeight + 'px'\n      } });\n\n      if (this.cellHeight == -1) {\n        this.cellHeight = this.getOrCrt(0).$el.offsetHeight;\n      }\n      var viewHeight = this.cellHeight * this.getItemCount();\n      var scrHeight = Math.min(viewHeight, 1E6);\n\n      var listTop = -(scrHeight > this.viewPane.clientHeight?\n          util.translate(this.viewPane.scrollTop,\n          0, scrHeight - this.viewPane.clientHeight,\n          0, viewHeight - this.viewPane.clientHeight,\n          'list.top') : 0);\n\n      var minRow = Math.floor(-listTop / this.cellHeight);\n      var maxRow = Math.min(this.getItemCount() - 1,\n          Math.floor( (-listTop + this.viewPane.clientHeight) / this.cellHeight) );\n      var top = listTop + minRow * this.cellHeight;\n\n      util.set(this.listContent, { style : { left : '0px', top : top + 'px' } });\n\n      var cellIndex = 0;\n      for (var row = minRow; row <= maxRow; row += 1) {\n        var cell = this.getOrCrt(cellIndex);\n        cell.row = row;\n        cell.$el.style.display = '';\n        this.renderCell(cell, this.getItemAt(row) );\n        cellIndex += 1;\n      }\n      for (; cellIndex < this.cells.length; cellIndex += 1) {\n        this.cells[cellIndex].$el.style.display = 'none';\n      }\n\n      util.set(this.scr, { style : {\n        left : '0px', top : '0px',\n        width : this.$el.offsetWidth + 'px',\n        height : scrHeight + 'px'\n      } });\n\n      util.set(this.list.$el, { style : {\n        whiteSpace : 'nowrap',\n        width : this.viewPane.clientWidth + 'px',\n        height : this.viewPane.clientHeight + 'px'\n      } });\n\n      this.trigger('rendered', {\n        listState : { minRow : minRow, maxRow : maxRow } } );\n    }\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.renderer {\n\n  export class CheckBox implements CellEditor<HTMLInputElement> {\n\n    private booleanValues : any[] = null;\n    private defaultValue : any;\n\n    private tableModel : TableModel;\n    private cell : TableCell;\n\n    constructor() {\n    }\n\n    public $el = <HTMLInputElement>util.createElement('input', {\n      attrs : { type : 'checkbox', 'class' : '${prefix}-editor',\n        tabindex : '-1' },\n      on : {\n        blur : (event) => {\n          this.tableModel.trigger('valuecommit', this.cell);\n        },\n        keydown : (event) => {\n\n          if (!this.cell.editable) {\n            return;\n          }\n\n          switch(event.keyCode) {\n          case 27: // Esc\n            this.setValue(this.defaultValue);\n            break;\n          }\n        }\n      }\n    });\n\n    public setVisible(visible : boolean) {\n      this.$el.style.display = visible? '' : 'none';\n    }\n\n    public beginEdit(td : TdWrapper, cell : CheckBoxCell) {\n\n      this.tableModel = td.tableModel;\n      this.cell = cell;\n\n      var cs = window.getComputedStyle(td.$el, null);\n      util.set(this.$el, {\n        props : { disabled : !cell.editable },\n        style : {\n        }\n      });\n      this.booleanValues = cell.booleanValues || [false, true];\n    }\n    public focus() {\n      this.$el.focus();\n      this.$el.select();\n    }\n    public blur() {\n      this.$el.blur();\n    }\n    public setValue(value : any) {\n      this.defaultValue = value;\n      this.$el.checked = (value === this.booleanValues[1]);\n    }\n    public getValue() {\n      return this.booleanValues[this.$el.checked? 1 : 0];\n    }\n    public isValid() {\n      return true;\n    }\n  }\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.renderer {\n\n  export class SelectBox implements CellEditor<HTMLSelectElement> {\n\n    private defaultValue : any;\n    private lastOptions : any[];\n\n    private tableModel : TableModel;\n    private cell : TableCell;\n\n    constructor() {\n    }\n\n    public $el = <HTMLSelectElement>util.createElement('select', {\n      attrs : { 'class' : '${prefix}-editor' },\n      on : {\n        blur : (event) => {\n          this.tableModel.trigger('valuecommit', this.cell);\n        },\n        keydown : (event) => {\n\n          if (!this.cell.editable) {\n            return;\n          }\n\n          switch(event.keyCode) {\n          case 27: // Esc\n            this.setValue(this.defaultValue);\n            break;\n          }\n        }\n      }\n    });\n\n    public setVisible(visible : boolean) {\n      this.$el.style.display = visible? '' : 'none';\n    }\n\n    public beginEdit(td : TdWrapper, cell : SelectBoxCell) {\n\n      this.tableModel = td.tableModel;\n      this.cell = cell;\n\n      var cs = window.getComputedStyle(td.$el, null);\n      util.set(this.$el, {\n        props : { disabled : !cell.editable },\n        style : {\n          textAlign : cs.textAlign,\n          verticalAlign : cs.verticalAlign,\n          color : cs.color,\n          backgroundColor : cs.backgroundColor,\n          fontFamily : cs.fontFamily,\n          fontSize : cs.fontSize,\n          fontWeight : cs.fontWeight\n        }\n      });\n\n      var options = SelectBox.getOptions(cell);\n      var labelField = cell.labelField || 'label';\n      var valueField = cell.valueField || 'value';\n\n      var changed = function() {\n        if (!this.lastOptions || this.lastOptions.length != options.length) {\n          return true;\n        }\n        for (var i = 0; i < options.length; i += 1) {\n          var option = options[i];\n          var lastOption = this.lastOptions[i];\n          if (option[labelField] != option[labelField] ||\n              option[valueField] != option[valueField]) {\n            return true;\n          }\n        }\n        return false;\n      }.bind(this)();\n\n      if (changed) {\n        while (this.$el.childNodes.length < options.length) {\n          this.$el.appendChild(util.createElement('option') );\n        }\n        var i = 0;\n        for (; i < options.length; i += 1) {\n          var option = options[i];\n          util.set(this.$el.childNodes[i], {\n            style : { display : '' },\n            props : { textContent : option[labelField],\n              value : option[valueField] || '' }\n          });\n        }\n        while (this.$el.childNodes.length > options.length) {\n          this.$el.removeChild(this.$el.lastChild);\n        }\n        // IE9 does not support style.display=none for option.\n        /*\n        for (;i < select.childNodes.length; i += 1) {\n          select.childNodes[i].style.display = 'none';\n        }\n        */\n\n        this.lastOptions = options;\n      }\n    }\n    public focus() {\n      this.$el.focus();\n    }\n    public blur() {\n      this.$el.blur();\n    }\n    public setValue(value : any) {\n      this.defaultValue = value;\n      this.$el.value = value || '';\n    }\n    public getValue() {\n      return this.$el.value;\n    }\n    public isValid() {\n      return true;\n    }\n\n    public static getOptions(cell : SelectBoxCell) : any[] {\n      var options : any = cell.options;\n      if (typeof options == 'function') {\n        options = options(cell.row, cell.col);\n      }\n      return options || [];\n    }\n  }\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.renderer {\n\n  export var createTextEditorDateField =\n      function(editor : TextEditor) : TextEditorDelegator {\n\n    var getDate = function() : Date {\n      if (editor.isValid() ) {\n        var value = <string>editor.getValue();\n        if (value) {\n          return new Date(\n            +value.substring(0, 4),\n            +value.substring(4, 6) - 1,\n            +value.substring(6, 8) );\n        }\n      }\n      return null;\n    };\n\n    var setSelectedDate = (date : Date) => {\n      editor.textfield.value = util.formatDate(util.parseDate(date) );\n    };\n\n    var rollDate = (offset : number) => {\n      var date = getDate();\n      if (date) {\n        date.setDate(date.getDate() + offset);\n        setSelectedDate(date);\n      }\n    };\n\n    util.set(editor.textfield, {\n      style : { flex: '1 1 0%' },\n        on : {\n          keydown : (event) => {\n\n          if (!editor.cell.editable) {\n            return;\n          }\n\n          var canceled = false;\n          switch(event.keyCode) {\n          case 27: // Esc\n            // fall through.\n            canceled = true;\n          case 13: // Enter\n            if (cal) {\n              event.preventDefault();\n              event.stopPropagation();\n              hideCal();\n              editor.textfield.select();\n            } else {\n              if (canceled) {\n                editor.setValue(editor.defaultValue);\n              }\n            }\n            break;\n          case 32: // Space\n            event.preventDefault();\n            if (cal) {\n            } else {\n              showCal();\n            }\n            break;\n          case 37: // Left\n            if (cal != null) {\n              event.preventDefault();\n              cal.rollDate(-1);\n              setSelectedDate(cal.getSelectedDate() );\n            }\n            break;\n          case 38: // Up\n            event.preventDefault();\n            if (cal != null) {\n              cal.rollDate(-7);\n              setSelectedDate(cal.getSelectedDate() );\n            } else {\n              rollDate(-1);\n              editor.textfield.select();\n            }\n            break;\n          case 39: // Right\n            if (cal != null) {\n              event.preventDefault();\n              cal.rollDate(1);\n              setSelectedDate(cal.getSelectedDate() );\n            }\n            break;\n          case 40: // Down\n            event.preventDefault(); \n            if (cal != null) {\n              cal.rollDate(7);\n              setSelectedDate(cal.getSelectedDate() );\n            } else {\n              rollDate(1);\n              editor.textfield.select();\n            }\n            break;\n          default:\n            break;\n          }\n        },\n        blur : function() {\n          hideCal();\n        }\n      }\n    });\n\n    var cal : any = null;\n\n    var mousedownHandler = function(event : any) {\n      if (cal && util.closest(event.target, { $el: cal.$el }) ) {\n      } else if (util.closest(event.target, { $el: button }) ) {\n      } else {\n        hideCal();\n      }\n    };\n    var showCal = function() {\n      if (cal) {\n        hideCal();\n      }\n      cal = ui.createCalendar(getDate() || new Date() )\n        .on('click', function(event : any, date : Date) {\n          setSelectedDate(date);\n          hideCal();\n        });\n      editor.enableEvent = false;\n      var off = util.offset(editor.textfield);\n      util.set(cal.$el, { style: {\n        position: 'absolute',\n        left : off.left + 'px',\n        top : (off.top + editor.textfield.offsetHeight) + 'px' } });\n      document.body.appendChild(cal.$el);\n      util.$(document).on('mousedown', mousedownHandler);\n    };\n    var hideCal = function() {\n      if (cal) {\n        document.body.removeChild(cal.$el);\n        util.$(document).off('mousedown', mousedownHandler);\n        cal = null;\n        editor.enableEvent = true;\n      }\n    };\n    var button = util.createElement('span', {\n      attrs : { 'class' : '${prefix}-cal-icon-button' },\n      on : {\n        mousedown : function(event) {\n          event.preventDefault();\n        },\n        click : (event) => {\n          if (!editor.cell.editable) {\n            return;\n          }\n          if (cal) {\n            hideCal();\n          } else {\n            showCal() ;\n          }\n        }\n      }\n    }, [ ui.createCalIcon(), ui.createSpacer() ]);\n\n    var setValue = function(value : any)  {\n      value = util.formatDate(value);\n      editor.textfield.value = (value === null)? '' : value;\n    };\n    var getValue = function() : any  {\n      return util.parseDate(\n          util.toNarrowNumber(editor.textfield.value) );\n    };\n    var visibleState = 'flex';\n\n    return {\n      body : util.createElement('div', {\n          style : { display: visibleState,\n            width: '100%', height: '100%' }\n        }, [ editor.textfield, button ] ),\n      button : button,\n      setValue : setValue,\n      getValue : getValue,\n      visibleState : visibleState\n    };\n  }\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.renderer {\n\n  /**\n   * @internal\n   */\n  export interface OptionsData {\n    selectedIndex : number;\n    options : any[];\n    labelField : string;\n    valueField : string;\n    selectableField : string;\n    disabledField : string;\n  }\n\n  export var createTextEditorSelectBox =\n      function(editor : TextEditor) : TextEditorDelegator {\n\n    var setSelectedIndex = (index : number) => {\n      optionsData.selectedIndex = index;\n      editor.textfield.value = index == -1? '' :\n        optionsData.options[index][optionsData.labelField];\n    };\n\n    var selectable = (index : number) => {\n      return optionsData.options[index][optionsData.selectableField] !== false;\n    };\n\n    var rollIndex = (offset : number) => {\n      var index = optionsData.selectedIndex;\n      while (offset != 0 && 0 <= index + offset &&\n          index + offset < optionsData.options.length) {\n        index += offset;\n        if (selectable(index) ) {\n          setSelectedIndex(index);\n          break;\n        }\n      }\n      if (0 <= index && index < optionsData.options.length) {\n        // do nothing.\n      } else {\n        setSelectedIndex(-1);\n      }\n    };\n\n    util.set(editor.textfield, {\n      style : { flex: '1 1 0%' },\n      on : {\n        keydown : (event) => {\n\n          if (!editor.cell.editable) {\n            return;\n          }\n\n          var canceled = false;\n          switch(event.keyCode) {\n          case 27: // Esc\n            // fall through.\n            canceled = true;\n          case 13: // Enter\n            if (options) {\n              event.preventDefault();\n              event.stopPropagation();\n              hideOptions();\n              editor.textfield.select();\n            } else {\n              if (canceled) {\n                editor.setValue(editor.defaultValue);\n              }\n            }\n            break;\n          case 32: // Space\n            event.preventDefault();\n            if (options) {\n            } else {\n              showOptions();\n            }\n            break;\n          case 37: // Left\n            break;\n          case 38: // Up\n            event.preventDefault();\n            if (options != null) {\n              options.rollIndex(-1);\n              setSelectedIndex(options.getSelectedIndex() );\n            } else {\n              rollIndex(-1);\n              editor.textfield.select();\n            }\n            break;\n          case 39: // Right\n            break;\n          case 40: // Down\n            event.preventDefault(); \n            if (options != null) {\n              options.rollIndex(1);\n              setSelectedIndex(options.getSelectedIndex() );\n            } else {\n              rollIndex(1);\n              editor.textfield.select();\n            }\n            break;\n          default:\n            break;\n          }\n        },\n        blur : function() {\n          if (!optionsMouseDown) {\n            hideOptions();\n          }\n        }\n      }\n    });\n\n    var options : any = null;\n    var optionsData : OptionsData = null;\n    var optionsMouseDown = false;\n\n    var mousedownHandler = function(event : any) {\n      if (options && util.closest(event.target, { $el: options.$el }) ) {\n      } else if (util.closest(event.target, { $el: button }) ) {\n      } else {\n        hideOptions();\n      }\n    };\n    var showOptions = function() {\n\n      if (options) {\n        hideOptions();\n      }\n\n      options = ui.createOptions(optionsData)\n        .on('click', function(event : any, detail : any) {\n          setSelectedIndex(detail.index);\n          hideOptions();\n          editor.textfield.select();\n        });\n      editor.enableEvent = false;\n      var target = editor.$el;\n      var off = util.offset(target);\n      util.set(options.$el, {\n        style: {\n          position: 'absolute',\n          left : off.left + 'px',\n          top : (off.top + target.offsetHeight) + 'px',\n          minWidth : target.offsetWidth + 'px',\n          maxHeight : '200px'\n        },\n        on: {\n          mousedown: function(event) {\n            var mouseupHandler = function() {\n              util.$(document).off('mouseup', mouseupHandler);\n              optionsMouseDown = false;\n            };\n            util.$(document).on('mouseup', mouseupHandler);\n            optionsMouseDown = true;\n          }\n        }\n      });\n      document.body.appendChild(options.$el);\n      util.$(document).on('mousedown', mousedownHandler);\n      // force updateUI\n      options.rollIndex(0);\n    };\n    var hideOptions = function() {\n      if (options) {\n        document.body.removeChild(options.$el);\n        util.$(document).off('mousedown', mousedownHandler);\n        options = null;\n        editor.enableEvent = true;\n      }\n    };\n    var button = util.createElement('span', {\n      attrs : { 'class' : '${prefix}-options-icon-button' },\n      on : {\n        mousedown : function(event) {\n          event.preventDefault();\n        },\n        click : (event) => {\n          if (!editor.cell.editable) {\n            return;\n          }\n          if (options) {\n            hideOptions();\n          } else {\n            showOptions() ;\n          }\n        }\n      }\n    }, [ ui.createOptionsIcon(), ui.createSpacer() ]);\n\n    var setValue = function(value : any)  {\n      var selectedIndex = -1;\n      for (var i = 0; i < optionsData.options.length; i += 1) {\n        var option = optionsData.options[i];\n        if (selectedIndex == -1 &&\n            option[optionsData.valueField] === value) {\n          selectedIndex = i;\n        }\n      }\n      setSelectedIndex(selectedIndex);\n    };\n    var getValue = function() : any  {\n      return optionsData.selectedIndex == -1? null :\n        optionsData.options[optionsData.selectedIndex]\n        [optionsData.valueField];\n    };\n    var visibleState = 'flex';\n    var beginEdit = function(td : TdWrapper, cell : SelectBoxCell) {\n      optionsData = {\n        selectedIndex : -1,\n        options : SelectBox.getOptions(cell),\n        labelField : cell.labelField || 'label',\n        valueField : cell.valueField || 'value',\n        selectableField : cell.selectableField || 'selectable',\n        disabledField : cell.disabledField || 'disabled'\n      };\n    };\n\n    return {\n      body : util.createElement('div', {\n          style : { display: visibleState,\n            width: '100%', height: '100%' }\n        }, [ editor.textfield, button ] ),\n      button : button,\n      setValue : setValue,\n      getValue : getValue,\n      visibleState : visibleState,\n      readOnlyText : true,\n      beginEdit : beginEdit\n    };\n  }\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.renderer {\n\n  /**\n   * @internal\n   */\n  export interface TextEditorDelegator {\n    body : HTMLElement;\n    button : HTMLElement;\n    getValue() : any;\n    setValue(value : any) : void;\n    visibleState : string;\n    readOnlyText? : boolean;\n    beginEdit? : (td : TdWrapper, cell : TableCell) => void;\n  }\n\n  export class TextEditor implements CellEditor<HTMLElement> {\n\n    private lastStyle : any;\n\n    public defaultValue : any;\n    private valueType : string;\n\n    private tableModel : TableModel;\n    public cell : TableCell;\n\n    public $el : HTMLElement;\n    public textfield : HTMLInputElement;\n    public enableEvent = true;\n\n    private dataType : string;\n    private decimalDigits : number;\n    private delegator : TextEditorDelegator;\n\n    constructor(dataType : string) {\n\n      this.dataType = dataType;\n\n      this.lastStyle = {};\n\n      if (dataType == 'multi-line-string') {\n        this.textfield = <HTMLInputElement>util.createElement('textarea', {\n          attrs : { 'class' : '${prefix}-editor', rows : '1',\n            tabindex : '-1' },\n          on : {\n            blur : (event) => {\n              this.tableModel.trigger('valuecommit', this.cell);\n            },\n            keydown : (event) => {\n              if (event.keyCode == 13) { // Enter\n                event.stopPropagation();\n              }\n            }\n          }\n        });\n      } else {\n        this.textfield = <HTMLInputElement>util.createElement('input', {\n          attrs : { type : 'text', 'class' : '${prefix}-editor',\n            tabindex : '-1' },\n          on : { blur : (event) => {\n            if (this.enableEvent) {\n              this.tableModel.trigger('valuecommit', this.cell); } }\n            }\n        });\n      }\n\n      if (dataType == 'date') {\n\n        var df = createTextEditorDateField(this);\n\n        this.$el = df.body;\n        this.delegator = df;\n\n      } else if (dataType == 'select-one') {\n\n        var sb = createTextEditorSelectBox(this);\n\n        this.$el = sb.body;\n        this.delegator = sb;\n\n      } else {\n\n        util.set(this.textfield, {\n          on : { keydown : (event) => {\n\n            if (!this.cell.editable) {\n              return;\n            }\n\n            switch(event.keyCode) {\n            case 27: // Esc\n              this.setValue(this.defaultValue);\n              break;\n            }\n          } }\n        });\n\n        this.$el = this.textfield;\n        this.delegator = null;\n      }\n    }\n\n    public setVisible(visible : boolean) {\n      if (this.delegator) {\n        this.$el.style.display = visible?\n          this.delegator.visibleState : 'none';\n      } else {\n        this.$el.style.display = visible? '' : 'none';\n      }\n    }\n\n    public beginEdit(td : TdWrapper, cell : TextEditorCell) {\n\n      this.tableModel = td.tableModel;\n      this.cell = cell;\n      this.decimalDigits = cell.decimalDigits;\n\n      var imeMode = '';\n      if (typeof cell.imeMode == 'string') {\n        imeMode = cell.imeMode;\n      } else {\n        if (this.dataType == 'number' ||\n            this.dataType == 'date' ||\n            this.dataType == 'select-one') {\n          imeMode = 'disabled';\n        }\n      }\n\n        delete this.textfield.maxLength;\n      if (typeof cell.maxLength == 'number') {\n        this.textfield.maxLength = cell.maxLength;\n      }\n\n      var readOnly = !cell.editable;\n      if (this.delegator && this.delegator.readOnlyText) {\n        // force readOnly\n        readOnly = true;\n      }\n\n      var cs = window.getComputedStyle(td.$el, null);\n      var opts : ElementOptions = {\n          props : { readOnly : readOnly },\n          style : this.getChangedStyle({\n            imeMode : imeMode,\n            textAlign : cs.textAlign,\n            verticalAlign : cs.verticalAlign,\n            color : cs.color,\n            backgroundColor : 'transparent',\n            fontFamily : cs.fontFamily,\n            fontSize : cs.fontSize,\n            fontWeight : cs.fontWeight,\n            outline : cell.editable? '' : 'none'\n          })\n        };\n      util.set(this.textfield, opts);\n      if (this.delegator) {\n        this.delegator.button.style.opacity = cell.editable? '' : '0.5';\n        if (this.delegator.beginEdit) {\n          this.delegator.beginEdit(td, cell);\n        }\n      }\n    }\n    private getChangedStyle(style : any) : any {\n      var changed : any = {};\n      for (var k in style) {\n        var v = style[k];\n        if (this.lastStyle[k] !== v) {\n          this.lastStyle[k] = changed[k] = v;\n        }\n      }\n      return changed;\n    }\n    public focus() {\n      this.textfield.focus();\n      this.textfield.select();\n    }\n    public blur() {\n      this.textfield.blur();\n      // deselect\n      var value =  this.textfield.value;\n      this.textfield.value = '';\n      this.textfield.value = value;\n    }\n    public setValue(value : any) {\n      this.defaultValue = value;\n      this.valueType = typeof value;\n      if (this.delegator) {\n        this.delegator.setValue(value);\n      //} else if (this.opts.dataType == 'number') {\n      } else {\n        this.textfield.value = (value === null)? '' : value;\n      }\n    }\n    public getValue() {\n      if (this.defaultValue === null && this.textfield.value == '') {\n        return null;\n      } else if (this.delegator) {\n        return this.delegator.getValue();\n      } else if (this.dataType == 'number') {\n        var value = util.formatNumber(\n            util.toNarrowNumber(this.textfield.value),\n            this.decimalDigits, '');\n        return this.valueType == 'number'? +value : value;\n      } else {\n        return util.rtrim(this.textfield.value);\n      }\n    }\n    public isValid() {\n      if (this.dataType == 'number') {\n        return !!('' + this.getValue() ).match(util.numRe);\n      } else if (this.dataType == 'date') {\n        return !!('' + this.getValue() ).match(/^(\\d{8})?$/);\n      }\n      return true;\n    }\n  }\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.renderer {\n\n  interface Tooltip {\n    $el : HTMLElement;\n    text : string;\n    show : (text : string) => void;\n    dispose : () => void;\n  }\n\n  var createTooltip = function(td : TdWrapper) : Tooltip {\n    var size = 6;\n    var tooltip : { dispose : () => void } = null;\n    var mouseoverHandler = function(event : any) {\n      if (!mark.text) {\n        return;\n      }\n      dispose();\n      tooltip = showTooltip(td, mark.text);\n    };\n    var mouseoutHandler = function(event : any) {\n      dispose();\n    };\n    var dispose = function() {\n      if (tooltip) {\n        tooltip.dispose();\n        tooltip = null;\n      }\n    };\n    util.$(td.$el)\n      .on('mouseover', mouseoverHandler)\n      .on('mouseout', mouseoutHandler);\n    var mark = {\n      $el : util.createSVGElement('svg', {\n        style : { position : 'absolute', right : '0px', top : '0px'},\n        attrs : { width : '' + size, height : '' + size,\n          tabindex: '-1', focusable: 'false',\n          'class' : '${prefix}-tooltip-corner' } }, [\n        util.createSVGElement('path', {\n          attrs : { d : 'M0 0L' + size + ' 0L' + size + ' ' + size + 'Z' }\n        })\n      ]),\n      text : '',\n      show : function(text : string) {\n        this.text = text;\n        this.$el.style.display = text? '' : 'none';\n      },\n      dispose : function() {\n        util.$(td.$el)\n          .off('mouseover', mouseoverHandler)\n          .off('mouseout', mouseoutHandler);\n        dispose();\n      }\n    };\n    return mark;\n  };\n\n  var calcOffset = function(td : TdWrapper) {\n    var off = util.offset(td.$el);\n    var frame = util.closest(td.$el, { tagName : 'DIV' });\n    var frameOff = util.offset(frame);\n    var offsetWidth = td.$el.offsetWidth;\n    var displayWidth = offsetWidth;\n    /*\n    if (off.left + displayWidth > frameOff.left + frame.offsetWidth) {\n      displayWidth = frameOff.left + frame.offsetWidth - off.left;\n    }\n    */\n    return {\n      left : off.left,\n      top : off.top,\n      offsetWidth : offsetWidth,\n      displayWidth : displayWidth\n    };\n  };\n\n  var showTooltip = function(td : TdWrapper, text : string) {\n\n    var barW = 10;\n    var barH = 6;\n\n    var off = calcOffset(td);\n\n    var box = util.createElement('div', {\n      style : { position : 'absolute' },\n      attrs : { 'class' : '${prefix}-tooltip-box' } });\n    createMultiLineLabelRenderer(box).setLabel(text);\n    document.body.appendChild(box);\n\n    var rblt = off.left + off.displayWidth + barW + box.offsetWidth <\n      document.documentElement.scrollLeft + window.innerWidth;\n    var bar = util.createSVGElement('svg', {\n        style : { position : 'absolute' },\n        attrs : { 'class' : '${prefix}-tooltip-bar',\n          width : '' + barW, height : '' + barH,\n          tabindex: '-1', focusable: 'false' } },\n      [ util.createSVGElement('path', {\n          attrs : { d : rblt?\n            'M0 ' + barH + 'L' + barW + ' 0' :\n            'M0 0L' + barW + ' ' + barH } }) ]);\n    document.body.appendChild(bar);\n\n    var cs = window.getComputedStyle(box, null);\n    bar.style.stroke = cs.borderColor || cs.borderBottomColor;\n    bar.style.fill = 'none';\n\n    if (rblt) {\n      box.style.left = (off.left + off.displayWidth + barW - 1) + 'px';\n      box.style.top = (off.top - barH + 1) + 'px';\n      bar.style.left = (off.left + off.displayWidth) + 'px';\n      bar.style.top = (off.top - barH + 1) + 'px';\n    } else {\n      box.style.left = (off.left + off.displayWidth - barW - box.offsetWidth + 1) + 'px';\n      box.style.top = (off.top - barH - box.offsetHeight + 1) + 'px';\n      bar.style.left = (off.left + off.displayWidth - barW) + 'px';\n      bar.style.top = (off.top - barH + 1) + 'px';\n    }\n\n    return {\n      dispose : function() {\n        document.body.removeChild(box);\n        document.body.removeChild(bar);\n      }\n    };\n  };\n\n  export var attachTooltipFeature = function(\n      td : TdWrapper, renderer : TableCellRenderer) : TableCellRenderer {\n\n    var tooltip : Tooltip = null;\n\n    return {\n      getCellStyle : renderer.getCellStyle,\n      render : function(cell) {\n        if (cell.tooltip) {\n          if (!tooltip) {\n            tooltip = createTooltip(td);\n            td.$el.appendChild(tooltip.$el);\n          }\n          tooltip.show(cell.tooltip);\n        } else {\n          if (tooltip) {\n            tooltip.show('');\n          }\n        }\n        renderer.render(cell);\n      },\n      beginEdit : renderer.beginEdit,\n      dispose : function() {\n        renderer.dispose();\n        if (tooltip) {\n          tooltip.dispose();\n          tooltip = null;\n        }\n      }\n    };\n  };\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  export var classNamePrefix = 'ctj';\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n/// <reference path=\"UIEventTarget.ts\" />\n\nnamespace comfortable {\n\n  /**\n   * @internal\n   */\n  export interface Rect {\n    left : number;\n    top : number;\n    width : number;\n    height : number;\n  }\n\n  interface CellSizeCache {\n    viewWidth : number;\n    viewHeight : number;\n    rects : Rect[];\n    rowCount : number;\n    columnCount :number;\n    lockTop : number;\n    lockLeft : number;\n    lockBottom : number;\n    lockRight : number;\n    width : number;\n    height : number;\n  }\n\n  interface RenderParams {\n    width : number;\n    height : number;\n    rects : Rect[],\n    viewWidth : number;\n    viewHeight : number;\n    scrWidth : number;\n    scrHeight : number;\n  }\n\n  interface TargetColumn {\n    colFrom : number;\n    colTo : number;\n    i : number;\n    left : number;\n    distance : number;\n  }\n\n  interface ColResizeHandle {\n    $el : HTMLElement;\n    col? : number;\n    left? : number;\n  }\n\n  /**\n   * @internal\n   */\n  export interface InternalEditor extends Editor {\n    td : ElmCache;\n    active : boolean,\n    impl : any;\n    cell : { row : number, col : number };\n    beginEdit : (row : number, col : number, makeVisible? : boolean) => void;\n    endEdit : (reason : string) => void;\n  }\n\n  /**\n   * @internal\n   */\n  export var tableEventTypes = [\n    'mousedown', 'mouseover', 'mouseout',\n    'click', 'dblclick', 'contextmenu' ];\n\n  export var createTable = function() : Table {\n    return new TableImpl(new DefaultTableModel() );\n  }\n\n  // Left-Top\n  var LT_INDEX = 0;\n  // Center-Middle\n  var CM_INDEX = 4;\n  // Right-Bottom\n  var RB_INDEX = 8;\n\n  /**\n   * @internal\n   */\n  export class TableImpl extends UIEventTargetImpl implements Table {\n\n    private tabState = { keyCode : 0, shiftKey : false };\n    private document_keydownHandler = (event : any) => {\n      if (!(event.keyCode == 18 || event.keyCode == 25) /* not Alt, Kanji */ &&\n          event.altKey) {\n        // endEdit on Alt + some key(not Alt) combination\n        this.editor.endEdit('altKey');\n        this.render();\n      }\n      this.tabState = {\n        keyCode : event.keyCode,\n        shiftKey : event.shiftKey\n      };\n    };\n\n    constructor(model : TableModel) {\n      super();\n      this.model = model;\n      document.addEventListener('keydown', this.document_keydownHandler);\n    }\n\n    public dispose() {\n      document.removeEventListener('keydown', this.document_keydownHandler);\n    }\n\n    private tables = ( () => {\n\n      var tables : InternalTable[] = [];\n      for (var i = 0; i < 9; i += 1) {\n        tables.push(new InternalTableImpl() );\n      }\n\n      tables.forEach( (table, i) => {\n        table.row = ~~(i / 3);\n        table.col = i % 3;\n        var cellEventHandler = function(handler :\n            (event : Event, td : ElmCache) => void) : EventListener {\n          return function(event) {\n            var col = util.indexOf(util.closest(event.target,\n                { tagName : 'TD', root : table.$el }) );\n            var row = util.indexOf(util.closest(event.target,\n                { tagName : 'TR', root : table.$el }) );\n            if (col != -1 && row != -1) {\n              handler(event, table.tbody.children[row].children[col]);\n            }\n          };\n        };\n        var delegateHandler = cellEventHandler( (event, td) => {\n          this.trigger(event.type,\n              { originalEvent : event, row : td.row, col : td.col }); });\n        var delegates : {[type : string] : EventListener} = {};\n        tableEventTypes.forEach(function(type) {\n          delegates[type] = delegateHandler;\n        });\n        util.set(table.$el, {\n          on : delegates\n        });\n        util.set(table.$el, {\n          style : { position : 'absolute' },\n          on : {\n            mousedown: cellEventHandler( (event, td) => {\n              if (event.which != 1) {\n                return;\n              }\n              if (td.row < this.model.getLockTop() &&\n                  this.model.isColumnDraggable() &&\n                  !event.defaultPrevented) {\n                event.preventDefault();\n                var mousemoveHandler = (event : Event) => {\n                  updateMarker(event.pageX - dragPoint.x);\n                };\n                var mouseupHandler = (event : Event) => {\n                  util.$(document).off('mousemove', mousemoveHandler).\n                    off('mouseup', mouseupHandler);\n                  this.frame.removeChild(dragProxy);\n                  this.frame.removeChild(marker);\n                  if (targetColumn != null) {\n                    tableModel.trigger('columndragged', {\n                      colFrom : targetColumn.colFrom,\n                      colSpan : cell.colSpan,\n                      colTo : targetColumn.colTo });\n                    this.invalidate();\n                  }\n                };\n                util.$(document).on('mousemove', mousemoveHandler).\n                  on('mouseup', mouseupHandler);\n                var getTargetColumn = (centerX : number) => {\n                  var targetColumn : TargetColumn = null;\n                  tables.forEach( (tbl, i) => {\n                    if (tbl.row == table.row) {\n                      var tableState = tbl.tableState;\n                      var rect = this.getCellSizeCache().rects[i];\n                      var left = rect.left + tableState.left;\n                      for (var col = tableState.minCol; col <= tableState.maxCol + 1; col += 1) {\n                        var distance = Math.abs(left - centerX);\n                        if ( (targetColumn == null ||\n                                distance < targetColumn.distance) &&\n                              !tableModel.checkSpaned(0, col) ) {\n                          targetColumn = { colFrom : colFrom, colTo : col,\n                              i : i, left : left, distance : distance };\n                        }\n                        left += tableModel.getCellWidthAt(col);\n                      }\n                    }\n                  });\n                  return targetColumn;\n                };\n                var updateMarker = function(delta : number) {\n                  var left = getLeft(delta);\n                  targetColumn = getTargetColumn(left + colWidth / 2);\n                  dragProxy.style.left = left + 'px';\n                  marker.style.left = (targetColumn.left - markerStyle.gap - 1) + 'px';\n                };\n                var tableModel = this.model;\n                var tableState = table.tableState;\n                var targetColumn : TargetColumn = null;\n                var rect = this.getCellSizeCache().rects[i];\n                var colFrom = td.col;\n                var spaned = tableModel.checkSpaned(0, colFrom);\n                if (spaned) {\n                  colFrom = spaned.col;\n                }\n                var cell = tableModel.getCellAt(0, colFrom);\n                var colLeft = function() {\n                  var left = 0;\n                  for (var col = tableState.minCol; col < colFrom; col += 1) {\n                    left += tableModel.getCellWidthAt(col);\n                  }\n                  return left;\n                }();\n                var colWidth = function() {\n                  var width = 0;\n                  for (var col = 0; col < cell.colSpan; col += 1) {\n                    width += tableModel.getCellWidthAt(colFrom + col);\n                  }\n                  return width;\n                }();\n                var getLeft = function(delta : number) {\n                  return tableState.left + rect.left + colLeft + delta;\n                };\n                var dragPoint = { x : event.pageX, y : event.pageY };\n                var dragProxy = util.createElement('div', {\n                  attrs : { 'class' : '${prefix}-column-drag-proxy' },\n                  style : { position : 'absolute', top : '0px',\n                    width : colWidth + 'px',\n                    height : rect.height + 'px' }\n                });\n                var markerStyle = { gap : 2 };\n                var marker = util.createElement('div', {\n                  attrs : { 'class' : '${prefix}-column-drag-marker' },\n                  style : { position : 'absolute', top : '0px',\n                    width : (markerStyle.gap * 2 + 1) + 'px',\n                    height : rect.height + 'px' }\n                });\n                updateMarker(0);\n                this.frame.appendChild(dragProxy);\n                this.frame.appendChild(marker);\n                return;\n              }\n              this.beginEditIfNeed(event, td);\n            }),\n            focusin: cellEventHandler( (event, td) => {\n              this.beginEditIfNeed(event, td);\n            })\n          }\n        } );\n      });\n\n      return tables;\n    })();\n    private beginEditIfNeed(event : Event, td : ElmCache) {\n      // begin edit by logical row and col\n      if (this.editor.cell != null &&\n          this.editor.cell.row == td.row &&\n          this.editor.cell.col == td.col) {\n      } else if (this.isEditableAt(td.row, td.col) ) {\n        event.preventDefault();\n        this.editor.beginEdit(td.row, td.col, true);\n      }\n    }\n    private barSize : { width : number, height : number } = null;\n    private measureBarSize() {\n      if (this.barSize == null) {\n\n        var scr = util.createElement('div', {\n          style : { position : 'absolute' } });\n  \n        var viewPane = util.createElement('div', {\n          style : { position : 'absolute', overflow : 'auto' }\n        }, [ scr ]);\n\n        util.extend(scr.style, {\n          width : '200px', height : '200px' });\n        util.extend(viewPane.style, {\n          left : '0px', top : '0px', width : '100px', height : '100px' });\n\n        this.frame.appendChild(viewPane);\n        var barSize = {\n          width : viewPane.offsetWidth - viewPane.clientWidth,\n          height : viewPane.offsetHeight - viewPane.clientHeight\n        };\n        this.frame.removeChild(viewPane);\n        if (barSize.width > 0 && barSize.height > 0) {\n          // cache\n          this.barSize = barSize;\n        } else {\n          return barSize;\n        }\n      }\n      return this.barSize;\n    };\n\n    private scrollHandler = (event : any) => { this.render(); };\n\n    private hScr = util.createElement('div', {\n        style : { position : 'absolute' } });\n\n    private hViewPane = util.createElement('div', {\n        style : { position : 'absolute',\n          overflowX : 'auto', overflowY : 'hidden' },\n        on : { scroll : this.scrollHandler }\n      }, [ this.hScr ]);\n\n    private vScr = util.createElement('div', {\n        style : { position : 'absolute' } });\n\n    private vViewPane = util.createElement('div', {\n        style : { position : 'absolute',\n          overflowX : 'hidden', overflowY : 'auto' },\n        on : { scroll : this.scrollHandler }\n      }, [ this.vScr ]);\n\n    private frame = util.createElement('div', {\n        attrs : { tabindex : '0' },\n        style : { position : 'relative', overflow : 'hidden',\n          width : '400px', height : '200px' },\n        on : {\n          focus: (event) => {\n\n            var tabState = this.tabState;\n            var rowCount = this.model.getRowCount();\n            var columnCount = this.model.getColumnCount();\n\n            if (tabState.keyCode == 9 && rowCount > 0 && columnCount > 0) {\n\n              var row = tabState.shiftKey ? rowCount - 1 : 0;\n              var col = tabState.shiftKey ? columnCount - 1 : 0;\n\n              if (this.isEditableAt(row, col) ) {\n                this.editor.beginEdit(row, col, true);\n              } else {\n                this.findNextEditable(\n                  row,\n                  col,\n                  { row: 0, col: tabState.shiftKey ? -1 : 1 },\n                  (row, col) => {\n                    this.editor.beginEdit(row, col, true);\n                  }\n                );\n              }\n            }\n          },\n          focusin : (event) => {\n            this.editor.active = true;\n            this.$el.setAttribute('tabindex', '-1');\n          },\n          focusout : (event) => {\n            this.editor.active = false;\n            this.$el.setAttribute('tabindex', '0');\n          },\n          mousedown : (event) => {\n            this.tabState = { keyCode: 0, shiftKey: event.shiftKey };\n            if (util.closest(event.target, {\n                $el : this.hViewPane, root : this.frame }) ) {\n              this.editor.endEdit('hscr');\n              this.render();\n            } else if (util.closest(event.target, {\n                $el : this.vViewPane, root : this.frame }) ) {\n              this.editor.endEdit('vscr');\n              this.render();\n            }\n          },\n          keydown : (event) => {\n            switch(event.keyCode) {\n            case 9: // Tab\n              this.move(event, { row : 0, col : event.shiftKey? -1 : 1 });\n              break;\n            case 13: // Enter\n              this.move(event, { row : event.shiftKey? -1 : 1, col : 0 });\n              break;\n            }\n          },\n          wheel : (event) => {\n\n            this.editor.endEdit('wheel');\n\n            var last = {\n              scrollLeft : this.hViewPane.scrollLeft,\n              scrollTop : this.vViewPane.scrollTop\n            };\n\n            this.hViewPane.scrollLeft += event.deltaX;\n            this.vViewPane.scrollTop += event.deltaY;\n\n            if (last.scrollLeft != this.hViewPane.scrollLeft ||\n                last.scrollTop != this.vViewPane.scrollTop) {\n              // consumed.\n              event.preventDefault();\n            }\n          }\n        }\n      }, [this.hViewPane, this.vViewPane].concat(\n          this.tables.map(function(table) { return table.$el; }) ) );\n\n    private lockLines : HTMLElement[] = [];\n    private colResizeHandles : ColResizeHandle[] = [];\n\n    private getCellRect(row : number, col : number) {\n      var tableModel = this.tables[CM_INDEX].model;\n      var left = 0;\n      var top = 0;\n      for (var r = 0; r < row; r += 1) {\n        top += tableModel.getCellHeightAt(r);\n      }\n      for (var c = 0; c < col; c += 1) {\n        left += tableModel.getCellWidthAt(c);\n      }\n      return { left : left, top : top,\n        width : tableModel.getCellWidthAt(col),\n        height : tableModel.getCellHeightAt(row) };\n    }\n    private makeVisible(renderParams : RenderParams, row : number, col : number) {\n      var ltRect = renderParams.rects[LT_INDEX];\n      var scrollRect = renderParams.rects[CM_INDEX];\n      var delta = { left : 0, top : 0 };\n      var cellRect = this.getCellRect(row, col);\n      var left = cellRect.left + this.tables[CM_INDEX].left;\n      var top = cellRect.top + this.tables[CM_INDEX].top;\n      if (cellRect.width >= scrollRect.width) {\n        delta.left = left;\n      } else if (left < 0) {\n        delta.left = left;\n      } else if (left + cellRect.width > scrollRect.width) {\n        delta.left = left + cellRect.width - scrollRect.width;\n      }\n      if (cellRect.height >= scrollRect.height) {\n        delta.top = top;\n      } else if (top < 0) {\n        delta.top = top;\n      } else if (top + cellRect.height > scrollRect.height) {\n        delta.top = top + cellRect.height - scrollRect.height;\n      }\n      var clientWidth =  this.hViewPane.clientWidth;\n      var clientHeight =  this.vViewPane.clientHeight;\n      var scroll = {\n        left : renderParams.viewWidth > clientWidth?\n            util.translate(-this.tables[CM_INDEX].left + delta.left,\n            ltRect.width,\n            ltRect.width + renderParams.viewWidth - clientWidth,\n            0, renderParams.scrWidth - clientWidth, 'scroll.left') : 0,\n        top : renderParams.viewHeight > clientHeight?\n            util.translate(-this.tables[CM_INDEX].top + delta.top,\n            ltRect.height,\n            ltRect.height + renderParams.viewHeight - clientHeight,\n            0, renderParams.scrHeight - clientHeight, 'scroll.top') : 0\n      };\n      if (row >= this.model.getLockTop() ) {\n        this.vViewPane.scrollTop = scroll.top;\n      }\n      if (col >= this.model.getLockLeft() ) {\n        this.hViewPane.scrollLeft = scroll.left;\n      }\n    }\n    private cellSizeCache : CellSizeCache = null;\n    private beforeCellSizeChangeHandler : EventListener = null;\n    private getCellSizeCache() : CellSizeCache {\n      var width = this.$el.clientWidth;\n      var height = this.$el.clientHeight;\n      var tableModel = this.model;\n      if (this.beforeCellSizeChangeHandler == null) {\n        this.beforeCellSizeChangeHandler = (event : Event, detail : any) => {\n          // note: 'this' bind to table's.\n          this.cellSizeCache = null;\n        };\n      }\n      // observe cache size.\n      tableModel.off('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      tableModel.on('beforecellsizechange', this.beforeCellSizeChangeHandler);\n      //\n      var rowCount = tableModel.getRowCount();\n      var columnCount = tableModel.getColumnCount();\n      var lockTop = tableModel.getLockTop();\n      var lockLeft = tableModel.getLockLeft();\n      var lockBottom = tableModel.getLockBottom();\n      var lockRight = tableModel.getLockRight();\n      if (!this.cellSizeCache ||\n          this.cellSizeCache.rowCount != rowCount ||\n          this.cellSizeCache.columnCount != columnCount ||\n          this.cellSizeCache.lockTop != lockTop ||\n          this.cellSizeCache.lockLeft != lockLeft ||\n          this.cellSizeCache.lockBottom != lockBottom ||\n          this.cellSizeCache.lockRight != lockRight ||\n          this.cellSizeCache.width != width ||\n          this.cellSizeCache.height != height) {\n        var rowPos = [ 0, lockTop, rowCount - lockBottom, rowCount ];\n        var colPos = [ 0, lockLeft, columnCount - lockRight, columnCount ];\n        var cw = colPos.slice(1).map(function() { return 0; });\n        var ch = rowPos.slice(1).map(function() { return 0; });\n        var idx : number, count : number;\n        idx = colPos.shift();\n        cw.forEach(function(_, i) {\n          for (count = colPos.shift(); idx < count; idx += 1) {\n            cw[i] += tableModel.getCellWidthAt(idx);\n          }\n        });\n        idx = rowPos.shift();\n        ch.forEach(function(_, i) {\n          for (count = rowPos.shift(); idx < count; idx += 1) {\n            ch[i] += tableModel.getCellHeightAt(idx);\n          }\n        });\n        var rects = this.tables.map(function(table) {\n          var rect = { left : 0, top : 0, width : 0, height : 0 };\n          for (var row = 0; row <= table.row; row += 1) {\n            (<any>rect)[row < table.row ? 'top' : 'height'] += ch[row];\n          }\n          for (var col = 0; col <= table.col; col += 1) {\n            (<any>rect)[col < table.col? 'left' : 'width'] += cw[col];\n          }\n          return rect;\n        });\n\n        var rbRect = rects[RB_INDEX];\n        this.tables.forEach(function(table, i) {\n          var rect = rects[i];\n          if (table.col == 1) {\n            rect.width = Math.max(0,\n              Math.min(rect.width, width - rect.left - rbRect.width) );\n          } else if (table.col == 2) {\n            rect.left = width - rbRect.width;\n          }\n          if (table.row == 1) {\n            rect.height = Math.max(0,\n              Math.min(rect.height, height - rect.top - rbRect.height) );\n          } else if (table.row == 2) {\n            rect.top = height - rbRect.height;\n          }\n        });\n\n        this.cellSizeCache = {\n          viewWidth : cw[1],\n          viewHeight : ch[1],\n          rects : rects,\n          rowCount : rowCount, columnCount : columnCount,\n          lockTop : lockTop, lockLeft : lockLeft,\n          lockBottom : lockBottom, lockRight : lockRight,\n          width : width, height : height\n        };\n      }\n      return this.cellSizeCache;\n    }\n    private getRenderParams() {\n      var width = this.$el.clientWidth;\n      var height = this.$el.clientHeight;\n      var cellSizeCache = this.getCellSizeCache();\n      var viewWidth = cellSizeCache.viewWidth;\n      var viewHeight = cellSizeCache.viewHeight;\n      var maxScr = 1E6;\n      var scrWidth = Math.min(viewWidth, maxScr);\n      var scrHeight = Math.min(viewHeight, maxScr);\n      return {\n        width : width,\n        height : height,\n        rects : cellSizeCache.rects,\n        viewWidth : viewWidth,\n        viewHeight : viewHeight,\n        scrWidth : scrWidth,\n        scrHeight : scrHeight\n      };\n    }\n    private getTargetTable(row : number, col : number) {\n      var tableModel = this.model;\n      var t = tableModel.getLockTop();\n      var b = tableModel.getRowCount() - tableModel.getLockBottom();\n      var l = tableModel.getLockLeft();\n      var r = tableModel.getColumnCount() - tableModel.getLockRight();\n      return this.tables.filter( (table) => {\n        return table.row == (row < t? 0 : row >= b? 2 : 1) &&\n          table.col == (col < l? 0 : col >= r? 2 : 1);\n      })[0];\n    }\n    private isEditableAt(row : number, col : number) {\n      return this.model.getCellAt(row, col).editable;\n    }\n    private move(event : any, offset : { row : number, col : number }) {\n\n      if (this.editor.cell == null) {\n        return;\n      }\n      var row = this.editor.cell.row;\n      var col = this.editor.cell.col;\n\n      var found = false;\n      this.findNextEditable(row, col, offset,\n        function(r, c) {\n          if (offset.row == -1 || offset.col == -1) {\n            found = row > r || (row == r && col > c);\n          } else if (offset.row == 1 || offset.col == 1) {\n            found = row < r || (row == r && col < c);\n          }\n        });\n\n      if (!found) {\n        if (offset.row == -1 || offset.col == -1) {\n          this.trigger('prevfocus');\n        } else if (offset.row == 1 || offset.col == 1) {\n          this.trigger('nextfocus');\n        }\n        return;\n      }\n\n      // preventDefault of keyevent.\n      event.preventDefault();\n      this.findNextEditable(row, col, offset,\n        (row : number, col : number) => {\n          this.editor.beginEdit(row, col, true);\n        });\n    }\n\n    public findNextEditable(\n      row : number, col : number,\n      offset : { row : number, col : number },\n      found : (row : number, col : number) => void\n    ) {\n\n      var initialRow = row;\n      var initialCol = col;\n\n      var beginEditIfEditable = () => {\n        if (row == initialRow && col == initialCol) {\n          // break.\n          return true;\n        }\n        if (this.isEditableAt(row, col) ) {\n          found(row, col);\n          return true;\n        }\n        return false;\n      };\n\n      var tableModel = this.model;\n      var rowCount = tableModel.getRowCount();\n      var columnCount = tableModel.getColumnCount();\n\n      if ( (offset.row == -1 || offset.row == 1) &&\n          tableModel.getLineRowCountAt(row) == 1) {\n\n        do {\n          do {\n            row += offset.row;\n            if (row < 0) {\n              row = rowCount - 1;\n              col = (col - 1 + columnCount) % columnCount;\n            } else if (row >= rowCount) {\n              row = 0;\n              col = (col + 1) % columnCount;\n            }\n          } while (tableModel.checkSpaned(row, col) );\n        } while (!beginEditIfEditable() );\n\n      } else if (offset.row == -1 || offset.row == 1) {\n\n        do {\n          do {\n            var lineRowCount = tableModel.getLineRowCountAt(row);\n            var lineRow = tableModel.getLineRowAt(row);\n            var rowOffset = row - lineRow;\n            lineRow += offset.row;\n            if (lineRow < 0) {\n              lineRow = lineRowCount - 1;\n              col -= 1;\n              if (col < 0) {\n                lineRow = -1;\n                col = columnCount - 1;\n              }\n            } else if (lineRow >= lineRowCount) {\n              lineRow = 0;\n              col += 1;\n              if (col >= columnCount) {\n                lineRow = lineRowCount;\n                col = 0;\n              }\n            }\n            row = rowOffset + lineRow;\n            if (row < 0) {\n              row = rowCount - 1;\n            } else if (row >= rowCount) {\n              row = 0;\n            }\n          } while (tableModel.checkSpaned(row, col) );\n        } while (!beginEditIfEditable() );\n\n      } else if (offset.col == -1 || offset.col == 1) {\n\n        do {\n          do {\n            col += offset.col;\n            if (col < 0) {\n              col = columnCount - 1;\n              row = (row - 1 + rowCount) % rowCount;\n            } else if (col >= columnCount) {\n              col = 0;\n              row = (row + 1) % rowCount;\n            }\n          } while (tableModel.checkSpaned(row, col) );\n        } while (!beginEditIfEditable() );\n\n      }\n    };\n\n    private renderColumnResizeHandlers(renderParams : RenderParams) {\n      var mousedownHandler = (event : Event) => {\n        var mouseupHandler = (event : Event) => {\n          util.$(document).off('mousemove', mousemoveHandler).\n            off('mouseup', mouseupHandler);\n          this.frame.removeChild(block);\n          util.set(handle.$el.childNodes[0],\n              { style : { display : 'none' } });\n          var deltaX = event.pageX - dragPoint.x;\n          var cellWidth = tableModel.getCellWidthAt(handle.col);\n          tableModel.trigger('beforecellsizechange');\n          tableModel.trigger('cellsizechange', {\n            col : handle.col,\n            cellWidth : Math.max(tableModel.minCellWidth,\n                cellWidth + deltaX) });\n          this.invalidate();\n        };\n        var mousemoveHandler = function(event : Event) {\n          var deltaX = event.pageX - dragPoint.x;\n          var cellWidth = tableModel.getCellWidthAt(handle.col);\n          deltaX = Math.max(tableModel.minCellWidth,\n              cellWidth + deltaX) - cellWidth;\n          handle.$el.style.left = (handle.left + deltaX) + 'px';\n        };\n        event.preventDefault();\n        if (event.which != 1) {\n          return;\n        }\n        this.editor.endEdit('mousedown');\n        var handleIndex = this.colResizeHandles.map(function(handle) {\n          return handle.$el; } ).indexOf(event.currentTarget);\n        var handle = this.colResizeHandles[handleIndex];\n        var dragPoint = { x : event.pageX, y : event.pageY };\n        util.set(handle.$el.childNodes[0], { style : { display : '' } });\n        var block = util.createElement('div', {\n          style : {\n            position : 'absolute', left : '0px', top : '0px',\n            backgroundColor : handleStyle.backgroundColor,\n            cursor : handleStyle.cursor,\n            width : clientWidth + 'px',\n            height : clientHeight + 'px'\n          }\n        });\n        this.frame.appendChild(block);\n        util.$(document).on('mousemove', mousemoveHandler).\n          on('mouseup', mouseupHandler);\n      };\n      var getOrCrt = () : ColResizeHandle => {\n        if (handleIndex < this.colResizeHandles.length) {\n          return this.colResizeHandles[handleIndex];\n        }\n        var handle = { $el : util.createElement('div', {\n          style : {\n            position : 'absolute',\n            backgroundColor : handleStyle.backgroundColor,\n            overflow : 'visible', top : '0px',\n            width : (handleStyle.offset * 2 + handleStyle.lineWidth) + 'px',\n            cursor : handleStyle.cursor\n          },\n          on : { mousedown : mousedownHandler }\n        }, [util.createElement('div', {\n          attrs : { 'class' : '${prefix}-v-resize-line' },\n          style : {\n            position : 'absolute',\n            left : handleStyle.offset + 'px', top : '0px', width : '0px',\n            borderLeftWidth : handleStyle.lineWidth + 'px' }\n        })]) };\n        this.frame.appendChild(handle.$el);\n        this.colResizeHandles.push(handle);\n        return handle;\n      };\n      var handleStyle = {\n        offset : 3,\n        lineWidth : 1,\n        cursor : 'ew-resize',\n        backgroundColor : 'rgba(0,0,0,0)'\n      };\n      var handleIndex = 0;\n      var tableModel = this.model;\n      var rbRect = renderParams.rects[RB_INDEX];\n      var clientWidth = rbRect.left + rbRect.width;\n      var clientHeight = rbRect.top + rbRect.height;\n      for (var i = 0; i < this.tables.length; i += 1) {\n        var table = this.tables[i];\n        if (table.row == 0) {\n          // header\n          var rect = renderParams.rects[i];\n          var tableState = table.tableState;\n          var left = tableState.left + rect.left -\n            handleStyle.offset - handleStyle.lineWidth;\n          var height = rect.height;\n          for (var col = tableState.minCol; col <= tableState.maxCol;\n              col += 1, handleIndex += 1) {\n            if (this.model.isColumnHiddenAt(col) ) {\n              continue;\n            }\n            left += tableModel.getCellWidthAt(col);\n            if (left > rect.left + rect.width) {\n              break;\n            }\n            if (!this.model.isColumnResizableAt(col) ) {\n              continue;\n            }\n            var handle = getOrCrt();\n            util.set(handle.$el, { style : { display : '',\n              left : left + 'px', height : height + 'px' } });\n            util.set(handle.$el.childNodes[0], {\n              style : { display : 'none', height : clientHeight + 'px' } });\n            handle.col = col;\n            handle.left = left;\n          }\n        }\n      }\n      for (; handleIndex < this.colResizeHandles.length; handleIndex += 1) {\n        util.set(this.colResizeHandles[handleIndex].$el, {\n          style : { display : 'none', left : '0px', height : '0px' } });\n      }\n    }\n    public render(visibleCell? : { row : number, col : number },\n        cellStyleOnly? : boolean) {\n\n      var renderParams = this.getRenderParams();\n\n      var ltRect = renderParams.rects[LT_INDEX];\n      var rbRect = renderParams.rects[RB_INDEX];\n\n      var viewWidth = renderParams.width - ltRect.width - rbRect.width;\n      var viewHeight = renderParams.height - ltRect.height - rbRect.height;\n\n      // check if scrollbar shown.\n      var barSize = this.measureBarSize();\n      var vBarShown = renderParams.scrWidth > viewWidth - barSize.width;\n      var hBarShown = renderParams.scrHeight > viewHeight - barSize.height;\n\n      util.extend(this.hScr.style, {\n        width : renderParams.scrWidth + 'px', height : '1px' });\n      util.extend(this.hViewPane.style, {\n        left : ltRect.width + 'px', top : (ltRect.height + rbRect.height) + 'px',\n        width : (viewWidth - (hBarShown? barSize.width : 0) ) + 'px',\n        height : viewHeight + 'px' });\n\n      util.extend(this.vScr.style, {\n        width : '1px', height : renderParams.scrHeight + 'px' });\n      util.extend(this.vViewPane.style, {\n        left : (ltRect.width + rbRect.width) + 'px', top : ltRect.height + 'px',\n        width : viewWidth + 'px',\n        height : (viewHeight - (vBarShown? barSize.height : 0) ) + 'px' });\n\n      var hViewPane = this.hViewPane;\n      var vViewPane = this.vViewPane;\n      var clientWidth = vViewPane.clientWidth;\n      var clientHeight = hViewPane.clientHeight;\n      var barWidth = vViewPane.offsetWidth - clientWidth;\n      var barHeight = hViewPane.offsetHeight - clientHeight;\n\n      for (var i = 0; i < this.tables.length; i += 1) {\n        var table = this.tables[i];\n        var rect = renderParams.rects[i];\n        if (rbRect.left + rbRect.width + barWidth > renderParams.width) {\n          if (table.col == 1) {\n            if (rect.left + rect.width > rbRect.left - barWidth) {\n              rect.width = Math.max(0, rbRect.left - barWidth - rect.left);\n            }\n          }\n          if (table.col == 2) {\n            rect.left -= barWidth;\n          }\n        }\n        if (rbRect.top + rbRect.height + barHeight > renderParams.height) {\n          if (table.row == 1) {\n            if (rect.top + rect.height > rbRect.top - barHeight) {\n              rect.height = Math.max(0, rbRect.top - barHeight - rect.top);\n            }\n          }\n          if (table.row == 2) {\n            rect.top -= barHeight;\n          }\n        }\n      }\n\n      if (visibleCell) {\n        this.makeVisible(renderParams, visibleCell.row, visibleCell.col);\n      }\n\n      var scrollLeft = hViewPane.scrollLeft;\n      var scrollTop = vViewPane.scrollTop;\n      for (var i = 0; i < this.tables.length; i += 1) {\n        var table = this.tables[i];\n        var rect = renderParams.rects[i];\n        if (table.col == 1) {\n          table.left = -(renderParams.scrWidth > clientWidth?\n                util.translate(scrollLeft,\n                0, renderParams.scrWidth - clientWidth,\n                ltRect.width,\n                ltRect.width + renderParams.viewWidth - clientWidth,\n                'table.left') : ltRect.width);\n        }\n        if (table.row == 1) {\n          table.top = -(renderParams.scrHeight > clientHeight?\n                util.translate(scrollTop,\n                0, renderParams.scrHeight - clientHeight,\n                ltRect.height,\n                ltRect.height + renderParams.viewHeight - clientHeight,\n                'table.top') : ltRect.height);\n        }\n        if (table.col == 2) {\n          table.left = -(ltRect.width + renderParams.viewWidth);\n        }\n        if (table.row == 2) {\n          table.top = -(ltRect.height + renderParams.viewHeight);\n        }\n\n        table.model = this.model;\n        table.setBounds(rect);\n        table.render(!!cellStyleOnly);\n\n      }\n\n      if (this.editor.cell != null && !cellStyleOnly) {\n        this.editor.beginEdit(this.editor.cell.row, this.editor.cell.col);\n      }\n\n      // lock lines.\n      ( () => {\n        while (this.lockLines.length < 4) {\n          var line = util.createElement('div', {\n            style : { position : 'absolute' } });\n          this.frame.appendChild(line);\n          this.lockLines.push(line);\n        }\n        var width = renderParams.width - barWidth;\n        var height = renderParams.height - barHeight;\n        // top\n        util.set(this.lockLines[0], {\n          attrs :{ 'class' : '${prefix}-h-lock-line' },\n          style : {\n            display : this.model.getLockTop() == 0? 'none' : '', left : '0px',\n            top : (ltRect.height - 1) + 'px', width : width + 'px'\n          } });\n        // left\n        util.set(this.lockLines[1], {\n          attrs :{ 'class' : '${prefix}-v-lock-line' },\n          style : {\n            display : this.model.getLockLeft() == 0? 'none' : '', top : '0px',\n            left : (ltRect.width - 1) + 'px', height : height + 'px'\n          } });\n        // bottom\n        util.set(this.lockLines[2], {\n          attrs :{ 'class' : '${prefix}-h-lock-line' },\n          style : {\n            display : this.model.getLockBottom() == 0? 'none' : '', left : '0px',\n            top : (height - rbRect.height - 1) + 'px', width : width + 'px'\n          } });\n        // right\n        util.set(this.lockLines[3], {\n          attrs :{ 'class' : '${prefix}-v-lock-line' },\n          style : {\n            display : this.model.getLockRight() == 0? 'none' : '', top : '0px',\n            left : (width - rbRect.width - 1) + 'px', height : height + 'px'\n          } });\n      } )();\n\n      // resize handles.\n      if (this.model.getLockTop() > 0) {\n        this.renderColumnResizeHandlers(renderParams);\n      }\n\n      this.trigger('rendered', {\n        tableStates : this.tables.map(function(table) {\n          return table.tableState;\n        })\n      } );\n    }\n\n    private createInternalEditor() : InternalEditor {\n      var table = this;\n      var valuecommitHandler = function(event : any, detail : any) {\n        if (!editor.active || (detail && detail.force) /*editor.cell && detail.row == editor.cell.row &&\n            detail.col == editor.cell.col*/) {\n          // still editing after lost focus.\n          // then, force end edit.\n          editor.endEdit('valuecommit');\n          table.render();\n        }\n      };\n      var editor : InternalEditor = {\n        td : null,\n        active : false,\n        impl : null,\n        cell : null,\n        beginEdit : function(row, col, makeVisible) {\n          if (this.cell && !(this.cell.row == row && this.cell.col == col) ) {\n            // current editing cell changed.\n            this.endEdit('cellchange');\n          }\n          if (makeVisible) {\n            table.render({ row : row, col : col });\n          }\n          this.cell = { row : row, col : col };\n          var target = table.getTargetTable(row, col);\n          var index = target.tableState.indexById[util.getCellId(row, col)];\n          if (index) {\n            this.td = target.tbody.children[index.trIndex].children[index.tdIndex];\n            this.impl = this.td.renderer.beginEdit(table.model.getCellAt(row, col) );\n            this.impl.focus();\n            table.model.on('valuecommit', valuecommitHandler);\n            table.model.trigger('editingcellchange', { cell : this.cell });\n            util.$(this.td.$el).addClass('${prefix}-editing');\n          }\n        },\n        endEdit : function(reason : string) {\n          if (this.impl != null) {\n            util.$(this.td.$el).removeClass('${prefix}-editing');\n            table.model.trigger('editingcellchange', { cell : null });\n            table.model.off('valuecommit', valuecommitHandler);\n            var endState = this.impl.endEdit();\n            if (endState && !(endState.oldValue === endState.newValue) ) {\n              table.model.trigger('valuechange', {\n                row : this.cell.row,\n                col : this.cell.col,\n                oldValue : endState.oldValue,\n                newValue : endState.newValue\n              });\n            }\n            this.impl = null;\n          }\n          this.cell = null;\n        }\n      };\n      return editor;\n    }\n\n    public $el = this.frame;\n    public forEachCells(callback : any) {\n      for (var t = 0; t < this.tables.length; t += 1) {\n        var rows = this.tables[t].tbody.children || [];\n        for (var r = 0; r < rows.length; r += 1) {\n          var cells = rows[r].children || [];\n          for (var c = 0; c < cells.length; c += 1) {\n            if (callback(cells[c]) === true) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    public editor = this.createInternalEditor();\n    public model : TableModel = null;\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable.ui {\n\n  export interface Menu {\n    dispose : () => void;\n  }\n\n  export interface MenuItem {\n    label : string;\n    action? : (event? : Event) => void;\n    children? : () => MenuItem[];\n  }\n\n  export interface CheckBox {\n    $el : HTMLElement;\n    checked : boolean;\n    setIncomplete : (incomplete : boolean) => void;\n    setChecked : (checked : boolean) => void;\n    isChecked : () => boolean;\n  }\n\n  export interface Dialog extends EventTarget {\n    $el : HTMLElement;\n    show : () => void;\n    dispose : () => void;\n  }\n\n  export var createButton = function(\n      label : string, action : (event : Event) => void) {\n    return util.createElement('button',{\n      props : { textContent : label },\n      attrs : { 'class' : '${prefix}-button' },\n      style : { verticalAlign : 'top' },\n      on : { mousedown : function(event : Event) {\n        event.preventDefault();\n        if (event.which != 1) {\n          return;\n        }\n      }, click : function(event : Event) { action(event); } } });\n  };\n\n  // three state checkbox\n  export var createCheckBox = function() : CheckBox {\n\n    // fix for layout collapse by bootstrap.\n    var antiBsGlobals : { [k : string] : string } = {\n        verticalAlign :'top',\n        boxSizing : 'content-box',\n        lineHeight : '1' };\n\n    var path = util.createSVGElement('path', { attrs : {\n        'class' : '${prefix}-checkbox-check',\n        d : 'M 2 5 L 5 9 L 10 3'\n      },\n      style : antiBsGlobals });\n    return {\n      $el : util.createElement('span', {\n        attrs : { 'class' : '${prefix}-checkbox-body' },\n        style : util.extend(antiBsGlobals, { display : 'inline-block',\n          width : '12px', height : '12px' }\n        )}, [\n          util.createSVGElement('svg', {\n            attrs : { width : '12', height : '12',\n                tabindex: '-1', focusable: 'false' },\n            style : antiBsGlobals }, [ path ])\n        ] ),\n      checked : true,\n      setIncomplete : function(incomplete) {\n        util.$(path).addClass(\n            '${prefix}-checkbox-incomplete-check', !incomplete);\n      },\n      setChecked : function(checked) {\n        this.checked = checked;\n        path.style.display = this.checked? '' : 'none';\n      },\n      isChecked : function() {\n        return this.checked;\n      }\n    };\n  };\n\n  export var createDialog = function(children : HTMLElement[]) : Dialog {\n    var dialog = util.extend(new EventTargetImpl(), {\n      $el : util.createElement('div', {\n          attrs : { 'class' : '${prefix}-dialog' },\n          style : { position : 'absolute' }\n      }, children),\n      show : function() {\n        document.body.appendChild(this.$el);\n        this.trigger('beforeshow');\n        util.callLater(function() {\n          util.$(document).on('mousedown', mousedownHandler);\n        });\n      },\n      dispose : function() {\n        if (this.$el) {\n          util.$(document).off('mousedown', mousedownHandler);\n          document.body.removeChild(this.$el);\n          this.$el = null;\n          this.trigger('dispose');\n        }\n      }\n    } );\n    var mousedownHandler = function(event : Event) {\n      if (!util.closest(event.target,\n          { $el : dialog.$el, root : document.body }) ) {\n        dialog.dispose();\n      }\n    };\n    return dialog;\n  };\n\n  export var showMenu = function(\n      left : number, top : number, menuItems : MenuItem[]) : Menu {\n    var subMenu : Menu = null;\n    var menu = util.createElement('div', {\n      attrs : { 'class' : '${prefix}-contextmenu' },\n      style : { position : 'absolute', left : left + 'px', top : top + 'px' } },\n      <HTMLElement[]>menuItems.map(function(menuItem) {\n        return util.createElement('div', {\n            attrs : { 'class' : '${prefix}-menuitem ${prefix}-clickable' },\n            props : { textContent : menuItem.label },\n            style : { position : 'relative', whiteSpace : 'nowrap' },\n            on : {\n              mouseover : function(event : Event) {\n                if (subMenu != null) {\n                  subMenu.dispose();\n                  subMenu = null;\n                }\n                if (subMenu == null && menuItem.children) {\n                  subMenu = ui.showMenu(\n                      left + event.target.offsetWidth,\n                      top + event.target.offsetTop,\n                      menuItem.children() );\n                }\n              },\n              mousedown : function(event : Event) {\n                event.preventDefault();\n              },\n              click : function(event : Event) {\n                if (event.which != 1) {\n                  return;\n                }\n                if (menuItem.action) {\n                  menuItem.action(event);\n                  dispose();\n                }\n              }\n            }\n          } );\n        }) );\n    var dispose = function() {\n      if (menu != null) {\n        document.body.removeChild(menu);\n        menu = null;\n      }\n    };\n    var mousedownHandler = function(event : Event) {\n      var menu = util.closest(event.target,\n        { className : '${prefix}-contextmenu', root : document.body });\n      if (menu != null) {\n        return;\n      }\n      util.$(document).off('mousedown', mousedownHandler);\n      dispose();\n    };\n    util.$(document).on('mousedown', mousedownHandler);\n    document.body.appendChild(menu);\n    return { dispose : dispose };\n  };\n\n  var createCalTable = function(\n      year : number, month : number, current : Date, selected : Date) {\n\n    var base = new Date(year, month, 1);\n    var weekdays = i18n.getMessages().WEEKDAYS.split(/,/g);\n\n    var thead = util.createElement('thead');\n    var tbody = util.createElement('tbody');\n\n    thead.appendChild(util.createElement('tr', weekdays.map(function(wd, day) {\n      var className = '';\n      if (day == 0 || day == 6) {\n        className += ' ${prefix}-holiday';\n      }\n      return util.createElement('th',\n          { props: { textContent : wd }, attrs: { 'class': className } })\n    }) ) );\n\n    var d = 0;\n    for (var r = 0; r < 6; r += 1) {\n      tbody.appendChild(util.createElement('tr', weekdays.map(function() {\n        var date = new Date(\n            base.getFullYear(),\n            base.getMonth(),\n            base.getDate() - base.getDay() + d);\n        d += 1;\n        var className = '';\n        if (util.isHoliday(date) ) {\n          className += ' ${prefix}-holiday';\n        }\n        if (date.getMonth() == base.getMonth() ) {\n          className += ' ${prefix}-this-month';\n          if (date.getFullYear() == selected.getFullYear() &&\n              date.getMonth() == selected.getMonth() &&\n              date.getDate() == selected.getDate() ) {\n            className += ' ${prefix}-selected-date';\n          }\n          if (date.getFullYear() == current.getFullYear() &&\n              date.getMonth() == current.getMonth() &&\n              date.getDate() == current.getDate() ) {\n            className += ' ${prefix}-current-date';\n          }\n        }\n        return util.createElement('td',\n            { props: { textContent : '' + date.getDate() },\n              attrs: { 'class' : className },\n              on: { mousedown: function(event) { event.preventDefault(); },\n                click: function() {\n                  table.trigger('click', date);\n                } } });\n      }) ) );\n    }\n    var table = util.extend(new EventTargetImpl(), {\n      $el: util.createElement('table',\n        { attrs: { 'class' : '${prefix}-cal-table' } }, [ thead, tbody ])\n    });\n    return table;\n  };\n\n  var createCalButton = function(prev : boolean, action : () => void) {\n    return util.createElement('span',\n        { style: { display : 'inline-block', float: prev? 'left' : 'right' },\n          attrs: { 'class' : '${prefix}-cal-button' },\n          on: { mousedown : function(event) { event.preventDefault(); },\n            click: action } },\n        [ util.createSVGElement('svg',\n            { attrs: { width: '16', height: '16',\n                tabindex: '-1', focusable: 'false',\n                'class': '${prefix}-cal-button-symbol' },\n              style: { verticalAlign: 'middle' } },\n            [ util.createSVGElement('path',\n                { attrs: { d: 'M3 2L13 8L3 14Z',\n                  transform: prev?\n                    'translate(8,8) rotate(180) translate(-8,-8)' : '' } }) ]),\n          createSpacer()\n        ]);\n  };\n\n  export var createSpacer = function() {\n    return util.createElement('span',{ style: {\n        verticalAlign :'middle',\n        padding : '0px',\n        margin : '0px',\n        display :'inline-block',\n        width : '0px',\n        height : '100%' } });\n  };\n\n  export var createCalIcon = function(r? : number) {\n    r = r || 3;\n    var w = r * 5 + 1;\n    var calIcon = util.createElement('canvas', {\n      style : { verticalAlign : 'middle' },\n      props : { width : '' + w, height : '' + w,\n         },\n      on : {\n        click : function(event) {\n        }\n      }\n    });\n    var ctx = (<any>calIcon).getContext('2d');\n    ctx.clearRect(0, 0, w, w);\n    for (var x = 0; x < w; x += 1) {\n      for (var y = 0; y < w; y += 1) {\n        if (x % r == 0 || y % r == 0) {\n          if (0 < y && y < r && r < x && x < r * 4) {\n          } else {\n            ctx.fillStyle = '#333';\n            ctx.fillRect(x, y, 1, 1);\n          }\n        } else if (~~(x / r) == 3 && ~~(y / r) == 3) {\n          ctx.fillStyle = '#f96';\n          ctx.fillRect(x, y, 1, 1);\n        }\n      }\n    }\n    return calIcon;\n  };\n\n  export var createCalendar = function(selectedDate : Date) {\n\n    var displayDate : Date = null;\n    var setDisplayDate = function(date : Date) {\n      displayDate = new Date(date.getFullYear(), date.getMonth(), 1);\n    }\n\n    var defaultSelected = selectedDate;\n    setDisplayDate(defaultSelected);\n\n    var prev = createCalButton(true, function() {\n      displayDate = new Date(displayDate.getFullYear(),\n        displayDate.getMonth() - 1, 1);\n      update();\n    });\n    var next = createCalButton(false, function() {\n      displayDate = new Date(displayDate.getFullYear(),\n        displayDate.getMonth() + 1, 1);\n      update();\n    });\n\n    var title = util.createElement('span',\n        { style: { verticalAlign : 'middle' } });\n    var titleBody = util.createElement('span',\n        { style: { flex: '1 1 0%', textAlign : 'center' },\n          on: { mousedown: function(event : any) { event.preventDefault(); },\n            click: function() {\n              setDisplayDate(defaultSelected);\n              update();\n            } } }, [ title, createSpacer() ]);\n    var header = util.createElement('div',\n        { style: { display : 'flex' } }, [ prev, titleBody, next ]);\n\n    var cal = util.extend(new EventTargetImpl(), {\n      $el: util.createElement('div', [ header ],\n        { attrs: { 'class' : '${prefix}-calendar' } }),\n      rollDate: function(offset : number) {\n        selectedDate = new Date(\n          selectedDate.getFullYear(),\n          selectedDate.getMonth(), \n          selectedDate.getDate() + offset);\n        setDisplayDate(selectedDate);\n        update();\n      },\n      getSelectedDate : function() {\n        return selectedDate;\n      }\n    });\n    var table : any = null;\n\n    var update = function() {\n      title.textContent = util.formatYM(\n          displayDate.getFullYear(),\n          displayDate.getMonth() );\n      if (table) {\n        cal.$el.removeChild(table.$el);\n        table = null;\n      }\n      table = createCalTable(\n          displayDate.getFullYear(),\n          displayDate.getMonth(), \n          selectedDate,\n          defaultSelected).on('click',\n        function(event : any, date : Date) {\n          cal.trigger(event.type, date);\n        });\n      cal.$el.appendChild(table.$el);\n    };\n    update();\n\n    return cal;\n  };\n\n  export var createOptions = function(optionsData : renderer.OptionsData) {\n\n    var cont = util.createElement('div');\n    var selectedIndex = optionsData.selectedIndex;\n\n    optionsData.options.forEach(function(option : any, index : number) {\n      var disabled = option[optionsData.disabledField] === true;\n      cont.appendChild(util.createElement('div', {\n        style : { display:\n            option[optionsData.selectableField] === false? 'none' : '' },\n        attrs : { 'class': '${prefix}-option' +\n            (disabled? ' ${prefix}-option-disabled' : '') },\n        props : { textContent : option[optionsData.labelField] + '\\u00a0' },\n        on: {\n          mousedown: function(event) { event.preventDefault(); },\n          click: function() {\n            if (disabled) {\n              return;\n            }\n            selectedIndex = index;\n            options.trigger('click', { index : index });\n          } } \n      }) );\n    });\n\n    var updateUI = function() {\n      var options = cont.childNodes;\n      var selectedOption : any = null;\n      for (var i = 0; i < options.length; i += 1) {\n        var option = options[i];\n        util.$(<any>option).addClass('${prefix}-option-selected',\n          i != selectedIndex);\n        if (i == selectedIndex) {\n          selectedOption = option;\n        }\n      }\n      if (selectedOption && cont.parentNode) {\n        // avoid body scrolling.\n        //selectedOption.scrollIntoView();\n        (<any>cont.parentNode).scrollTop = selectedOption.offsetTop;\n      }\n    };\n    var selectable = (index : number) => {\n      var option = optionsData.options[index];\n      return option[optionsData.selectableField] !== false &&\n        option[optionsData.disabledField] !== true;\n    };\n    var options = util.extend(new EventTargetImpl(), {\n      $el: util.createElement('div', {\n        props : { },\n        attrs : { 'class': '${prefix}-options' },\n        style : { overflow : 'auto' }\n      }, [cont]),\n      rollIndex : function(offset : number) {\n        var index = selectedIndex;\n        while (offset != 0 && 0 <= index + offset &&\n            index + offset < optionsData.options.length) {\n          index += offset;\n          if (selectable(index) ) {\n            selectedIndex = index;\n            break;\n          }\n        }\n        if (0 <= index && index < optionsData.options.length) {\n          // do nothing.\n        } else {\n          selectedIndex = -1;\n        }\n        updateUI();\n      },\n      getSelectedIndex : function() {\n        return selectedIndex;\n      }\n    });\n\n    return options;\n  };\n\n  export var createOptionsIcon = function(size? : number) {\n\n    var w = size || 16;\n    var hGap = 3;\n    var vGap = 5;\n\n    var optionsIcon = util.createSVGElement('svg', {\n      style : { verticalAlign : 'middle' },\n      attrs : { width : '' + w, height : '' + w,\n        tabindex: '-1', focusable: 'false' },\n      on : {\n        click : function(event) {\n        }\n      }\n    }, [ util.createSVGElement('path', {\n      attrs : { d : 'M' + hGap + ' ' + vGap +\n          'L' + (w / 2) + ' ' + (w - vGap) +\n          'L' + (w - hGap) + ' ' + vGap,\n        fill : 'none', stroke : '#333',\n        'stroke-width' : '2',\n        'stroke-linecap' : 'round',\n        'stroke-linejoin' : 'round' }\n      }) ]);\n\n    return optionsIcon;\n  };\n\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  export interface ElementOptions {\n    attrs? : { [ key : string ] : string };\n    style? : { [ key : string ] : string };\n    props? : { [ key : string ] : any };\n    on? : { [ type : string ] : (event : any) => void };\n  }\n\n  export interface CreateElement {\n    (tagName : string,\n        opts? : ElementOptions, children? : HTMLElement[]) : HTMLElement;\n    (tagName : string,\n        children? : HTMLElement[], opts? : ElementOptions) : HTMLElement;\n  }\n\n  var parseArguments = function(args : IArguments) {\n    var children : any[] = [];\n    var opts = {};\n    for (var i = 1; i < args.length; i += 1) {\n      var a = args[i];\n      if (typeof a == 'object') {\n        if (typeof a.splice == 'function') {\n          children = a;\n        } else {\n          opts = a;\n        }\n      }\n    }\n    return { children : children, opts : opts };\n  }\n\n  var classNamePrefixRe = /\\$\\{prefix\\}/g;\n  var replaceClassNamePrefix = function(className : string) {\n    return className.replace(classNamePrefixRe, classNamePrefix);\n  }\n\n  var wideNumChars = '０１２３４５６７８９＋－．，／';\n  var narrowNumChars = '0123456789+-.,/';\n  if (wideNumChars.length != narrowNumChars.length) {\n    throw wideNumChars + ',' + narrowNumChars;\n  }\n\n  export class $ {\n\n    private elm : HTMLElement|Document;\n\n    constructor(elm : HTMLElement|Document) {\n      this.elm = elm;\n    }\n\n    public on(type : string, listener : EventListener) {\n      this.elm.addEventListener(type, listener);\n      return this;\n    }\n    public off(type : string, listener : EventListener) {\n      this.elm.removeEventListener(type, listener);\n      return this;\n    }\n    public addClass(className : string, remove? : boolean) {\n      className = replaceClassNamePrefix(className);\n      var classes = '';\n      var classList = ((<HTMLElement>this.elm).getAttribute('class') || '').split(/\\s+/g);\n      for (var i = 0; i < classList.length; i += 1) {\n        var c = classList[i];\n        if (c != className) {\n          classes += ' ' + c;\n        }\n      }\n      if (!remove) {\n        classes += ' ' + className;\n      }\n      (<HTMLElement>this.elm).setAttribute('class', classes);\n      return this;\n    }\n    public removeClass(className : string) {\n      return this.addClass(className, true);\n    }\n  }\n\n  export var util = {\n\n    extend : function(arg : any, ...args : any[]) : any {\n      var o = arguments[0];\n      for (var i = 1; i < arguments.length; i += 1) {\n        var a = arguments[i];\n        for (var k in a) {\n          o[k] = a[k];\n        };\n      }\n      return o;\n    },\n\n    callLater : function(cb : () => void) {\n      window.setTimeout(cb, 0);\n    },\n\n    set : function(\n        elm : Node, opts : ElementOptions) {\n      if (opts.attrs) {\n        for (var k in opts.attrs) {\n          var v = opts.attrs[k];\n          var t = typeof v;\n          if (t == 'number' || t == 'boolean') {\n            v = '' + v;\n          } else if (t == 'undefined') {\n            v = '';\n          }\n          if (typeof v != 'string') {\n            throw 'bad attr type for ' + k + ':' + (typeof v);\n          }\n          if (k == 'class') {\n            v = replaceClassNamePrefix(v);\n          }\n          (<any>elm).setAttribute(k, v);\n        }\n      }\n      if (opts.props) {\n        for (var k in opts.props) {\n          (<any>elm)[k] = opts.props[k];\n        }\n      }\n      if (opts.style) {\n        for (var k in opts.style) {\n          (<any>elm).style[k] = opts.style[k] || '';\n        }\n      }\n      if (opts.on) {\n        for (var k in opts.on) {\n          elm.addEventListener(k, opts.on[k]);\n        }\n      }\n      return elm;\n    },\n\n    createElement : function(tagName : string) {\n      var args = parseArguments(arguments);\n      var elm = document.createElement(tagName);\n      for (var i = 0; i < args.children.length; i += 1) {\n        elm.appendChild(args.children[i]);\n      }\n      return this.set(elm, args.opts);\n    } as CreateElement,\n\n    createSVGElement : function(tagName : string) {\n      var args = parseArguments(arguments);\n      var elm = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n      for (var i = 0; i < args.children.length; i += 1) {\n        elm.appendChild(args.children[i]);\n      }\n      return this.set(elm, args.opts);\n    } as CreateElement,\n\n    $ : function(elm : HTMLElement|Document) { return new $(elm); },\n\n    closest : function(elm : HTMLElement,\n        opts : { className? : string,\n          tagName? : string, root? : HTMLElement, $el? : HTMLElement} ) {\n      if (typeof opts.className == 'string') {\n        opts.className = replaceClassNamePrefix(opts.className);\n      }\n      while (elm != null && elm.nodeType == 1 && elm != opts.root) {\n        if (typeof opts.tagName == 'string' && elm.tagName == opts.tagName) {\n          return elm;\n        } else if (typeof opts.$el == 'object' && elm == opts.$el) {\n          return elm;\n        } else if (typeof opts.className == 'string' &&\n            (elm.getAttribute('class') || '').split(/\\s+/g).indexOf(opts.className)!= -1) {\n          return elm;\n        }\n        elm = <HTMLElement>elm.parentNode;\n      }\n      return null;\n    },\n\n    indexOf : function(elm : Node) {\n      if (elm == null) {\n        return -1;\n      }\n      return Array.prototype.indexOf.call(elm.parentNode.childNodes, elm);\n    },\n\n    offset : function(elm : HTMLElement) {\n      var off = { left : 0, top : 0 };\n      var e : HTMLElement;\n      var base : HTMLElement = null;\n      for (e = elm; e.parentNode != null; e = <HTMLElement>e.parentNode) {\n        if (e.offsetParent != null) {\n          base = e;\n          break;\n        }\n      }\n      if (base != null) {\n        for (e = base; e.offsetParent != null; e = <HTMLElement>e.offsetParent) {\n          off.left += e.offsetLeft;\n          off.top += e.offsetTop;\n        }\n      }\n      for (e = elm; e.parentNode != null &&\n            e != document.body; e = <HTMLElement>e.parentNode) {\n        off.left -= e.scrollLeft;\n        off.top -= e.scrollTop;\n      }\n      return off;\n    },\n\n    moveSublist : function(list : any[],\n        from : number, length : number, to : number) {\n      var i1 = list.slice(from, from + length);\n      var i2 = list.slice(0, from).concat(list.slice(from + length) );\n      to = from < to? to - length : to;\n      return i2.slice(0, to).concat(i1).concat(i2.slice(to) );\n    },\n\n    getCellId : function(row : number, col : number) {\n      return row + ':' + col;\n    },\n\n    translate : function(\n        val1 : number,\n        min1 : number, max1 : number,\n        min2 : number, max2 : number,\n        log? : string) {\n      var val2 = (val1 - min1) * (max2 - min2) / (max1 - min1) + min2;\n      return Math.max(min2, Math.min(Math.round(val2), max2) );\n    },\n\n    trimRe : /^[\\s\\u3000]+|[\\s\\u3000]+$/g,\n    trim : function(value : string) {\n      return value.replace(this.trimRe, '');\n    },\n\n    rtrimRe : /[\\s\\u3000]+$/g,\n    rtrim : function(value : string) {\n      return value.replace(this.rtrimRe, '');\n    },\n\n    format : function(msg : string, ...args : any[]) {\n      for (var i = 0; i < args.length; i += 1) {\n        msg = msg.replace(new RegExp('\\\\{' + i + '\\\\}'), '' + args[i]);\n      }\n      return msg;\n    },\n    \n    // num utils\n\n    numRe : /^([\\+\\-]?)([0-9]*)(\\.[0-9]*)?$/,\n\n    formatNumber : function(value : string,\n        digits? : number, s1? : string, s2? : string) {\n      digits = digits || 0;\n      s1 = typeof s1 == 'string'? s1 : ',';\n      s2 = typeof s2 == 'string'? s2 : '.';\n      if (typeof value == 'number') {\n        value = '' + value;\n      }\n      if (typeof value != 'string') {\n        return '';\n      }\n      var mat = value.match(this.numRe);\n      if (mat) {\n        if (mat[2].length == 0 && (!mat[3] || mat[3].length == 1) ) {\n          return '';\n        }\n        var iPart = mat[2].length > 0? mat[2] : '0';\n        while (iPart.length > 1 && iPart.charAt(0) == '0') {\n          iPart = iPart.substring(1);\n        }\n        var neg = mat[1] == '-';\n        var s = '';\n        while (iPart.length > 3) {\n          s = s1 + iPart.substring(iPart.length - 3) + s;\n          iPart = iPart.substring(0, iPart.length - 3);\n        }\n        s = iPart + s;\n        if (digits > 0) {\n          var fPart = mat[3] || s2;\n          s += s2;\n          for (var i = 0; i < digits; i += 1) {\n            s += (i + 1 < fPart.length)? fPart[i + 1] : '0';\n          }\n        }\n        return (neg && s != '0')? '-' + s : s;\n      }\n      return value;\n    },\n\n    toNarrowNumber : function(value : string) {\n      var s = '';\n      for (var i = 0; i < value.length; i += 1) {\n        var c = value.charAt(i);\n        var index = wideNumChars.indexOf(c);\n        s += (index != -1)? narrowNumChars.charAt(index) : c;\n      }\n      return s;\n    },\n\n    fillLeftZero : function(s : string, digits : number) {\n      while (s.length < digits) { s = '0' + s; }\n      return s;\n    },\n\n    formatYM : function(year : number, month : number) : string {\n      return year + '/' + (month + 1);\n    },\n    /**\n     * format string(8)\n     */\n    formatDate : function(date : any) : string {\n      if (typeof date == 'string' && date.match(/^\\d{8}$/) ) {\n        return date.substring(0, 4) +\n          '/' + date.substring(4, 6) +\n          '/' + date.substring(6, 8);\n      } else {\n        return '';\n      }\n    },\n    /**\n     * parse into string(8)\n     */\n    dateRe : /^(\\d{4})\\D(\\d{1,2})\\D(\\d{1,2})$/,\n    parseDate : function(value : any) : string {\n      if (typeof value == 'number') {\n        value = '' + value;\n      }\n      if (typeof value == 'string') {\n        var mat = value.match(this.dateRe);\n        if (mat) {\n          value = new Date(+mat[1], +mat[2] - 1, +mat[3]);\n        } else {\n          return value;\n        }\n      }\n      return this.fillLeftZero('' + value.getFullYear(), 4) +\n          this.fillLeftZero('' + (value.getMonth() + 1), 2) +\n          this.fillLeftZero('' + value.getDate(), 2);\n    },\n    isHoliday : function(date : Date) {\n      var day = date.getDay();\n      return day == 0 || day == 6; // sun or sat.\n    }\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  export interface TableTemplateCellStyle\n  extends TableCellStyle, CellRendererFactoryOpts {\n\n    width? : number;\n    height? : number;\n\n    columnDraggable? : boolean;\n    columnResizable? : boolean;\n\n    dataField? : string;\n\n    /** one of 'string(default)', 'number', 'boolean', 'select-one' */\n    dataType? : string;\n\n    /** dataType : 'string', 'number' */\n    maxLength? : number;\n\n    /** dataType : 'number' */\n    decimalDigits? : number;\n\n    /** dataType : 'boolean',\n      2 elements array like [falseValue, trueValue].\n     */\n    booleanValues? : any[];\n    showGroupCheck? : boolean;\n\n    /** dataType : 'select-one' */\n    options? : (any[] | ((row : number, col : number) => any[]) );\n    labelField? : string;\n    valueField? : string;\n\n    factory? : TableCellRendererFactory;\n\n    label? : (string | ((model : TemplateTableModel) => string) );\n    description? : (string | ((model : TemplateTableModel) => string) );\n    /** dataType : 'number' */\n    comparator? : Comparator;\n  }\n\n  export type Comparator = (v1 : any, v2 : any) => number;\n\n  export interface TableTemplate {\n    lockColumn? : number;\n    columnDraggable? : boolean;\n    thead? : TableTemplateCellStyle[][];\n    tbody? : TableTemplateCellStyle[][];\n    tfoot? : TableTemplateCellStyle[][];\n  }\n\n  export interface ItemIndex {\n    row : number;\n    /** col will be string if dataField is defined. */\n    col : (number | string);\n  }\n\n  export interface TemplateTableModel extends TableModel {\n    enableLockColumn : boolean;\n    defaultLockColumn : number;\n    setLockLeft : (lockLeft : number) => void;\n    setLockRight : (lockLeft : number) => void;\n    sort : Sort;\n    filterFactory : (dataField : string) => Filter;\n    getFilter : (dataField : string) => Filter;\n    defaultHeaderCellRendererFactory : TableCellRendererFactory;\n    headCells : { [ dataField : string ] : TableTemplateCellStyle };\n    bodyCells : { [ dataField : string ] : TableTemplateCellStyle };\n    footCells : { [ dataField : string ] : TableTemplateCellStyle };\n    items : any[];\n    filteredItems : any[];\n    resetFilter : () => void;\n    getItemAt : (row : number) => any;\n    getItemCount : () => number;\n    getItemIndexAt : (row : number, col : number) => ItemIndex;\n    getItemStyleAt : (itemIndex : ItemIndex) => TableCellStyle;\n    getOrderedColumnIndexAt : (col : number) => number;\n    orderedColumnIndices : number[];\n    hiddenColumns : { [ orderedCol : number ] : boolean };\n    hoverRow : number;\n    editingCell : { row : number, col : number };\n    setTableState : (tableState : TemplateTableState) => void;\n    getTableState : () => TemplateTableState;\n    forEachItemCells : (\n      callback: (\n        cell : TableTemplateCellStyle,\n        item : any, row : number, col : number) => boolean) => void;\n  }\n\n  export interface TemplateTableState {\n    lockColumn : number;\n    enableLockColumn : boolean;\n    cellWidths : { col : number, width : number }[];\n    cellHeights : { row : number, height : number }[];\n    hiddenColumns : number[];\n    sort : Sort;\n    filters : { [ dataField : string ] : any };\n    orderedColumnIndices : number[];\n  }\n\n  export interface TemplateTableCell extends TableCell {\n    dataField? : string;\n    comparator? : Comparator;\n  }\n\n  export interface FilterUI {\n    $el : HTMLElement;\n    setState : (state : any) => void;\n    getState : () => any;\n  }\n\n  export interface Filter {\n    createUI : (\n      dialog : () => EventTarget,\n      opts : FilterDialogOptions,\n      tableModel : TemplateTableModel,\n      cell : TemplateTableCell) => FilterUI;\n    enabled : () => boolean;\n    accept : (value : any) => boolean;\n    setState : (state : any) => void;\n    getState : () => any;\n  }\n\n  export interface Sort {\n    dataField : string;\n    order : string;\n  }\n\n  export interface TemplateTable extends Table {\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  interface FilterItem {\n    index: number;\n    label: any;\n    value: string;\n    checked: boolean;\n    incomplete? : boolean;\n  }\n\n  var getFilterValues = function(\n      tableModel : TemplateTableModel, dataField : string) {\n    var comparator = tableModel.headCells[dataField].comparator;\n    var exists : { [ value : string ] : boolean } = {};\n    var filterValues : string[] = [];\n    var items = tableModel.items;\n    for (var i = 0; i < items.length; i += 1) {\n      var value = items[i][dataField];\n      if (typeof value == 'undefined') {\n        continue;\n      }\n      value = value === null? '' : '' + value;\n      if (!exists[value]) {\n        if (value != '') {\n          filterValues.push(value);\n        }\n        exists[value] = true;\n      }\n    }\n    if (comparator) {\n      filterValues.sort(comparator);\n    }\n    // blank is always last.\n    if (exists['']) {\n      filterValues.push('');\n    }\n    return filterValues;\n  };\n\n  var setToList = function(s : any) : any[] {\n    var l : any[] = [];\n    for (var v in s) { l.push(v); }\n    return l;\n  };\n\n  var listToSet = function(l : any[]) : any {\n    var s : any = {};\n    l.forEach(function(v) { s[v] = true; });\n    return s;\n  };\n\n  var operators = {\n    EQUALS : 'eq',\n    NOT_EQUALS : 'ne',\n    GREATER_THAN : 'gt',\n    GREATER_THAN_OR_EQUALS : 'ge',\n    LESS_THAN : 'lt',\n    LESS_THAN_OR_EQUALS : 'le',\n    STARTS_WITH : 'sw',\n    NOT_STARTS_WITH : 'nsw',\n    ENDS_WITH : 'ew',\n    NOT_ENDS_WITH : 'new',\n    CONTAINS : 'ct',\n    NOT_CONTAINS : 'nct',\n  };\n\n  var activeCustomFilter = function(customFilter : any) {\n    return customFilter.op1 && customFilter.const1 ||\n        customFilter.op2 && customFilter.const2\n  };\n\n  var createDefaultCustomFilter = function() {\n    return {\n      op : 'and', // 'and' or 'or'\n      op1 : '',\n      const1 : '',\n      op2 : '',\n      const2 : '',\n      dataType : ''\n    };\n  };\n\n  export class DefaultFilter implements Filter {\n\n    private dataType : string;\n\n    constructor(dataType : string) {\n      this.dataType = dataType;\n    }\n\n    public createUI(\n      dialog : () => EventTarget,\n      opts : FilterDialogOptions,\n      tableModel : TemplateTableModel,\n      cell : TemplateTableCell\n    ) : FilterUI {\n\n      var messages = i18n.getMessages();\n\n      var labelContent = (<any>cell).label;\n      if (typeof labelContent == 'function') {\n        labelContent = labelContent(tableModel);\n      }\n\n      var dataField = cell.dataField;\n      var filterValues = getFilterValues(tableModel, dataField);\n\n      var rejects : any = {};\n      var valid = true;\n\n      var filterItems : FilterItem[] = [ messages.SELECT_ALL ]\n        .concat(filterValues)\n        .map(function(value, i) {\n          return {\n            index : i,\n            label : (i > 0)? opts.labelFunction(value, cell) : value,\n            value : value,\n            checked : false\n          };\n        });\n\n      class FilterItemCell implements ListCell {\n        public checkBox = (() => {\n          var checkBox = ui.createCheckBox();\n          checkBox.$el.style.verticalAlign = 'middle';\n          return checkBox;\n        })();\n        private label = util.createElement('span', {\n          style : filterLabelStyle,\n          props : { textContent : 'M' } });\n        public index = 0;\n        public row = 0;\n        public setLabel(text : string) {\n          this.label.textContent = text || messages.SELECT_BLANK;\n          this.$el.setAttribute('title', this.label.textContent);\n        }\n        public $el = util.createElement('div', {\n            attrs : { 'class' : '${prefix}-clickable-op' },\n            on : {\n              mousedown : (event) => { event.preventDefault(); },\n              click : () => {\n                filterclick(this.index);\n              }\n            }\n          }, [ this.checkBox.$el, this.label ])\n      }\n\n      class FilterItemList extends ListImpl<FilterItem,FilterItemCell> {\n        public items = filterItems;\n        public getItemAt(row : number) { return this.items[row]; }\n        public getItemCount() { return this.items.length; }\n        public createCell() {\n          return new FilterItemCell();\n        }\n        public renderCell(cell : FilterItemCell, item : FilterItem) {\n          cell.index = item.index;\n          cell.setLabel(item.label);\n          cell.checkBox.setChecked(item.checked);\n          cell.checkBox.setIncomplete(item.incomplete);\n        }\n        public height = 0;\n        public maxHeight = 150;\n      }\n\n      var filterItemList = new FilterItemList();\n      filterItemList.on('rendered', function(event : Event, detail : any) {\n        var height = Math.min(this.maxHeight,\n            this.cellHeight * this.getItemCount() );\n        if (this.height != height) {\n          this.height = height;\n          this.$el.style.height = height + 'px';\n          this.invalidate();\n        }\n      })\n      filterItemList.$el.style.width = '150px';\n      filterItemList.$el.style.height = '0px';\n      filterItemList.invalidate();\n\n      var filterclick = function(index : number) {\n\n        if (index == 0) {\n          // select all\n          var selectCount = 0;\n          filterItems.forEach(function(filterItem, i) {\n            if (i > 0 && filterItem.checked) {\n              selectCount += 1;\n            }\n          });\n          var selectAll = selectCount != filterItems.length - 1;\n          filterItems.forEach(function(filterItem, i) {\n            if (i > 0) {\n              filterItem.checked = selectAll;\n            }\n          });\n        } else {\n          var filterItem = filterItems[index];\n          filterItem.checked = !filterItem.checked;\n        }\n\n        rejects = function() {\n          var rejects : any = {};\n          filterItems.forEach(function(filterItem, i) {\n            if (i > 0 && !filterItem.checked) {\n              rejects[filterItem.value] = true;\n            }\n          });\n          return rejects;\n        }();\n\n        filterchange();\n      };\n\n      var filterchange = function() {\n\n        var rejectCount = 0;\n        for (var value in rejects) {\n          rejectCount += 1;\n        }\n\n        // update 'select all' checkBox\n        filterItems[0].checked = rejectCount != filterItems.length - 1;\n        filterItems[0].incomplete = rejectCount != 0;\n\n        filterItemList.invalidate();\n      };\n\n      //---------------------------------------------------------\n      // custom filter\n\n      var customFilter = createDefaultCustomFilter();\n\n      var createClearButton = function() {\n        var checkBox = ui.createCheckBox();\n        util.extend(checkBox.$el.style,\n          { border : 'none', verticalAlign : 'middle' });\n        checkBox.setChecked(false);\n        var label = util.createElement('span', {\n              attrs : { 'class' : '${prefix}-clickable-op' },\n              style : filterLabelStyle,\n              props : { textContent :\n                util.format(messages.CLEAR_FILTER_FROM, labelContent) }\n            } );\n        return {\n          $el : util.createElement('div', [ checkBox.$el, label ],\n            { on : {\n                click : function(event) {\n                  (<any>dialog() ).dispose();\n                  rejects = {};\n                  customFilter = createDefaultCustomFilter();\n                  dialog().trigger('applyfilter');\n                }\n              }\n            }),\n          checkBox : checkBox\n        };\n      };\n\n      var createFilterButton = function(filterTitle : string) {\n        var checkBox = ui.createCheckBox();\n        util.extend(checkBox.$el.style,\n          { border : 'none', verticalAlign : 'middle' });\n        checkBox.setChecked(false);\n        var label = util.createElement('span', {\n              attrs : { 'class' : '${prefix}-clickable-op' },\n              style : filterLabelStyle,\n              props : { textContent : filterTitle }\n            } );\n        return {\n          $el : util.createElement('div', [ checkBox.$el, label ],\n            { on : {\n                click : function(event) {\n                  (<any>dialog() ).dispose();\n                  showFilterDialog(filterTitle);\n                }\n              }\n            }),\n          checkBox : checkBox\n        };\n      };\n\n      var showFilterDialog = function(title : string) {\n        var optMap = function(k : string) {\n          return { value : (<any>operators)[k], label : (<any>messages)[k] };\n        };\n        var opOpts : any[] = [ { value : '', label : '' } ];\n        opOpts = opOpts.concat([\n          'EQUALS',\n          'NOT_EQUALS',\n          'GREATER_THAN',\n          'GREATER_THAN_OR_EQUALS',\n          'LESS_THAN',\n          'LESS_THAN_OR_EQUALS'].map(optMap) );\n        if (dataType == 'string' ||\n            dataType == 'multi-line-string' ||\n            dataType == 'date') {\n          opOpts = opOpts.concat([\n            'STARTS_WITH',\n            'NOT_STARTS_WITH',\n            'ENDS_WITH',\n            'NOT_ENDS_WITH',\n            'CONTAINS',\n            'NOT_CONTAINS'].map(optMap) );\n        }\n        var createOpUI = function(op : string, value : string) {\n          var sel :any = util.createElement('select',\n            opOpts.map(function(opOpt) {\n              return util.createElement('option', {\n                props : { textContent : opOpt.label,\n                    value : opOpt.value,\n                    selected : op == opOpt.value } });\n            }) );\n          var txt : any = util.createElement('input',\n            { attrs : { type : 'text' },\n              style : { width : '200px' },\n              props : { value : sel.value? value : '' } } );\n          var opBody = util.createElement('div',\n            { style : { whiteSpace: 'nowrap' } });\n          if (messages.OP_LAYOUT == 'L') {\n            opBody.appendChild(sel);\n            txt.style.marginLeft = '2px';\n          }\n          opBody.appendChild(txt);\n          if (messages.OP_LAYOUT == 'R') {\n            txt.style.marginRight = '2px';\n            opBody.appendChild(sel);\n          }\n          return { $el : opBody, sel : sel, txt : txt };\n        };\n\n        var updateRadios = function() {\n          customFilter.op = customFilter.op || 'and';\n          rd1.radio.checked = rd1.radio.value == customFilter.op;\n          rd2.radio.checked = rd2.radio.value == customFilter.op;\n        };\n        var createRadio = function(value : string, label : string) {\n          var radio : any = util.createElement('input',\n            { attrs : { type : 'radio' }, props : { value : value },\n              on : { click : function() {\n                customFilter.op = value;\n                updateRadios();\n              } } });\n          var radioBody = util.createElement('label',\n            [ radio, <any>document.createTextNode(label) ]);\n          return { $el : radioBody, radio : radio };\n        };\n\n        var rd1 = createRadio('and', messages.AND);\n        var rd2 = createRadio('or', messages.OR);\n        var rdGrp = util.createElement('div', [ rd1.$el, rd2.$el ]);\n        updateRadios();\n\n        var op1 = createOpUI(customFilter.op1, customFilter.const1);\n        var op2 = createOpUI(customFilter.op2, customFilter.const2);\n\n        var dialogPos = { left : 0, top : 0 };\n\n        var cfDialog = <ui.Dialog>ui.createDialog([\n          util.createElement('div', { props : { textContent : title },\n            style : { margin : '2px' },\n            on: {\n              mousedown: function(event) {\n                var mousemoveHandler = function(event : any) {\n                  dialogPos.left = event.pageX - dragPoint.left;\n                  dialogPos.top = event.pageY - dragPoint.top;\n                  cfDialog.$el.style.left = dialogPos.left + 'px';\n                  cfDialog.$el.style.top = dialogPos.top + 'px';\n                };\n                var mouseupHandler = function(event : any) {\n                  util.$(document)\n                    .off('mousemove', mousemoveHandler)\n                    .off('mouseup', mouseupHandler);\n                };\n\n                event.preventDefault();\n                util.$(document)\n                  .on('mousemove', mousemoveHandler)\n                  .on('mouseup', mouseupHandler);\n                var dragPoint = {\n                  left: event.pageX - dialogPos.left,\n                  top: event.pageY - dialogPos.top\n                };\n              }\n            } }),\n          util.createElement('fieldset', [\n            util.createElement('legend', { props : {\n              textContent: '\"' + labelContent +'\"' } }),\n            op1.$el, rdGrp, op2.$el ]),\n          util.createElement('div',\n            { style : { textAlign : 'right' } }, [\n            ui.createButton(messages.OK, (event)=>{\n              var flt = function(val : string) : string {\n                val = util.trim(val);\n                if (dataType == 'number') {\n                  val = util.toNarrowNumber(val);\n                }\n                return val;\n              };\n              customFilter.op1 = op1.sel.value;\n              customFilter.const1 = customFilter.op1? flt(op1.txt.value) : '';\n              customFilter.op2 = op2.sel.value;\n              customFilter.const2 = customFilter.op2? flt(op2.txt.value) : '';\n              cfDialog.dispose();\n              dialog().trigger('applyfilter');\n            }),\n            ui.createButton(messages.CANCEL, (event)=>{\n              cfDialog.dispose();\n            })\n          ])\n        ]).on('beforeshow', function() {\n          dialogPos.left = document.documentElement.scrollLeft +\n            ( (window.innerWidth - this.$el.offsetWidth) / 2 );\n          dialogPos.top = document.documentElement.scrollTop +\n            ( (window.innerHeight - this.$el.offsetHeight) / 2 );\n          this.$el.style.left = dialogPos.left + 'px';\n          this.$el.style.top = dialogPos.top + 'px';\n        });\n\n        cfDialog.show();\n      };\n\n      var dataType = this.dataType || 'string';\n      var customFilterButton = createFilterButton(\n        dataType == 'number'? messages.NUMBER_FILTERS :\n        dataType == 'date'? messages.DATE_FILTERS :\n        messages.TEXT_FILTERS);\n\n      if (!(dataType == 'string' ||\n          dataType == 'multi-line-string' ||\n          dataType == 'number' ||\n          dataType == 'date') ) {\n        customFilterButton.$el.style.display = 'none';\n      }\n\n      // horizontal bar\n      var hr = () => util.createElement('div', { style : {\n        borderTop : '1px solid #000', opacity : '0.2', margin : '4px 0px'\n      } });\n\n      return {\n        setState : (state : any) => {\n          rejects = listToSet(state.rejects);\n          filterItems.forEach(function(filterItem, i) {\n            if (i > 0) {\n              filterItem.checked = !rejects[filterItem.value];\n            }\n          });\n          filterchange();\n          customFilter = state.customFilter;\n          customFilterButton.checkBox.setChecked(\n            activeCustomFilter(customFilter) );\n        },\n        getState : () => {\n\n          if (!valid) {\n            rejects = {};\n            filterItems.forEach(function(filterItem, i) {\n              if (i > 0) {\n                rejects[filterItem.value] = true;\n              }\n            });\n            filterItemList.items.forEach(function(filterItem) {\n              if (filterItem.checked) {\n                delete rejects[filterItem.value];\n              }\n            });\n            valid = true;\n          }\n\n          customFilter.dataType = dataType;\n          return {\n            rejects : setToList(rejects),\n            customFilter : customFilter\n          };\n        },\n        $el : util.createElement('div', { props : {} }, [\n          hr(),\n          createClearButton().$el,\n          customFilterButton.$el,\n          hr(),\n          // search box\n          util.createElement('input', { attrs : { type : 'text',\n              placeHolder: messages.SEARCH },\n            style : { width : '150px', margin : '4px 0px' },\n            on : { keyup : function(event) {\n              valid = false;\n              var normalize = function(value : string) {\n                return (value || '').toLowerCase();\n              };\n              var value = normalize(event.currentTarget.value);\n              filterItemList.items = filterItems.\n                  filter(function(filterItem, i) {\n                return !(i > 0 && value &&\n                  normalize(filterItem.label).indexOf(value) == -1);\n              });\n              filterItemList.invalidate();\n            }} }),\n          // filter items\n          filterItemList.$el\n        ])\n      };\n    }\n\n    public enabled() {\n      var enabled = false;\n      for (var reject in this.rejects) {\n        enabled = true;\n        break;\n      }\n      if (activeCustomFilter(this.customFilter) ) {\n        enabled = true;\n      }\n      return enabled;\n    }\n\n    public accept(value : any) {\n      if (this.rejects[value === null? '' : '' + value]) {\n        return false;\n      }\n      if (value === null) {\n        if (this.dataType == 'number') {\n          value = 0;\n        } else {\n          value = '';\n        }\n      }\n      if (!this.customFilterAccept(value) ) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    private createCustomFilterAccept(customFilter : any) :\n        (value : any) => boolean {\n\n      if (activeCustomFilter(customFilter) ) {\n\n        var creOp = function(op : string, constVal : any) :\n            (value : any) => boolean {\n\n          if (customFilter.dataType == 'number') {\n\n            // number\n\n            constVal = +constVal;\n\n            switch(op) {\n\n            case operators.EQUALS :\n              return (value : any) => +value == constVal;\n            case operators.NOT_EQUALS :\n              return (value : any) => !(+value == constVal);\n            case operators.GREATER_THAN :\n              return (value : any) => +value > constVal;\n            case operators.GREATER_THAN_OR_EQUALS :\n              return (value : any) => +value >= constVal;\n            case operators.LESS_THAN :\n              return (value : any) => +value < constVal;\n            case operators.LESS_THAN_OR_EQUALS :\n              return (value : any) => +value <= constVal;\n\n            default :\n              throw 'bad op:' + op;\n            }\n\n          } else {\n\n            // string\n\n            switch(op) {\n\n            case operators.EQUALS :\n              return (value : any) => value == constVal;\n            case operators.NOT_EQUALS :\n              return (value : any) => value != constVal;\n            case operators.GREATER_THAN :\n              return (value : any) => value > constVal;\n            case operators.GREATER_THAN_OR_EQUALS :\n              return (value : any) => value >= constVal;\n            case operators.LESS_THAN :\n              return (value : any) => value < constVal;\n            case operators.LESS_THAN_OR_EQUALS :\n              return (value : any) => value <= constVal;\n\n            case operators.STARTS_WITH :\n              return (value : any) => value.indexOf(constVal) == 0;\n            case operators.NOT_STARTS_WITH :\n              return (value : any) => value.indexOf(constVal) != 0;\n            case operators.ENDS_WITH :\n              return (value : any) => value && value.indexOf(constVal) ==\n                value.length - constVal.length;\n            case operators.NOT_ENDS_WITH :\n              return (value : any) => !(value && value.indexOf(constVal) ==\n                value.length - constVal.length);\n            case operators.CONTAINS :\n              return (value : any) => value.indexOf(constVal) != -1;\n            case operators.NOT_CONTAINS :\n              return (value : any) => value.indexOf(constVal) == -1;\n\n            default :\n              throw 'bad op:' + op;\n            }\n          }\n        };\n\n        var ops : any[] = [];\n        if (customFilter.const1) {\n          ops.push(creOp(customFilter.op1, customFilter.const1) );\n        }\n        if (customFilter.const2) {\n          ops.push(creOp(customFilter.op2, customFilter.const2) );\n        }\n\n        return ops.length == 1? ops[0] :\n          customFilter.op == 'and'?\n            (value : any) => ops[0](value) && ops[1](value) :\n            (value : any) => ops[0](value) || ops[1](value);\n\n      } else {\n        return () => true;\n      }\n    }\n\n    private rejects : any = {};\n    private customFilter : any = {};\n    private customFilterAccept : (value : any) => boolean = () => true;\n\n    public setState(state : any) {\n      this.rejects = listToSet(\n        state && state.rejects? state.rejects : []);\n      this.customFilter =\n        state && state.customFilter? state.customFilter : {};\n      this.customFilterAccept =\n        this.createCustomFilterAccept(this.customFilter);\n    }\n\n    public getState() : any {\n      return {\n        rejects : setToList(this.rejects),\n        customFilter : this.customFilter\n      };\n    }\n  }\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  interface Selector {\n    $el : HTMLElement,\n    selected : boolean,\n    setSelected : (selected : boolean) => void;\n    isSelected : () => boolean;\n  }\n\n  interface FilterButton {\n    $el : HTMLElement;\n    cell : TemplateTableCell;\n    filtered : boolean;\n    sortOrder : string;\n    setFiltered : (filtered : boolean) => void;\n    setSortOrder : (sortOrder : string) => void;\n    update : () => void;\n  }\n\n  export interface FilterDialogOptions extends CellRendererFactoryOpts {\n    sortOrder : string;\n    filterState : any;\n  }\n\n  interface FilterDialog extends EventTarget {\n    render : (cell : TableCell) => void;\n    beginEdit : (cell : TableCell) => {\n      focus : () => void;\n      endEdit : () => void;\n    };\n    dispose : () => void;\n  }\n\n  export var SortOrder = { ASC : 'asc', DESC : 'desc' };\n\n  // selector of sort order\n  var createSelector = function() : Selector {\n    var rect = util.createElement('span', {\n      attrs : { 'class' : '${prefix}-selector-body' }, \n      style : { display:'inline-block', width:'12px', height : '12px' }\n    });\n    return {\n      $el : rect,\n      selected : false,\n      setSelected : function(selected) {\n        this.selected = selected;\n        util.$(rect).addClass('${prefix}-selected', !selected);\n      },\n      isSelected : function() {\n        return this.selected;\n      }\n    };\n  };\n\n  export var filterLabelStyle : { [ k : string ] : string } =\n      { marginLeft : '4px', verticalAlign : 'middle' };\n\n  var createFilterDialog = function(\n      opts : FilterDialogOptions, filterUI : HTMLElement) {\n\n    var messages = i18n.getMessages();\n\n    var createSortButton = function(label : string) {\n      var selector = createSelector();\n      selector.$el.style.verticalAlign = 'middle';\n      return {\n        selector : selector,\n        $el : util.createElement('div', [\n          selector.$el,\n          util.createElement('span', {\n            style : filterLabelStyle, props : { textContent : label } })\n        ], { attrs : { 'class' : '${prefix}-clickable-op' }, on : {\n          mousedown : function(event) {\n            event.preventDefault();\n          },\n          click : function(event) {\n            if (event.which != 1) {\n              return;\n            }\n            flDialog.trigger('sortclick', { label : label }); }\n        } })\n      };\n    };\n\n    var sortAscButton = createSortButton(messages.SORT_ASC);\n    var sortDescButton = createSortButton(messages.SORT_DESC);\n\n    var flDialog = util.extend(ui.createDialog([\n      // sort\n      sortAscButton.$el,\n      sortDescButton.$el,\n      filterUI,\n      // buttons\n      util.createElement('div', { style :\n          { marginTop : '4px', display : 'inline-block', float : 'right' } },\n        [\n          ui.createButton(messages.OK, function() {\n            flDialog.dispose();\n            flDialog.trigger('applyfilter');\n          }),\n          ui.createButton(messages.CANCEL, function() {\n            flDialog.dispose();\n          })\n        ])\n    ]), opts).on('sortclick', function(event : Event, detail : any) {\n\n      if (detail.label == messages.SORT_ASC) {\n        this.sortOrder = this.sortOrder == SortOrder.ASC? null : SortOrder.ASC;\n      }\n      if (detail.label == messages.SORT_DESC) {\n        this.sortOrder = this.sortOrder == SortOrder.DESC? null : SortOrder.DESC;\n      }\n\n      this.trigger('sortchange');\n\n      this.dispose();\n      this.trigger('applysort');\n\n    }).on('sortchange', function() {\n\n      sortAscButton.selector.setSelected(this.sortOrder == SortOrder.ASC);\n      sortDescButton.selector.setSelected(this.sortOrder == SortOrder.DESC);\n\n    } ).trigger('sortchange');\n\n    return flDialog;\n  };\n\n  var createFilterButton = function() : FilterButton {\n    return {\n      $el : util.createSVGElement('svg',\n          { style : { position : 'absolute' },\n            attrs : { width : '15', height : '15',\n            'class' : '${prefix}-filter-button ${prefix}-clickable-op' } }),\n      filtered : false,\n      sortOrder : null,\n      setFiltered : function(filtered : boolean) {\n        this.filtered = filtered;\n        this.update();\n      },\n      setSortOrder : function(sortOrder : string) {\n        this.sortOrder = sortOrder;\n        this.update();\n      },\n      update : function() {\n        // remove all children\n        while (this.$el.firstChild) {\n          this.$el.removeChild(this.$el.firstChild);\n        }\n        // outer rect\n        this.$el.appendChild(util.createSVGElement('rect', {\n          attrs : { 'class' : '${prefix}-filter-body',\n            x : '0', y : '0', width: '15', height : '15',\n            rx: '3', ry : '3' } }) );\n        // and others.\n        var fillClass = '${prefix}-filter-fill';\n        var strokeClass = '${prefix}-filter-stroke';\n        if (this.filtered) {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : fillClass,\n              d : 'M 5 4 L 8 7 L 8 12 L 11 12 L 11 7 L 14 4 Z' } }) );\n          if (this.sortOrder == null) {\n            this.$el.appendChild(util.createSVGElement('path', {\n              attrs : { 'class' : fillClass, d: 'M 0 8 L 3 12 L 6 8 Z' } }) );\n          }\n        } else if (this.sortOrder == null) {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : fillClass, d: 'M 1 4 L 7 11 L 13 4 Z' } }) );\n        } else {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : fillClass, d: 'M 4 5 L 9 11 L 14 5 Z' } }) );\n        }\n        if (this.sortOrder != null) {\n          this.$el.appendChild(util.createSVGElement('path', {\n            attrs : { 'class' : strokeClass, d: 'M 3 2 L 3 12'} } ) );\n          if (this.sortOrder == SortOrder.ASC) {\n            this.$el.appendChild(util.createSVGElement('path', {\n              attrs : { 'class' : strokeClass, d: 'M 1 5 L 3 2 L 5 5'} }) );\n          } else {\n            this.$el.appendChild(util.createSVGElement('path', {\n              attrs : { 'class' : strokeClass, d : 'M 1 9 L 3 12 L 5 9' } }) );\n          }\n        }\n        return this;\n      }\n    }.update();\n  };\n\n  export var createDefaultHeaderCellRendererFactory =\n      function(opts? : CellRendererFactoryOpts) :\n        TableCellRendererFactory {\n\n    opts = util.extend(createDefaultCellRendererFactoryOpts(), opts || {});\n\n    return function(td) : TableCellRenderer {\n\n      var showFilterDialog = function() : FilterDialog {\n\n        var dataField = filterButton.cell.dataField;\n        var sort = tableModel.sort;\n        var filter = tableModel.getFilter(dataField);\n\n        opts = util.extend(opts, {\n          sortOrder : (sort && sort.dataField == dataField)? sort.order : null\n        });\n\n        var filterUI = filter.createUI(\n            () => flDialog,\n            <FilterDialogOptions>opts,\n            tableModel, filterButton.cell);\n        filterUI.setState(filter.getState() );\n\n        var flDialog : any = createFilterDialog(\n            <FilterDialogOptions>opts, filterUI.$el\n          ).on('applysort', function() {\n            tableModel.sort = this.sortOrder?\n                { dataField : dataField, order : this.sortOrder } :null;\n            tableModel.trigger('filterchange');\n          }).on('applyfilter', function() {\n            filter.setState(filterUI.getState() );\n            tableModel.trigger('filterchange');\n          });\n\n        var off = util.offset(td.$el);\n        flDialog.$el.style.left = off.left + 'px',\n        flDialog.$el.style.top = (off.top + td.$el.offsetHeight) + 'px';\n        flDialog.show();\n        return flDialog;\n      };\n\n      var initCheckBox = function() {\n        checkBox = ui.createCheckBox();\n        util.set(checkBox.$el, {\n          style : { verticalAlign: 'middle', marginRight: '2px' },\n          on : { mousedown : function(event) {\n            event.preventDefault();\n            if (event.which != 1) {\n              return;\n            }\n            // force valuecommit at first.\n            td.tableModel.trigger('valuecommit', { force : true });\n            var cell = (<any>checkBox).cell;\n            var booleanValues = cell.booleanValues || [ false, true ];\n            var itemCount = tableModel.getItemCount();\n            var editable : boolean[] = [];\n            var editableCount = 0;\n            var trueCount = 0;\n            for (var i = 0; i < itemCount; i += 1) {\n              var item = tableModel.getItemAt(i);\n              editable.push(!(tableModel.getItemStyleAt &&\n                tableModel.getItemStyleAt({\n                  row : i,\n                  col : cell.dataField\n                }).editable === false) );\n              if (editable[i]) {\n                editableCount += 1;\n                if (tableModel.getItemAt(i)[cell.dataField] === booleanValues[1]) {\n                  trueCount += 1;\n                }\n              }\n            }\n            var checked = trueCount != editableCount;\n            var changed = false;\n            var newValue = booleanValues[checked? 1 : 0];\n            for (var i = 0; i < itemCount; i += 1) {\n              var item = tableModel.getItemAt(i);\n              if (editable[i]) {\n                if (item[cell.dataField] !== newValue) {\n                  item[cell.dataField] = newValue;\n                  changed = true;\n                }\n              }\n            }\n            updateCheckBoxState();\n            if (changed) {\n              tableModel.trigger('groupvaluechange',\n                { dataField : cell.dataField, newValue : newValue });\n            }\n          }}});\n\n        if (!valuechangeHandler) {\n          valuechangeHandler = function(event, detail) {\n            if (detail.itemIndex.col == (<any>checkBox).cell.dataField) {\n              updateCheckBoxState();\n            }\n          };\n          tableModel.on('valuechange', valuechangeHandler);\n        }\n        td.$el.insertBefore(checkBox.$el, td.$el.firstChild);\n      };\n\n      var updateCheckBoxState = function() {\n        var cell = (<any>checkBox).cell;\n        var booleanValues = cell.booleanValues || [ false, true ];\n        var itemCount = tableModel.getItemCount();\n        var trueCount = 0;\n        for (var i = 0; i < itemCount; i += 1) {\n          if (tableModel.getItemAt(i)[cell.dataField] === booleanValues[1]) {\n            trueCount += 1;\n          }\n        }\n        checkBox.setChecked(trueCount > 0);\n        checkBox.setIncomplete(trueCount > 0 && trueCount != itemCount);\n      };\n\n      var initFilterButton = function() {\n        filterButton = createFilterButton();\n        util.set(filterButton.$el, {\n          attrs : { tabindex: '-1', focusable: 'false' },\n          on : { mousedown : function(event) {\n              event.preventDefault();\n              if (event.which != 1) {\n                return;\n              }\n              if (dialog == null) {\n                // wait for end edit then show dialog.\n                util.callLater(function() {\n                  dialog = showFilterDialog();\n                  dialog.on('dispose', function() {\n                    dialog = null;\n                  });\n                });\n              } else {\n                dialog.dispose();\n              }\n            }\n          }\n        });\n        td.$el.appendChild(filterButton.$el);\n      };\n\n      var labelRenderer = createMultiLineLabelRenderer(td.$el);\n\n      var tableModel : TemplateTableModel = <any>td.tableModel;\n      var checkBox : ui.CheckBox = null;\n      var filterButton : FilterButton = null;\n      var dialog : FilterDialog = null;\n\n      var valuechangeHandler : (event : any, detail : any) => void = null;\n\n      var showGroupCheck  = function(cell : any) {\n        return cell.dataType == 'boolean' && cell.showGroupCheck !== false;\n      };\n\n      return {\n        render : function(cell) {\n\n          labelRenderer.setLabel(cell.value || '\\u00a0');\n\n          // checckBox\n          if (showGroupCheck(cell) ) {\n            if (!checkBox) {\n              initCheckBox();\n            }\n            (<any>checkBox).cell = cell;\n          }\n          if (checkBox) {\n            if (showGroupCheck(cell) ) {\n              checkBox.$el.style.display = 'inline-block';\n              updateCheckBoxState();\n            } else {\n              checkBox.$el.style.display = 'none';\n            }\n          }\n\n          // filterButton\n          if (cell.dataField) {\n            if (!filterButton) {\n              initFilterButton();\n            }\n            filterButton.cell = cell;\n            var sort = tableModel.sort;\n            var filter = tableModel.getFilter(cell.dataField);\n            filterButton.setSortOrder(\n              (sort && sort.dataField == cell.dataField)? sort.order : null);\n            filterButton.setFiltered(filter.enabled() );\n          }\n          if (filterButton) {\n            filterButton.$el.style.display = cell.dataField? '' : 'none';\n          }\n        },\n        beginEdit : function(cell) {\n          return { focus : function() {}, endEdit : function() {} };\n        },\n        dispose : function() {\n          if (valuechangeHandler) {\n            tableModel.off('valuechange', valuechangeHandler);\n          }\n        }\n      };\n    };\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  var createDefaultOrderedColumnIndices = function(tableModel : TableModel) {\n    var orderedColumnIndices : number[] = [];\n    var columnCount = tableModel.getColumnCount();\n    for (var i = 0; i < columnCount; i += 1) {\n      orderedColumnIndices.push(i);\n    }\n    return orderedColumnIndices;\n  };\n\n  var showColumnEditDialog = function(table : TemplateTable) {\n\n    var messages = i18n.getMessages();\n    var tableModel = <TemplateTableModel>table.model;\n    var lockLeft : number = (<any>tableModel).lockLeft;\n\n    var ColumnType = { LOCK_COLUMN : 'lockColumn', COLUMN : 'column' };\n\n    interface ColumnItem {\n      type : string;\n      label : string;\n      hidden : boolean;\n      col? : number;\n      colSpan? : number;\n    }\n\n    var columns = function() {\n      var columns : ColumnItem[] = [];\n      var columnCount = tableModel.getColumnCount();\n      for (var col = 0; col <= columnCount;) {\n        if (col == lockLeft) {\n          columns.push({ type : ColumnType.LOCK_COLUMN,\n            label : messages.LOCK_COLUMN,\n            hidden : !tableModel.enableLockColumn });\n        }\n        if (col < columnCount) {\n          var cell = tableModel.getCellAt(0, col);\n          var style : any = tableModel.getCellStyleAt(0, col);\n          var desc = style.description;\n          var label = typeof desc == 'function'? desc(tableModel) : \n            typeof desc == 'undefined'? tableModel.getValueAt(0, col) : desc;\n          var orderedCol = tableModel.getOrderedColumnIndexAt(col);\n          columns.push({ type : ColumnType.COLUMN,\n            label : label,\n            hidden : !!tableModel.hiddenColumns[orderedCol],\n            col : orderedCol, colSpan : cell.colSpan });\n          col += cell.colSpan;\n        } else {\n          col += 1;\n        }\n      }\n      return columns;\n    }();\n\n    var columnItems = columns.map(function(column) {\n      return util.createElement('div', {\n          attrs : { 'class' : '${prefix}-listitem ${prefix}-clickable' +\n            (column.type == ColumnType.LOCK_COLUMN?\n                ' ${prefix}-column-edit-lock-column' : '') },\n          on : { mousedown : function(event) {\n            event.preventDefault();\n            if (event.which != 1) {\n              return;\n            }\n            columnItems.forEach(function(elm) {\n              util.$(elm).removeClass('${prefix}-clickable');\n            });\n            var mousemoveHandler = function(event : Event) {\n              if (!started && Math.abs(event.pageY - dragPoint.y) > 4) {\n                started = true;\n              }\n              if (!started) {\n                return;\n              }\n              var listitem = util.closest(event.target,\n                  { className : '${prefix}-listitem', root : dialog.$el });\n              if (!listitem) {\n                if (!scroll.active) {\n                  scroll.active = true;\n                  scroll.event = event;\n                  var scrollTarget = dialog.$el.firstChild;\n                  var off = util.offset(scrollTarget);\n                  var top : number = off.top + scrollTarget.scrollTop;\n                  var scrollHandler = function() {\n                    var pageY = scroll.event.pageY;\n                    var delta = 0;\n                    if (pageY < top) {\n                      delta = -scroll.delta;\n                    } else if (top + scrollTarget.offsetHeight < pageY) {\n                      delta = scroll.delta;\n                    }\n                    if (delta != 0) {\n                      scrollTarget.scrollTop += delta;\n                      bar.style.display = 'none';\n                    }\n                    if (scroll.active) {\n                      window.setTimeout(scrollHandler, scroll.timeout);\n                    }\n                  };\n                  scrollHandler();\n                } else {\n                  scroll.event = event;\n                }\n                return;\n              }\n              indexTo = columnItems.indexOf(listitem);\n              var off = util.offset(listitem);\n              var top = listitem.offsetTop - 2 -\n                    (<HTMLElement>listitem.parentNode).scrollTop;\n              if (off.top + listitem.offsetHeight / 2 < event.pageY) {\n                indexTo += 1;\n                top += listitem.offsetHeight;\n              }\n              bar.style.display = '';\n              bar.style.top = top + 'px';\n              scroll.active = false;\n            };\n            var mouseupHandler = function(event : Event) {\n              scroll.active = false;\n              util.$(document).off('mousemove', mousemoveHandler).\n                off('mouseup', mouseupHandler);\n              columnItems.forEach(function(elm) {\n                util.$(elm).addClass('${prefix}-clickable');\n              });\n              lastTarget = target;\n              dialog.$el.removeChild(bar);\n              if (indexTo != -1 && indexFrom != indexTo) {\n                var parent = target.parentNode;\n                var ref = columnItems[indexTo];\n                columns = util.moveSublist(columns, indexFrom, 1, indexTo);\n                columnItems = util.moveSublist(columnItems, indexFrom, 1, indexTo);\n                parent.removeChild(target);\n                if (ref) {\n                  parent.insertBefore(target, ref);\n                } else {\n                  parent.appendChild(target);\n                }\n              }\n            };\n            util.$(document).on('mousemove', mousemoveHandler).\n              on('mouseup', mouseupHandler);\n            var target = event.currentTarget;\n            var bar = util.createElement('div', {\n              attrs : { 'class' : '${prefix}-column-edit-bar' },\n              style : { position : 'absolute', left : '0px',\n                display : 'none', width : target.offsetWidth + 'px' }\n            });\n            var indexFrom = columnItems.indexOf(target);\n            var indexTo = -1;\n            var started = false;\n            var scroll = {\n              active : false,\n              event : null as Event,\n              delta : 16,\n              timeout : 100\n            };\n            var dragPoint = { x : event.pageX, y : event.pageY };\n            dialog.$el.appendChild(bar);\n            if (lastTarget != null) {\n              util.$(lastTarget).removeClass('${prefix}-selected');\n            }\n            util.$(target).addClass('${prefix}-selected');\n          }}\n        },[\n        util.createElement('input', {\n          attrs : { type : 'checkbox' },\n          props : { checked : !column.hidden },\n          style : { verticalAlign : 'middle' },\n          on:{ click : function(event) {\n            var target = event.currentTarget;\n            var index = util.indexOf(target.parentNode);\n            columns[index].hidden = !target.checked;\n          }}\n        }),\n        util.createElement('span', {\n          style : { verticalAlign : 'middle' },\n          props : { textContent : column.label }\n        }) ]);\n    });\n\n    var lastTarget : HTMLElement = null;\n\n    var dialog =  util.extend(ui.createDialog([\n      // columns\n      util.createElement('div',\n        { style : { overflow : 'auto',  height : '200px' } }, columnItems),\n      // buttons\n      util.createElement('div', { style : { float : 'right'} }, [\n        ui.createButton(messages.RESET, function() {\n          dialog.dispose();\n          tableModel.orderedColumnIndices = null;\n          tableModel.hiddenColumns = {};\n          tableModel.trigger('beforecellsizechange');\n          tableModel.setLockLeft(tableModel.defaultLockColumn);\n          tableModel.enableLockColumn = true;\n          table.invalidate();\n        }),\n        ui.createButton(messages.APPLY, function() {\n          dialog.dispose();\n          var orderedColumnIndices : number[] = [];\n          var hiddenColumns : { [ orderedCol : number ] : boolean } = {};\n          var lockColumn = 0;\n          var enableLockColumn = true;\n          columns.forEach(function(column, col) {\n            if (column.type == 'column') {\n              for (var i = 0; i < column.colSpan; i += 1) {\n                orderedColumnIndices.push(i + column.col);\n              }\n              if (column.hidden) {\n                hiddenColumns[column.col] = true;\n              }\n            } else if (column.type == ColumnType.LOCK_COLUMN) {\n              lockColumn = col < columns.length - 1? col : 0;\n              enableLockColumn = !column.hidden;\n            }\n          });\n          tableModel.orderedColumnIndices = orderedColumnIndices;\n          tableModel.hiddenColumns = hiddenColumns;\n          tableModel.trigger('beforecellsizechange');\n          tableModel.setLockLeft(lockColumn);\n          tableModel.enableLockColumn = enableLockColumn;\n          table.invalidate();\n        }),\n        ui.createButton(messages.CANCEL, function() {\n          dialog.dispose();\n        })\n      ])\n    ])).on('beforeshow', function() {\n      var left = document.documentElement.scrollLeft +\n        ( (window.innerWidth - this.$el.offsetWidth) / 2 );\n      var top = document.documentElement.scrollTop +\n        ( (window.innerHeight - this.$el.offsetHeight) / 2 );\n      this.$el.style.left = left + 'px';\n      this.$el.style.top = top + 'px';\n    });\n    dialog.show();\n  };\n\n  var enableHover = function(table : Table) {\n    var tableModel = <TemplateTableModel>table.model;\n    var setHoverRowImpl = function(row : number, hover : boolean) {\n      table.forEachCells(function(td) {\n        var itemIndex = tableModel.getItemIndexAt(td.row, td.col);\n        if (itemIndex.row != row) {\n          // skip\n          return;\n        }\n        util.$(td.$el).addClass('${prefix}-item-hover', !hover);\n        //var cs = null;\n        for (var i = 0; i < td.$el.childNodes.length; i += 1) {\n          var child = td.$el.childNodes[i];\n          /*\n          if (child.tagName == 'INPUT' || child.tagName == 'SELECT') {\n            if (cs == null) {\n              cs = window.getComputedStyle(td.$el, null);\n            }\n            child.style.backgroundColor = cs.backgroundColor;\n          }\n          */\n        }\n        return false;\n      });\n    };\n\n    var setHoverRow = function(hoverRow : number) {\n      if (tableModel.hoverRow != hoverRow) {\n        if (tableModel.hoverRow != -1) {\n          setHoverRowImpl(tableModel.hoverRow, false);\n        }\n        tableModel.hoverRow = hoverRow;\n        if (tableModel.hoverRow != -1) {\n          setHoverRowImpl(tableModel.hoverRow, true);\n        }\n      }\n    };\n\n    return table.on('mouseover', function(event, detail) {\n        setHoverRow(detail.itemIndex.row);\n      }).\n      on('mouseout', function(event, detail) {\n        setHoverRow(-1);\n      });\n  };\n\n  var enableRowSelect = function(table : Table) {\n    return table.on('click', function(event, detail) {\n      if (detail.itemIndex.row != -1) {\n        var lastSelectedRows : { [row : string] : boolean } = {};\n        for (var k in this.model.selectedRows) {\n          lastSelectedRows[k] = true;\n        }\n        if (this.model.multipleRowsSelectable && detail.originalEvent.ctrlKey) {\n          // ctrl + click : toggle selection\n          if (!this.model.selectedRows[detail.itemIndex.row]) {\n            this.model.selectedRows[detail.itemIndex.row] = true;\n          } else {\n            delete this.model.selectedRows[detail.itemIndex.row];\n          }\n        } else {\n          this.model.selectedRows = {};\n          this.model.selectedRows[detail.itemIndex.row] = true;\n        }\n\n        // check changed.\n        var changed = false;\n        for (var k in this.model.selectedRows) {\n          if (lastSelectedRows[k]) {\n            delete lastSelectedRows[k];\n          } else {\n            changed = true;\n            break;\n          }\n        }\n        for (var k in lastSelectedRows) {\n          changed = true;\n          break;\n        }\n\n        if (changed) {\n          this.render(null, true);\n          this.model.trigger('rowselectionchange',\n              { selectedRows : this.model.selectedRows, reason : 'click' });\n        }\n      }\n    });\n  };\n\n  var setupDefaults = function(template : TableTemplate) {\n\n    // body => head,foot\n    var inheritFromBody = [ 'dataType',\n      'options', 'labelField', 'valueField',\n      'decimalDigits', 'booleanValues' ];\n    var bodyDataCells : any = {};\n    template.tbody.forEach(function(tr) {\n      tr.forEach(function(cell) {\n        if (typeof cell.dataField == 'string' &&\n            !bodyDataCells[cell.dataField]) {\n          bodyDataCells[cell.dataField] = cell;\n        }\n      });\n    });\n    template.thead.forEach(function(tr) {\n      tr.forEach(function(cell) {\n        if (typeof cell.dataField == 'string') {\n          var bodyDataCell = bodyDataCells[cell.dataField];\n          if (bodyDataCell) {\n            inheritFromBody.forEach(function(prop) {\n              if (bodyDataCell[prop] &&\n                  typeof (<any>cell)[prop] == 'undefined') {\n                (<any>cell)[prop] = bodyDataCell[prop];\n              }\n            });\n          }\n        }\n      });\n    });\n    template.tfoot.forEach(function(tr) {\n      tr.forEach(function(cell) {\n        if (typeof cell.dataField == 'string') {\n          var bodyDataCell = bodyDataCells[cell.dataField];\n          if (bodyDataCell) {\n            inheritFromBody.forEach(function(prop) {\n              if (bodyDataCell[prop] &&\n                  typeof (<any>cell)[prop] == 'undefined') {\n                (<any>cell)[prop] = bodyDataCell[prop];\n              }\n            });\n          }\n        }\n      });\n    });\n\n    template.thead.forEach(function(row) {\n      row.forEach(function(cell) {\n        if (!cell.factory && cell.dataType) {\n          cell.factory = createDefaultHeaderCellRendererFactory(cell);\n        }\n      });\n    });\n    template.tbody.forEach(function(row) {\n      row.forEach(function(cell) {\n        if (!cell.factory && cell.dataType) {\n          cell.factory = createDefaultCellRendererFactory(cell);\n        }\n      });\n    });\n    template.tfoot.forEach(function(row) {\n      row.forEach(function(cell) {\n        if (!cell.factory && cell.dataType) {\n          cell.factory = createDefaultCellRendererFactory(cell);\n        }\n      });\n    });\n  };\n\n  export var fromTemplate =\n      function(template : TableTemplate) : TemplateTable {\n\n    if (template.thead && !template.tbody) {\n      // set default tbody if not exists.\n      var cloneIfExists = function(src : any, props : string[]) {\n        var dst : any = {};\n        props.forEach(function(prop) {\n          !src[prop] || (dst[prop] = src[prop]);\n        });\n        return dst;\n      };\n      var props = [ 'colSpan', 'rowSpan', 'dataField' ];\n      template.tbody = template.thead.map(function(tr) {\n        return tr.map(function(headCell) {\n          return cloneIfExists(headCell, props);\n        });\n      });\n    }\n\n    template.thead = template.thead || [];\n    template.tbody = template.tbody || [];\n    template.tfoot = template.tfoot || [];\n\n    // setup defaults.\n    setupDefaults(template);\n\n    var columnCount = 0;\n    var cellWidth : { [k : number] : number } = {};\n    var cellHeight : { [k : number] : number } = {};\n    var columnResizable : { [k : number] : boolean } = {};\n\n    var styles = function() {\n      var spaned : { [ id : string ] : boolean } = {};\n      var setSpaned = function(row : number, col : number, cell : TableCell) {\n        for (var r = 0; r < cell.rowSpan; r += 1) {\n          for (var c = 0; c < cell.colSpan; c += 1) {\n            spaned[util.getCellId(row + r, col + c)] = true;\n          }\n        }\n      };\n      return template.thead\n          .concat(template.tbody)\n          .concat(template.tfoot).map(function(tr, row) {\n        var style : { [ col : number ] : TableTemplateCellStyle } = {};\n        var col = 0;\n        var c = 0;\n        while (c < tr.length) {\n          var id = util.getCellId(row, col);\n          if (spaned[id]) {\n            col += 1;\n            continue;\n          }\n          var td = tr[c];\n          var cell = util.extend({ rowSpan : 1, colSpan : 1 }, td);\n          setSpaned(row, col, cell);\n          if (typeof cell.width == 'number') {\n            cellWidth[col] = cell.width;\n          }\n          if (typeof cell.height == 'number') {\n            cellHeight[row] = cell.height;\n          }\n          if (typeof cell.columnResizable == 'boolean') {\n            columnResizable[col] = cell.columnResizable;\n          }\n          (<any>td)['.col'] = col;\n          style[col] = td;\n          col += cell.colSpan;\n          c += 1;\n        }\n        columnCount = Math.max(columnCount, col);\n        return style;\n      });\n    }();\n\n    var getCellsByDataField = function(cellList: TableTemplateCellStyle[][]) {\n      var cells : { [ dataField : string ] : TableTemplateCellStyle } = {};\n      cellList.forEach(function(tr, row) {\n        tr.forEach(function(td : any) {\n          if (td.dataField && !cells[td.dataField]) {\n            cells[td.dataField] = util.extend(\n              { row: row, col: td['.col']}, td);\n          }\n          // delete temporary.\n          delete td['.col'];\n        });\n      });\n      return cells;\n    };\n\n    var getCellStyleAt = function(\n        model : TemplateTableModel, row : number, col : number) {\n      if (row < headLength) {\n        return styles[row][col] || {};\n      } else if (row >= model.getRowCount() - footLength) {\n        return styles[row - bodyLength * (model.getItemCount() - 1)][col] || {};\n      } else {\n        return styles[headLength + (row - headLength) % bodyLength][col] || {};\n      }\n    };\n\n    var headLength = template.thead.length;\n    var bodyLength = template.tbody.length;\n    var footLength = template.tfoot.length;\n\n    class TemplateTableImpl extends TableImpl implements TemplateTable {\n\n      public getContextMenuItems() {\n        var messages = i18n.getMessages();\n        var tableModel = table.model as TemplateTableModel;\n        return [\n          {\n            label : messages.RESET_FILTER,\n            action : function() {\n              tableModel.resetFilter();\n            }\n          },\n          {\n            label : messages.EDIT_COLUMNS,\n            action : function() {\n              showColumnEditDialog(table);\n            }\n          }\n        ].filter(function(menuitem, i) {\n            return !(!table.model.isColumnDraggable() &&\n              menuitem.label == messages.EDIT_COLUMNS);\n        });\n      }\n    }\n\n    class TemplateTableModelImpl\n    extends DefaultTableModel implements TemplateTableModel {\n      public headCells = getCellsByDataField(template.thead);\n      public bodyCells = getCellsByDataField(template.tbody);\n      public footCells = getCellsByDataField(template.tfoot);\n      public lockLeft = template.lockColumn || 0;\n      public lockRight = 0;\n      public enableLockColumn = true;\n      // keep default value for restore.\n      public defaultLockColumn = this.lockLeft;\n\n      public setLockLeft(lockLeft : number) {\n        this.lockLeft = lockLeft;\n      }\n      public getLockLeft() {\n        return !this.enableLockColumn? 0 : this.lockLeft;\n      }\n      public getLockTop() { return headLength; }\n\n      public setLockRight(lockRight : number) {\n        this.lockRight = lockRight;\n      }\n      public getLockRight() {\n        return this.lockRight;\n      }\n      public getLockBottom() { return footLength; }\n\n      // user defines\n      public defaultHeaderCellRendererFactory =\n        createDefaultHeaderCellRendererFactory();\n      public cellWidth = cellWidth;\n      public cellHeight = cellHeight;\n      public columnDraggable = template.columnDraggable;\n      public columnResizable = columnResizable;\n      public orderedColumnIndices : number[] = null;\n      public sort : Sort = null;\n      private filters : { [ dataField : string ] : Filter } = {};\n      public filterFactory(dataField : string) : Filter {\n        return new DefaultFilter(this.headCells[dataField].dataType || 'string');\n      }\n      public getFilter(dataField : string) : Filter {\n        return this.filters[dataField] ||\n          (this.filters[dataField] = this.filterFactory(dataField) );\n      }\n      public hiddenColumns : { [ orderedCol : number ] : boolean } = {};\n      public isColumnHiddenAt(col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        return this.hiddenColumns[orderedCol];\n      }\n      public items : any[] = [];\n      public filteredItems : any[] = null;\n      public hoverRow = -1;\n      public editingCell : { row : number, col : number } = null;\n      public multipleRowsSelectable = false;\n      public selectedRows : { [ row : number ] : boolean } = {};\n      public resetFilter() {\n        this.sort = null;\n        for (var dataField in this.headCells) {\n          this.getFilter(dataField).setState(null);\n        }\n        this.filteredItems = null;\n        table.invalidate();\n      }\n      public getItemCount() {\n        return (this.filteredItems || this.items).length;\n      }\n      public getItemAt(row : number) {\n        return (this.filteredItems || this.items)[row];\n      }\n      private getOrderedColumnIndices() {\n        if (this.orderedColumnIndices == null) {\n          this.orderedColumnIndices = createDefaultOrderedColumnIndices(this);\n        }\n        return this.orderedColumnIndices;\n      }\n      public getOrderedColumnIndexAt(col : number) {\n        return this.getOrderedColumnIndices()[col];\n      }\n      public getRawColumnAt(col : number) {\n        var indices = this.getOrderedColumnIndices();\n        for (var i = 0; i < indices.length; i += 1) {\n          if (indices[i] == col) {\n            return i;\n          }\n        }\n        return 0;\n      }\n      public forEachItemCells(\n          callback : (\n            cell : TableTemplateCellStyle,\n            item : any, row : number, col : number) => boolean) : void {\n\n        var cells : { dataField : string, row : number, col : number}[]= [];\n        !function() {\n          for (var dataField in this.bodyCells) {\n            var cell = this.bodyCells[dataField];\n            cells.push({\n              dataField : dataField,\n              row : cell.row,\n              col : this.getRawColumnAt(cell.col)\n            });\n          }\n        }.bind(this)();\n        cells.sort(function(c1, c2) {\n          if (c1.row != c2.row) {\n            return c1.row < c2.row? -1 : 1;\n          }\n          return c1.col < c2.col? -1 : 1;\n        });\n\n        var lineRowOffset = this.getLockTop() > 0? this.getLineRowCountAt(0) : 0;\n        var lineRowCount = this.getLineRowCountAt(this.getLockTop() );\n        var items = this.filteredItems || this.items;\n\n        for (var r = 0; r < items.length; r += 1) {\n          var item = items[r];\n          for (var c = 0; c < cells.length; c += 1) {\n            var cell = cells[c];\n            var col = cell.col;\n            var row = lineRowOffset + r * lineRowCount + cell.row;\n            if (callback(cell, item, row, col) ) {\n              return;\n            }\n          }\n        }\n      }\n      public getItemIndexAt(row : number, col : number) : ItemIndex {\n        if (row < headLength) {\n          return { row : -1, col : -1 };\n        } else if (row >= this.getRowCount() - footLength) {\n          return { row : -1, col : -1 };\n        } else {\n          var orderedCol = this.getOrderedColumnIndexAt(col);\n          var style = getCellStyleAt(this, row, orderedCol);\n          row -= headLength;\n          return {\n            row : Math.floor(row / bodyLength),\n            col : style.dataField ||\n              ( (row % bodyLength) * this.getColumnCount() + orderedCol)\n          };\n        }\n      }\n      public setValueAt(row : number, col : number, value : any) {\n        if (row < headLength) {\n        } else if (row >= this.getRowCount() - footLength) {\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          var item = this.getItemAt(itemIndex.row);\n          if (item) {\n            item[itemIndex.col] = value;\n          }\n        }\n      }\n      // overrides\n      public getRowCount() { return headLength +\n        bodyLength * this.getItemCount() + footLength; }\n      public getColumnCount() { return columnCount; }\n      public getLineRowCountAt(row : number) {\n        return row < headLength? headLength :\n          row >= this.getRowCount() - footLength? footLength :\n          bodyLength; }\n      public getLineRowAt(row : number) {\n        return row < headLength? row :\n          row >= this.getRowCount() - footLength?\n              row - (this.getRowCount() - footLength) :\n          (row - headLength) % bodyLength; }\n      public getCellWidthAt(col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        if (this.hiddenColumns[orderedCol]) {\n          return 0;\n        }\n        var v = this.cellWidth[orderedCol];\n        return typeof v == 'number'? v : this.defaultCellWidth;\n      }\n      public getCellHeightAt(row : number) {\n        var r = row < headLength? row :\n          row >= this.getRowCount() - footLength?\n              row - (this.getRowCount() - footLength) +\n                headLength + bodyLength :\n          (row - headLength) % bodyLength + headLength;\n        var v = this.cellHeight[r];\n        return typeof v == 'number'? v : this.defaultCellHeight;\n      }\n      public isColumnDraggable() {\n        var v = this.columnDraggable;\n        return typeof v == 'boolean'? v : true;\n      }\n      public isColumnResizableAt(col : number) {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        var v = this.columnResizable[orderedCol];\n        return typeof v == 'boolean'? v : true;\n      }\n      public getCellRendererFactoryAt(row : number, col : number) :\n          TableCellRendererFactory {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        return getCellStyleAt(this, row, orderedCol).factory ||\n          (row < headLength?\n            this.defaultHeaderCellRendererFactory :\n            this.defaultCellRendererFactory);\n      }\n      public getCellStyleAt(row : number, col : number) : TableCellStyle {\n\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        var style = util.extend({}, getCellStyleAt(this, row, orderedCol) );\n        style.className = style.className || '';\n\n        if (this.editingCell &&\n            this.editingCell.row == row &&\n            this.editingCell.col == col) {\n          style.className += ' ${prefix}-editing';\n        }\n\n        if (row < headLength) {\n          style.className += ' ${prefix}-header';\n          style.editable = false;\n        } else if (row >= this.getRowCount() - footLength) {\n          style.className += ' ${prefix}-footer';\n          style.editable = false;\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          row -= headLength;\n          style.className += ' ${prefix}-' +\n            (itemIndex.row % 2 == 0? 'even' : 'odd');\n          if (this.selectedRows[itemIndex.row]) {\n            style.className += ' ${prefix}-item-selected';\n          }\n          if (this.getItemStyleAt) {\n            util.extend(style, this.getItemStyleAt(itemIndex) );\n          }\n        }\n\n        if (style.editable === false) {\n          style.className += ' ${prefix}-readonly';\n        }\n\n        return style;\n      }\n\n      public getItemStyleAt :\n        (itemIndex : ItemIndex) => TableCellStyle = null;\n\n      public getValueAt(row : number, col : number) : any {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        if (row < headLength || row >= this.getRowCount() - footLength) {\n          var label : any = getCellStyleAt(this, row, orderedCol).label || '';\n          return typeof label == 'function'? label(this) : label;\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          var value = this.getItemAt(itemIndex.row)[itemIndex.col];\n          return typeof value != 'undefined'? value : '';\n        }\n      }\n      public tooltipSuffix = 'Tooltip';\n      public getTooltipAt(row : number, col : number) : any {\n        var orderedCol = this.getOrderedColumnIndexAt(col);\n        if (row < headLength || row >= this.getRowCount() - footLength) {\n          return '';\n        } else {\n          var itemIndex = this.getItemIndexAt(row, col);\n          var value = this.getItemAt(itemIndex.row)\n            [itemIndex.col + this.tooltipSuffix];\n          return typeof value != 'undefined'? value : '';\n        }\n      }\n      public setTableState(tableState : TemplateTableState) {\n\n        tableState = JSON.parse(JSON.stringify(tableState) );\n\n        tableState.lockColumn = tableState.lockColumn || 0;\n        tableState.enableLockColumn = !!tableState.enableLockColumn;\n        tableState.cellWidths = tableState.cellWidths || [];\n        tableState.cellHeights = tableState.cellHeights || [];\n        tableState.hiddenColumns = tableState.hiddenColumns || [];\n        tableState.sort = tableState.sort || null;\n        tableState.filters = tableState.filters || {};\n        tableState.orderedColumnIndices =\n          tableState.orderedColumnIndices || null;\n\n        var cellWidth : { [ col : number ] : number } = {};\n        var cellHeight : { [ row : number ] : number } = {};\n        var hiddenColumns : { [ orderedCol : number ] : boolean } = {};\n        tableState.cellWidths.forEach(\n            function(cw : { col : number, width : number }){\n          cellWidth[cw.col] = cw.width;\n        });\n        tableState.cellHeights.forEach(\n            function(ch : { row : number, height : number }) {\n          cellHeight[ch.row] = ch.height;\n        });\n        tableState.hiddenColumns.forEach(function(orderedCol : number) {\n          hiddenColumns[orderedCol] = true;\n        });\n        this.lockLeft = tableState.lockColumn;\n        this.enableLockColumn = tableState.enableLockColumn;\n        this.cellWidth = cellWidth;\n        this.cellHeight = cellHeight;\n        this.hiddenColumns = hiddenColumns;\n        this.sort = tableState.sort;\n        var filtered = false;\n        if (this.sort) {\n          filtered = true;\n        }\n        for (var dataField in this.headCells) {\n          var filter = tableState.filters[dataField];\n          this.getFilter(dataField).setState(filter || null);\n          if (filter) {\n            filtered = true;\n          }\n        }\n        this.orderedColumnIndices = tableState.orderedColumnIndices;\n        if (filtered) {\n          this.trigger('filterchange');\n        }\n      }\n      public getTableState() : TemplateTableState {\n        var cellWidths : { col : number, width : number}[] = [];\n        var cellHeights : { row : number, height : number}[] = [];\n        var hiddenColumns : number[] = [];\n        var filters : { [ dataField : string ] : any } = {};\n        var col : any, row : any;\n        for (col in this.cellWidth) {\n          cellWidths.push({ col : col, width : this.cellWidth[col] });\n        }\n        for (row in this.cellHeight) {\n          cellHeights.push({ row : row, height : this.cellHeight[row] });\n        }\n        for (col in this.hiddenColumns) {\n          hiddenColumns.push(col);\n        }\n        for (var dataField in this.headCells) {\n          var filter = this.getFilter(dataField);\n          if (filter.enabled() ) {\n            filters[dataField] = filter.getState();\n          }\n        }\n        var tableState : TemplateTableState = {\n          lockColumn : this.lockLeft,\n          enableLockColumn : this.enableLockColumn,\n          cellWidths : cellWidths,\n          cellHeights : cellHeights,\n          hiddenColumns : hiddenColumns,\n          sort : this.sort,\n          filters : filters,\n          orderedColumnIndices : this.getOrderedColumnIndices()\n        };\n        return JSON.parse(JSON.stringify(tableState) );\n      }\n    }\n\n    var table = new TemplateTableImpl(\n        new TemplateTableModelImpl() );\n\n    // append itemIndex to events.\n    [ 'valuechange' ].\n    forEach(function(type) {\n      table.model.on(type, function(event : Event, detail : any) {\n        detail.itemIndex = this.getItemIndexAt(detail.row, detail.col);\n      });\n    });\n    tableEventTypes.forEach(function(type) {\n      table.on(type, function(event : Event, detail : any) {\n        detail.itemIndex = this.model.getItemIndexAt(detail.row, detail.col);\n      });\n    });\n\n    table.on('mousedown', function(event : Event, detail : any) {\n      if (detail.row < this.model.getLockTop() ) {\n        // on header.\n        this.editor.endEdit();\n        this.invalidate();\n      }\n    }).on('contextmenu', function(event : Event, detail : any) {\n\n      if (!(detail.row < table.model.getLockTop() ) ) {\n        return;\n      }\n\n      detail.originalEvent.preventDefault();\n      this.trigger('showcontextmenu', {\n        x: detail.originalEvent.pageX,\n        y: detail.originalEvent.pageY });\n\n    }).on('showcontextmenu', function(event : Event, detail : any) {\n\n      var menuItems = this.getContextMenuItems();\n      if (!menuItems || menuItems.length == 0) {\n        return;\n      }\n\n      util.callLater(function() {\n        ui.showMenu(detail.x, detail.y, menuItems);\n      });\n\n    });\n\n    util.set(table.$el, {\n      on : {\n        contextmenu : function(event) {\n\n          var menu = util.closest(event.target,\n            { className : '${prefix}-contextmenu', root : table.$el });\n          if (menu != null) {\n            return;\n          }\n\n          var tbl = util.closest(event.target,\n            { tagName : 'TABLE', root : table.$el });\n          if (tbl == null) {\n            event.preventDefault();\n            table.trigger('showcontextmenu', {\n              x: event.pageX, y: event.pageY });\n          }\n        }\n      }\n    });\n\n    table.model.on('valuechange', function(event : Event, detail : any) {\n      this.trigger('beforevaluechange', detail);\n      this.setValueAt(detail.row, detail.col, detail.newValue);\n    }).on('editingcellchange', function(event : Event, detail : any) {\n      this.editingCell = detail.cell;\n    }).on('cellsizechange', function(event : Event, detail : any) {\n      if (typeof detail.col == 'number') {\n        var orderedCol = this.getOrderedColumnIndexAt(detail.col);\n        this.cellWidth[orderedCol] = detail.cellWidth;\n      }\n    }).on('columndragged', function(event : Event, detail : any) {\n      var tableModel = <TemplateTableModelImpl>table.model;\n      this.orderedColumnIndices = util.moveSublist(\n          this.orderedColumnIndices, detail.colFrom, detail.colSpan, detail.colTo);\n      if (detail.colFrom < tableModel.lockLeft &&\n          tableModel.lockLeft <= detail.colTo) {\n        tableModel.lockLeft -= detail.colSpan;\n      } else if (detail.colTo < tableModel.lockLeft &&\n          tableModel.lockLeft <= detail.colFrom) {\n        tableModel.lockLeft += detail.colSpan;\n      }\n    }).on('filterchange', function() {\n\n      // apply filter\n\n      // clear selected rows.\n      this.selectedRows = {};\n      this.trigger('rowselectionchange',\n          { selectedRows : this.selectedRows, reason : 'filterchange' });\n\n      var filters : { [ dataField : string ] : Filter } = {};\n      !function() {\n        for (var dataField in this.headCells) {\n          var filter = this.getFilter(dataField);\n          if (filter.enabled() ) {\n            filters[dataField] = filter;\n          }\n        }  \n      }.bind(this)();\n\n      var filteredItems : any[] = this.items.filter(function(item : any) {\n        var filtered = false;\n        for (var dataField in filters) {\n          var value = item[dataField];\n          if (typeof value == 'undefined') {\n            continue;\n          }\n          var filter = filters[dataField];\n          if (!filter.accept(value) ) {\n            filtered = true;\n            break;\n          }\n        }\n        return !filtered;\n      } );\n\n      var sort = this.sort;\n      if (sort) {\n        var order = sort.order == SortOrder.ASC? 1 : -1;\n        var dataField = sort.dataField;\n        var indexField = '.index';\n        var sortKeyField = '.sortKey';\n\n        // sort by custom comparator or default.\n        var comparator = this.headCells[dataField].comparator ||\n          function(v1 : any, v2 : any) { return v1 < v2? -1 : 1; };\n\n        filteredItems.forEach(function(item, i) {\n          item[indexField] = i;\n          item[sortKeyField] = (item[dataField] === null ||\n              typeof item[dataField] == 'undefined')? '' : item[dataField];\n        });\n\n        filteredItems.sort(function(item1, item2) {\n          var v1 = item1[sortKeyField];\n          var v2 = item2[sortKeyField];\n          if (v1 === '' && v2 !== '') {\n            return 1;\n          } else if (v1 !== '' && v2 === '') {\n            return -1;\n          }\n          var result = (v1 === v2)? 0 : comparator(v1, v2);\n          if (result != 0) {\n            return order * result;\n          }\n          // index order.\n          return order * (item1[indexField] < item2[indexField]? -1 : 1);\n        });\n\n        filteredItems.forEach(function(item) {\n          delete item[indexField];\n          delete item[sortKeyField];\n        });\n      }\n      this.filteredItems = filteredItems;\n      table.invalidate();\n    });\n\n    enableHover(table);\n    enableRowSelect(table);\n\n    return table;\n  }\n\n}\n","/**\n * comfortable\n *\n * Copyright (c) 2018 Kazuhiko Arase\n *\n * URL: https://github.com/kazuhikoarase/comfortable-js/\n *\n * Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\nnamespace comfortable {\n\n  var table = {\n    template: '<div class=\"comfortable\"></div>',\n    props : {\n      template : { 'default' : function() {\n          return {\n            thead : [[ { label : 'col1' },{ label : 'col2' },{ label : 'col3' }]]\n          };\n        } },\n    },\n    methods: {\n      invalidate : function() {\n        this.$options.table.invalidate();\n        return this;\n      },\n      setItems : function(items : any[]) {\n        this.$options.table.model.items = items;\n        this.invalidate();\n        if (this.getModel().filteredItems) {\n          this.getModel().trigger('filterchange');\n        }\n        return this;\n      },\n      getItems : function() {\n        return this.$options.table.model.items;\n      },\n      getModel : function() {\n        return this.$options.table.model;\n      }\n    },\n    mounted : function() {\n\n      var table = fromTemplate(this.template);\n\n      // set default values.\n      table.$el.style.width = '100%';\n      table.$el.style.height = '100%';\n      this.$el.style.width = this.$el.style.width || '400px';\n      this.$el.style.height = this.$el.style.height || '200px';\n\n      // emit events.\n      var emitEventHandler = function(event : Event, detail : any) {\n        this.$emit(event.type, event, detail);\n      }.bind(this);\n      [\n       'mousedown', 'mouseover', 'mouseout',\n       'click', 'dblclick', 'contextmenu' ].forEach(function(type) {\n         table.on(type, emitEventHandler);\n       });\n      table.model.on('valuechange', emitEventHandler);\n\n      // as a non-reactive property, set to $options.\n      this.$options.table = table;\n      this.$el.appendChild(table.$el);\n\n      var items : string = this.items;\n      this.setItems(items? JSON.parse(items) : []);\n\n      // observe the size of table.\n      util.extend(this.$options, {\n        observeInterval : 50, // ms(20fps)\n        alive : true, lastSize : { width : 0, height : 0 }\n      });\n      var observeSize = function() {\n        var size = {\n          width : this.$el.offsetWidth,\n          height : this.$el.offsetHeight\n        };\n        if (size.width != this.$options.lastSize.width ||\n            size.height != this.$options.lastSize.height) {\n          this.$options.lastSize = size;\n          this.invalidate();\n        }\n        if (this.$options.alive) {\n          window.setTimeout(observeSize, this.$options.observeInterval);\n        }\n      }.bind(this);\n      observeSize();\n    },\n    beforeDestroy : function() {\n      // stop observing\n      this.$options.alive = false;\n      // dispose\n      this.$options.table.dispose();\n    }\n  }\n\n  export var vueComponents = {\n    table : table\n  }\n\n}\n"]}